{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.9", "generated_at": "2024-01-08T09:52:12.891451Z", "invocation_id": "581b7470-b4e2-44d6-b5ce-594053240644", "env": {}, "project_id": "8c76767f7da2a23febfff4bc559b75ba", "user_id": null, "send_anonymous_usage_stats": true, "adapter_type": "sqlserver"}, "nodes": {"model.mattoni_1873.int_pepsi_documents_open_enhanced": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "int_pepsi_documents_open_enhanced", "resource_type": "model", "package_name": "mattoni_1873", "path": "intermediate\\sales\\int_pepsi_documents_open_enhanced.sql", "original_file_path": "models\\intermediate\\sales\\int_pepsi_documents_open_enhanced.sql", "unique_id": "model.mattoni_1873.int_pepsi_documents_open_enhanced", "fqn": ["mattoni_1873", "intermediate", "sales", "int_pepsi_documents_open_enhanced"], "alias": "int_pepsi_documents_open_enhanced", "checksum": {"name": "sha256", "checksum": "e561a03521398dcef66595a06e3c0d824e0ab765e4e2c5486c9117d41573ae2b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704694.8527873, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"int_pepsi_documents_open_enhanced\"", "raw_code": "with document as (\r\n\tselect * from {{ ref('stg_sap__documents_open') }}\r\n),\r\n\r\ncalendar as (\r\n    select * from {{ ref('stg_dwh__calendar') }}\r\n),\r\n\r\nentity as (\r\n    select * from {{ ref('stg_dwh__dim_entities') }}\r\n), \r\n\r\ncountry as (\r\n\tselect * from {{ ref('stg_dwh__dim_countries') }}\r\n),\r\n\r\nproduct as (\r\n\tselect * from {{ ref('stg_sap__products') }}\r\n),\r\n\r\ncustomer as (\r\n\tselect * from {{ ref('stg_dwh__dim_customers') }}\r\n),\r\n\r\nfx as (\r\n    select * from {{ ref('stg_dwh__fx_rates') }}\r\n),\r\n\r\ncall_representative as (\r\n    select * from {{ ref('stg_dwh__dim_call_representatives') }}\r\n),\r\n\r\nfinal as (\r\n\tselect\r\n\t\tcalendar.last_of_month as calendar_id,\r\n\t\tcountry.country_id as country_id,\r\n\t\tentity.entity_id as entity_id,\r\n\t\tcoalesce(document.soldto_customer_id, -1) as sold_to_id,\r\n\t\tcoalesce(document.shipto_customer_id, -1) as ship_to_id,\r\n\t\tcoalesce(document.payer_id, -1) as payer_id,\r\n\t\tcoalesce(document.call_representative_id, -1) as call_representative_id,\r\n\t\tcoalesce(product.local_sku_id, -1) as local_sku_id,\r\n\t\tsum(document.piece_quantity) as piece_quantity,\r\n\t\tsum(document.liter_quantity) as liter_quantity,\r\n\t\tsum(document.oz8_quantity) as oz8_quantity,\r\n\t\tsum(document.rrc_quantity) as rrc_quantity,\r\n\t\tsum(document.net_revenue_lc) as net_revenue_lc,\r\n\t\tcoalesce(sum(document.net_revenue_lc * fx.fx_rate), 0) as net_revenue_czk -- novz komentar\r\n\t\r\n\tfrom \r\n\t\tdocument\r\n\t\r\n\t\tinner join calendar\r\n\t\t\ton document.document_date_id = calendar.calendar_id\r\n\r\n\t\tinner join entity\r\n\t\t\ton document.country_id = entity.country_id\r\n\r\n\t\tinner join country\r\n\t\t\ton document.country_id = country.country_id\r\n\r\n\t\tinner join product \r\n\t\t\ton document.product_id = product.product_id\r\n\r\n        left join call_representative\r\n            on document.call_representative_id = call_representative.call_representative_id\r\n\r\n\t\tleft join customer as sold_to\r\n\t\t\ton document.soldto_customer_id = sold_to.customer_id\r\n\t\t\r\n\t\tleft join customer as ship_to\r\n\t\t\ton document.shipto_customer_id = ship_to.customer_id\r\n\r\n\t\tleft join customer as payer\r\n\t\t\ton document.payer_id = payer.customer_id\r\n\r\n        left join fx\r\n            on document.document_date_id = fx.calendar_id\r\n            and country.currency_id = fx.from_currency_id\r\n            and 137 = fx.to_currency_id\r\n--            and document.country_id = fx.country_id\r\n\r\n\twhere\r\n\t\tproduct.material_type_code = 'FERT'\r\n        and entity.entity_sap_code = 'PEPSI'\r\n\t\tand document.document_date_id >= {{ var('months_to_refresh') }}\r\n\r\n\tgroup by \r\n\t\tcalendar.last_of_month,\r\n\t\tcountry.country_id,\r\n\t\tentity.entity_id,\r\n\t\tdocument.soldto_customer_id,\r\n\t\tdocument.shipto_customer_id,\r\n\t\tdocument.payer_id,\r\n        document.call_representative_id,\r\n\t\tproduct.local_sku_id\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sap__documents_open"], ["stg_dwh__calendar"], ["stg_dwh__dim_entities"], ["stg_dwh__dim_countries"], ["stg_sap__products"], ["stg_dwh__dim_customers"], ["stg_dwh__fx_rates"], ["stg_dwh__dim_call_representatives"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sap__documents_open", "model.mattoni_1873.stg_dwh__calendar", "model.mattoni_1873.stg_dwh__dim_entities", "model.mattoni_1873.stg_dwh__dim_countries", "model.mattoni_1873.stg_sap__products", "model.mattoni_1873.stg_dwh__dim_customers", "model.mattoni_1873.stg_dwh__fx_rates", "model.mattoni_1873.stg_dwh__dim_call_representatives"]}, "compiled_path": null}, "model.mattoni_1873.int_document_sections_hierarchy": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "int_document_sections_hierarchy", "resource_type": "model", "package_name": "mattoni_1873", "path": "intermediate\\sfa\\int_document_sections_hierarchy.sql", "original_file_path": "models\\intermediate\\sfa\\int_document_sections_hierarchy.sql", "unique_id": "model.mattoni_1873.int_document_sections_hierarchy", "fqn": ["mattoni_1873", "intermediate", "sfa", "int_document_sections_hierarchy"], "alias": "int_document_sections_hierarchy", "checksum": {"name": "sha256", "checksum": "91f9d885be4f6a9716f88dac27e88934259da217ef366f957f4c359202fae43b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704694.8607867, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"int_document_sections_hierarchy\"", "raw_code": "with source as (\r\n    select * from {{ ref('stg_sfa__questionnaire_sections') }}\r\n)\r\n\r\nselect * from source", "language": "sql", "refs": [["stg_sfa__questionnaire_sections"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__questionnaire_sections"]}, "compiled_path": null}, "model.mattoni_1873.int_mobile_tracking_gps": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "int_mobile_tracking_gps", "resource_type": "model", "package_name": "mattoni_1873", "path": "intermediate\\sfa\\int_mobile_tracking_gps.sql", "original_file_path": "models\\intermediate\\sfa\\int_mobile_tracking_gps.sql", "unique_id": "model.mattoni_1873.int_mobile_tracking_gps", "fqn": ["mattoni_1873", "intermediate", "sfa", "int_mobile_tracking_gps"], "alias": "int_mobile_tracking_gps", "checksum": {"name": "sha256", "checksum": "c98805b97068e5d53ae917729ebe5fb0d7c222b713bda50796e2b3ea90a3cd3e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704694.8637965, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"int_mobile_tracking_gps\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith mobile_tracking as (\r\n    select * from {{ ref('stg_sfa__mobile_day_tracking_v') }}\r\n),\r\n\r\nstart_coordinates as (\r\n    select\r\n        mobile_user_id,\r\n        day_date,\r\n        day_start_time,\r\n        day_end_time,\r\n        start_latitude as latitude,\r\n        start_longitude as longtitude,\r\n        'start' as geotype,\r\n        datediff(second, day_start_time, day_end_time) AS duration_seconds\r\n\r\n    from \r\n        mobile_tracking\r\n),\r\n\r\nend_coordinates as (\r\n    select\r\n        mobile_user_id,\r\n        day_date,\r\n        day_start_time,\r\n        day_end_time,\r\n        end_latitude as latitude,\r\n        end_longitude as longtitude,\r\n        'end' as geotype,\r\n        datediff(second, day_start_time, day_end_time) as duration_seconds\r\n\r\n    from \r\n        mobile_tracking\r\n),\r\n\r\nfinal as (\r\n    select *\r\n    from start_coordinates\r\n\r\n    union\r\n\r\n    select *\r\n    from end_coordinates\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__mobile_day_tracking_v"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__mobile_day_tracking_v"]}, "compiled_path": null}, "model.mattoni_1873.int_questionnare_responses": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "int_questionnare_responses", "resource_type": "model", "package_name": "mattoni_1873", "path": "intermediate\\sfa\\int_questionnare_responses.sql", "original_file_path": "models\\intermediate\\sfa\\int_questionnare_responses.sql", "unique_id": "model.mattoni_1873.int_questionnare_responses", "fqn": ["mattoni_1873", "intermediate", "sfa", "int_questionnare_responses"], "alias": "int_questionnare_responses", "checksum": {"name": "sha256", "checksum": "569c566bc8ebcc5ed5a46a54c46f2f0525a97886488c2c7124ab4f9882a3dca1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "view"}, "created_at": 1704704694.86779, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"int_questionnare_responses\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'view'\r\n    )\r\n}}\r\n\r\nwith questionnaire_response as (\r\n    select * from {{ ref('stg_sfa__questionnaire_responses') }}\r\n),\r\n\r\nquestionnare_responded_on_visit as (\r\n    select * from {{ ref('stg_sfa__questionnaire_responded_on_visit') }}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n    questionnaire_response_id\r\n    from\r\n    questionnare_responded_on_visit\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__questionnaire_responses"], ["stg_sfa__questionnaire_responded_on_visit"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__questionnaire_responses", "model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit"]}, "compiled_path": null}, "model.mattoni_1873.dim_customers": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "dim_customers", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\dim_customers.sql", "original_file_path": "models\\marts\\core\\dim_customers.sql", "unique_id": "model.mattoni_1873.dim_customers", "fqn": ["mattoni_1873", "marts", "core", "dim_customers"], "alias": "dim_customers", "checksum": {"name": "sha256", "checksum": "55d74f4341b5f71cbdff109916f738780897cc331c44104aad5de3642e56de9b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Relevant information regarding customers, which are entities of Mattoni that fullfill orders... Example of customer is eg. Mattoni CZ, Mattoni HU. Also it includes default customers for separate app modules (those are not used, yet)", "columns": {"customer_id": {"name": "customer_id", "description": "The numerical ID associated with the country code, generated using the macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": " The numerical ID associated with the country code, generated using the macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": " Country code of customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "Name of customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_trading_name": {"name": "customer_trading_name", "description": "Name of main customer", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.42582, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"dim_customers\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith customer as (\r\n    select * from {{ ref('stg_sfa__customers') }}\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        ----------  ids\r\n        customer_id,\r\n        country_id,\r\n        country_code,\r\n\r\n        ----------  strings\r\n        customer_name,\r\n        customer_trading_name\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps   \r\n\r\n        ----------  omited\r\n\r\n    from customer\r\n    \r\n    where\r\n        dbt_valid_to >= cast('{{ var(\"future_proof_date\") }}' as datetime2)\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__customers"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__customers"]}, "compiled_path": null}, "model.mattoni_1873.dim_images": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "dim_images", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\dim_images.sql", "original_file_path": "models\\marts\\core\\dim_images.sql", "unique_id": "model.mattoni_1873.dim_images", "fqn": ["mattoni_1873", "marts", "core", "dim_images"], "alias": "dim_images", "checksum": {"name": "sha256", "checksum": "87302d66d0cfcbee9ef9a060289d4f826fa6fb02d677f3c1bad3310ecdaf222f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Consists of images from SFA application, that belongs to questionnaires. It provied names of each file and metadata. Data are stored on servers hosted by Soft Serve.", "columns": {"questionnaire_response_id": {"name": "questionnaire_response_id", "description": " The numerical ID associated with the country code, generated using the dbt generate unique key macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sfa_file_key": {"name": "sfa_file_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sfa_file_name": {"name": "sfa_file_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sfa_file_id": {"name": "sfa_file_id", "description": " The numerical ID associated with the country code, generated using the dbt generate unique key macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sfa_file_name_unique": {"name": "sfa_file_name_unique", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "Comment to image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_edited": {"name": "is_edited", "description": "Bool, if image was manipulated with or not. Edited images are very suspect! Edited images should be manually checked, why they were manipulated with...", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_file_key": {"name": "content_file_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.3968182, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"dim_images\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith sfa_file as (\r\n    select * from {{ ref('stg_sfa__files_v') }}\r\n),\r\n\r\nresponse_image as (\r\n    select * from {{ ref('stg_sfa__questionnaire_response_images_v') }}\r\n),\r\n\r\nfirst_image as (\r\n    select\r\n    questionnaire_response_id,\r\n    sfa_file_id,\r\n    image_id\r\n    from (\r\n        select\r\n            questionnaire_response_id,\r\n            sfa_file_id,\r\n            step,\r\n            image_id,\r\n            row_number() over (partition by sfa_file_id order by step) as rown \r\n        from response_image\r\n    ) as subquery\r\n    where rown = 1\r\n),\r\n\r\nfinal as (\r\n    select \r\n        \r\n\r\n        ----------  ids\r\n        sfa_file.sfa_file_id,\r\n        sfa_file.content_file_key,\r\n        first_image.questionnaire_response_id,\r\n        sfa_file.country_code,\r\n        sfa_file.sfa_file_key,\r\n\r\n        ----------  strings\r\n        sfa_file.sfa_file_name,    \r\n        sfa_file.sfa_file_name_unique,\r\n        sfa_file.comment,\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n        sfa_file.is_edited\r\n\r\n        ----------  timestamps\r\n    \r\n        ----------  omited\r\n\r\n\r\n    from \r\n    first_image\r\n    left join sfa_file\r\n    on first_image.sfa_file_id = sfa_file.sfa_file_id\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__files_v"], ["stg_sfa__questionnaire_response_images_v"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__files_v", "model.mattoni_1873.stg_sfa__questionnaire_response_images_v"]}, "compiled_path": null}, "model.mattoni_1873.dim_inaccessibility_reasons": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "dim_inaccessibility_reasons", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\dim_inaccessibility_reasons.sql", "original_file_path": "models\\marts\\core\\dim_inaccessibility_reasons.sql", "unique_id": "model.mattoni_1873.dim_inaccessibility_reasons", "fqn": ["mattoni_1873", "marts", "core", "dim_inaccessibility_reasons"], "alias": "dim_inaccessibility_reasons", "checksum": {"name": "sha256", "checksum": "13da09bdc75441b5610d449eb0d6bda63d70ba6333809e0ae24df93dbcac6e8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table with reasons, why sales representative wasn't able to do her/his planned visit regarding to plan. In case, there was some comment written by sales rep, it will be in visit table itself (fact_visit).", "columns": {"inaccessibility_reason_id": {"name": "inaccessibility_reason_id", "description": "The numerical ID associated with the inaccessibility reason key, generated using the dbt generate unique key macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inaccessibility_reason": {"name": "inaccessibility_reason", "description": "Reason itself, text description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "The numerical ID associated with the country code, generated using the dbt generate unique key macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "  Country code of inaccessibility reason", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inaccessibility_reason_external_code": {"name": "inaccessibility_reason_external_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.4288197, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"dim_inaccessibility_reasons\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith inaccessibility_reason as (\r\n    select * from {{ ref('stg_sfa__visit_inaccessibility_reasons') }}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n\r\n\r\n\r\n        ----------  ids\r\n        inaccessibility_reason_id,\r\n        inaccessibility_reason_external_code,\r\n\r\n        country_id,\r\n        country_code,\r\n\r\n        ----------  strings\r\n        inaccessibility_reason\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n    \r\n        ----------  omited\r\n\r\n\r\n    from\r\n        inaccessibility_reason\r\n    where\r\n        dbt_valid_to >= cast('{{ var(\"future_proof_date\") }}' as datetime2)\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [["stg_sfa__visit_inaccessibility_reasons"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__visit_inaccessibility_reasons"]}, "compiled_path": null}, "model.mattoni_1873.dim_kpi": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "dim_kpi", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\dim_kpi.sql", "original_file_path": "models\\marts\\core\\dim_kpi.sql", "unique_id": "model.mattoni_1873.dim_kpi", "fqn": ["mattoni_1873", "marts", "core", "dim_kpi"], "alias": "dim_kpi", "checksum": {"name": "sha256", "checksum": "22db3f3854ccaab9f7b8139770b7637c8d494818b4558b964538a981e291d7e1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "KPIs ", "columns": {"country_code": {"name": "country_code", "description": " Country code of KPI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_name": {"name": "kpi_name", "description": "Name of KPI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_level_1": {"name": "kpi_level_1", "description": "Top level structure of KPI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_level_2": {"name": "kpi_level_2", "description": "2nd level structure of KPI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_level_3": {"name": "kpi_level_3", "description": "3rd level structure of KPI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_level_4": {"name": "kpi_level_4", "description": "4th level structure of KPI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_level_5": {"name": "kpi_level_5", "description": "5th level structure of KPI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_level_6": {"name": "kpi_level_6", "description": "6th level structure of KPI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_external_code": {"name": "kpi_external_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_description": {"name": "kpi_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_levels": {"name": "number_of_levels", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity": {"name": "activity", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified": {"name": "last_modified", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_id": {"name": "kpi_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id_1": {"name": "parent_id_1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id_2": {"name": "parent_id_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id_3": {"name": "parent_id_3", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id_4": {"name": "parent_id_4", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id_5": {"name": "parent_id_5", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id_6": {"name": "parent_id_6", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_country_id": {"name": "kpi_country_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.4398236, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"dim_kpi\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\n\r\nwith kpi as (\r\n    select * from {{ ref('stg_sfa__kpis') }}\r\n),\r\n\r\n\r\nfinal as (\r\n    select\r\n        country_code = isnull(\r\n            kpi.country_code,\r\n            'n/a'\r\n        ),\r\n        kpi_name = isnull(\r\n            kpi.name,\r\n            'n/a'\r\n        ),\r\n        kpi_level_1 = isnull(\r\n            level1.name,\r\n            'n/a'\r\n        ),\r\n        kpi_level_2 = isnull(\r\n            level2.name,\r\n            'n/a'\r\n        ),\r\n        kpi_level_3 = isnull(\r\n            level3.name,\r\n            'n/a'\r\n        ),\r\n        kpi_level_4 = isnull(\r\n            level4.name,\r\n            'n/a'\r\n        ),\r\n        kpi_level_5 = isnull(\r\n            level5.name,\r\n            'n/a'\r\n        ),\r\n        kpi_level_6 = isnull(\r\n            level6.name,\r\n            'n/a'\r\n        ),\r\n        kpi_external_code = isnull(\r\n            kpi.externalcode,\r\n            'n/a'\r\n        ),\r\n        kpi_description = isnull(\r\n            kpi.comment,\r\n            'n/a'\r\n        ),\r\n        TYPE = isnull(\r\n            kpi.type,\r\n            -1\r\n        ),\r\n        number_of_levels = isnull(\r\n            kpi.level,\r\n            -1\r\n        ),\r\n        status = isnull(\r\n            kpi.status,\r\n            -1\r\n        ),\r\n        activity = isnull(\r\n            kpi.activitytype,\r\n            -1\r\n        ),\r\n        last_modified = kpi.dlm,\r\n        kpi_id = kpi.kpiid,\r\n        parent_id = isnull(\r\n            kpi.kpiid,\r\n            'n/a'\r\n        ),\r\n        parent_id_1 = isnull(\r\n            level1.parentid,\r\n            'n/a'\r\n        ),\r\n        parent_id_2 = isnull(\r\n            level2.parentid,\r\n            'n/a'\r\n        ),\r\n        parent_id_3 = isnull(\r\n            level3.parentid,\r\n            'n/a'\r\n        ),\r\n        parent_id_4 = isnull(\r\n            level4.parentid,\r\n            'n/a'\r\n        ),\r\n        parent_id_5 = isnull(\r\n            level5.parentid,\r\n            'n/a'\r\n        ),\r\n        parent_id_6 = isnull(\r\n            level6.parentid,\r\n            'n/a'\r\n        ),\r\n        kpi_country_id = CONCAT(\r\n            kpi.kpiid,\r\n            ':',\r\n            kpi.country_code\r\n        )\r\n    FROM\r\n        kpi as kpi\r\n        left join kpi as level1\r\n        on kpi.parentid = level1.kpiid\r\n        AND kpi.country_code = level1.country_code\r\n        left join kpi as level2\r\n        on level1.parentid = level2.kpiid\r\n        AND kpi.country_code = level2.country_code\r\n        left join kpi as level3\r\n        on level2.parentid = level3.kpiid\r\n        AND kpi.country_code = level3.country_code\r\n        left join kpi as level4\r\n        on level3.parentid = level4.kpiid\r\n        AND kpi.country_code = level4.country_code\r\n        left join kpi as level5\r\n        on level4.parentid = level5.kpiid\r\n        AND kpi.country_code = level5.country_code\r\n        left join kpi as level6\r\n        on level5.parentid = level6.kpiid\r\n        AND kpi.country_code = level6.country_code\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__kpis"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__kpis"]}, "compiled_path": null}, "model.mattoni_1873.dim_organization_structures": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "dim_organization_structures", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\dim_organization_structures.sql", "original_file_path": "models\\marts\\core\\dim_organization_structures.sql", "unique_id": "model.mattoni_1873.dim_organization_structures", "fqn": ["mattoni_1873", "marts", "core", "dim_organization_structures"], "alias": "dim_organization_structures", "checksum": {"name": "sha256", "checksum": "43ff8f1c4330aecef8ad25217ad8d6e5a878a387e9577c34db4bc949212c061c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Organizational structure contains info about each route and corresponding sales representative on that route", "columns": {"organizational_structure_id": {"name": "organizational_structure_id", "description": "The numerical ID associated with the organizational structure key, generated using the dbt generate unique key macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_id": {"name": "staff_id", "description": "The numerical ID associated with the staff key, generated using the dbt generate unique key macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "structure_node_key": {"name": "structure_node_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "structure_node_level": {"name": "structure_node_level", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "structure_node_tree_hierarchy": {"name": "structure_node_tree_hierarchy", "description": "Complete node tree hierarchy in numbers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "structure_whole_node_tree": {"name": "structure_whole_node_tree", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_name_whole": {"name": "staff_name_whole", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_name_first": {"name": "staff_name_first", "description": "First name of sales representative", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_name_last": {"name": "staff_name_last", "description": "Last name of sales representative", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_position": {"name": "staff_position", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_comment": {"name": "staff_comment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_sap_code": {"name": "staff_sap_code", "description": "SAP external code of that structure", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_email": {"name": "staff_email", "description": "E-mail of sales representative", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_telephone": {"name": "staff_telephone", "description": "Phone of the sales representative", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.4228208, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"dim_organization_structures\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith org_structure as (\r\n    select * from {{ ref('stg_sfa__organization_structures_v') }}\r\n),\r\n\r\nfinal as (\r\n    select\r\n    \r\n        ----------  ids\r\n        org_structure.organizational_structure_id,\r\n        org_structure.structure_node_key,\r\n\r\n        org_structure.country_id,\r\n        org_structure.country_code,\r\n\r\n        ----------  strings\r\n        org_structure.structure_name,\r\n        org_structure.structure_telephone,\r\n        org_structure.structure_email,\r\n        org_structure.structure_name_detail,\r\n        org_structure.structure_whole_node_tree,\r\n        org_structure.structure_node_level,\r\n        org_structure.structure_node_tree_hierarchy\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n    \r\n        ----------  omited\r\n\r\n    from\r\n        org_structure\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__organization_structures_v"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__organization_structures_v"]}, "compiled_path": null}, "model.mattoni_1873.dim_outlets": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "dim_outlets", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\dim_outlets.sql", "original_file_path": "models\\marts\\core\\dim_outlets.sql", "unique_id": "model.mattoni_1873.dim_outlets", "fqn": ["mattoni_1873", "marts", "core", "dim_outlets"], "alias": "dim_outlets", "checksum": {"name": "sha256", "checksum": "cf2d1c1b2abeabdf8f167a40ab58c0099582ee37223ea1dded8dabd233cdcc07"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "outlet_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Outlets are all places that are visited/supplied by Mattoni 1873.", "columns": {"outlet_name": {"name": "outlet_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outlet_id": {"name": "outlet_id", "description": "Primary key of outlet. The numerical ID associated with the inaccessibility reason key, generated using the dbt generate unique key macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outlet_adress": {"name": "outlet_adress", "description": "Adress of of outlet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outlet_email": {"name": "outlet_email", "description": "Email to headrepresentative of outlet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outlet_sap_code": {"name": "outlet_sap_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outlet_director": {"name": "outlet_director", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outlet_trading_name": {"name": "outlet_trading_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outlet_delivery_adress": {"name": "outlet_delivery_adress", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sortiment_type": {"name": "sortiment_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_cycle": {"name": "visit_cycle", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_frequency": {"name": "visit_frequency", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_days": {"name": "visit_days", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pricelist_id": {"name": "pricelist_id", "description": "The numerical ID associated with the pricelist key, generated using the dbt generate unique key macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "additional_name": {"name": "additional_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer": {"name": "payer", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "structure_whole_node_tree": {"name": "structure_whole_node_tree", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "structure_name_detail": {"name": "structure_name_detail", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "incremental", "unique_key": "outlet_id"}, "created_at": 1704704696.4158187, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"dim_outlets\"", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='outlet_id'\r\n    )\r\n}}\r\n\r\n\r\nwith outlet as (\r\n    select * from {{ ref('stg_sfa__outlets') }}\r\n),\r\n\r\ncustom_field as (\r\n    select * from {{ ref('stg_sfa__outlet_custom_fields_v')}}\r\n),\r\n\r\norganizational_structure as (\r\n    select * from {{ ref('stg_sfa__organization_structures_v') }}\r\n),\r\n\r\nfinal as (\r\n    select\r\n        \r\n        ----------  ids\r\n        outlet.outlet_id,\r\n        outlet.organizational_structure_id,\r\n        custom_field.pricelist_id,\r\n\r\n        outlet.country_id,\r\n        outlet.country_code,\r\n\r\n        ----------  strings\r\n        outlet.outlet_name,\r\n        outlet.outlet_adress,\r\n        outlet.outlet_sap_code,\r\n        outlet.outlet_email,\r\n        outlet.outlet_director,\r\n        outlet.outlet_trading_name,\r\n        outlet.outlet_delivery_adress,\r\n        custom_field.sortiment_type,\r\n        custom_field.additional_name,\r\n        custom_field.payer,\r\n        organizational_structure.structure_whole_node_tree,\r\n        organizational_structure.structure_name_detail,\r\n\r\n        ----------  numerics\r\n        custom_field.visit_cycle,\r\n        custom_field.visit_frequency,\r\n        custom_field.visit_days,\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n        outlet.dlm\r\n    \r\n        ----------  omited\r\n\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n    from \r\n        outlet\r\n    left join\r\n        custom_field\r\n        on outlet.outlet_id = custom_field.outlet_id\r\n    left join \r\n        organizational_structure\r\n        on outlet.organizational_structure_id = organizational_structure.organizational_structure_id\r\n    \r\n    where\r\n\r\n    {% if is_incremental() %}\r\n        outlet.dlm >= (select max(this.dlm) from {{ this }} as this) \r\n        and\r\n\r\n    {% endif %}\r\n\r\n    outlet.dbt_valid_to >= cast('{{ var(\"future_proof_date\") }}' as datetime2)\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__outlets"], ["stg_sfa__outlet_custom_fields_v"], ["stg_sfa__organization_structures_v"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.mattoni_1873.stg_sfa__outlets", "model.mattoni_1873.stg_sfa__outlet_custom_fields_v", "model.mattoni_1873.stg_sfa__organization_structures_v"]}, "compiled_path": null}, "model.mattoni_1873.dim_products": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "dim_products", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\dim_products.sql", "original_file_path": "models\\marts\\core\\dim_products.sql", "unique_id": "model.mattoni_1873.dim_products", "fqn": ["mattoni_1873", "marts", "core", "dim_products"], "alias": "dim_products", "checksum": {"name": "sha256", "checksum": "ced49df5605f5817726e0be7d0ae70d2e7481cc8aad34f1a1253c8d752318fdf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension of products. Contains info about all SKUs that Mattoni sells/ships to its customers.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.4398236, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"dim_products\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\n\r\nwith product as (\r\n    select * from {{ ref('stg_sfa__products_v')}}\r\n),\r\n\r\nfinal as (\r\n    select\r\n                \r\n        ----------  ids\r\n        product_id,\r\n        product_type_id,\r\n\r\n        ----------  strings\r\n        product_name,\r\n        product_name_short,\r\n        product_sap_code,\r\n        unit_weight,\r\n\r\n        ----------  numerics\r\n        package_quantity,\r\n        ean_code,\r\n        status,\r\n\r\n        ----------  booleans\r\n        is_pos_material\r\n\r\n        ----------  timestamps\r\n    \r\n        ----------  omited\r\n\r\n\r\n    from\r\n        product\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__products_v"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__products_v"]}, "compiled_path": null}, "model.mattoni_1873.dim_questions": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "dim_questions", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\dim_questions.sql", "original_file_path": "models\\marts\\core\\dim_questions.sql", "unique_id": "model.mattoni_1873.dim_questions", "fqn": ["mattoni_1873", "marts", "core", "dim_questions"], "alias": "dim_questions", "checksum": {"name": "sha256", "checksum": "1b05c0fcff44ada96c9ae424dd5b56d4c7f4b0550bd8612b15b4e81d22357e88"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Provides all questions inluded in SFA application. They have hierarchy, but for ease of use they are in the single table. **Questionnaire->Section->Question**. ", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.39782, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"dim_questions\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith questionnaire_base as (\r\n    select * from {{ ref('stg_sfa__questionnaires') }}\r\n\r\n),\r\n\r\nquestionnaire as (\r\n\r\n   {{ get_latest_version(\r\n        \"questionnaire_base\", \r\n            [\r\n            'questionnaire_id',\r\n            'questionnaire_external_code',\r\n            'questionnaire_details',\r\n            'questionnaire_name',\r\n            'questionnaire_status'\r\n            ]\r\n        )\r\n    }}\r\n   \r\n),\r\n\r\nquestionnaire_section_base as (\r\n    select * from {{ ref('stg_sfa__questionnaire_sections') }}\r\n\r\n),\r\n\r\nquestionnaire_section as (\r\n\r\n   {{ get_latest_version(\r\n        \"questionnaire_section_base\", \r\n            [\r\n            'questionnaire_section_id',\r\n            'questionnaire_section_external_code',\r\n            'questionnaire_section_name',\r\n            'questionnaire_section_status',\r\n            'questionnaire_id'\r\n            ]\r\n        )\r\n    }}\r\n),        \r\n\r\nquestionnaire_item_base as (\r\n    select * from {{ ref('stg_sfa__questionnaire_items') }}\r\n\r\n),\r\n\r\nquestionnaire_item as (\r\n    {{ get_latest_version(\r\n        \"questionnaire_item_base\", \r\n            [\r\n            'questionnaire_question_id',\r\n            'questionnaire_section_id',\r\n            'country_id',\r\n            'country_code',\r\n            'questionnaire_question_external_code',\r\n            'questionnaire_question',\r\n            'questionnaire_question_status',\r\n            'questionnaire_question_sort_order',\r\n            'questionnaire_question_weight',\r\n            'questionnaire_question_is_read_only',\r\n            'questionnaire_question_is_distribution'\r\n            ]\r\n        )\r\n    }}\r\n),\r\n\r\nfinal as (\r\n    select\r\n        ----------  ids\r\n        questionnaire_item.questionnaire_question_id as question_id,\r\n        questionnaire_item.country_id as country_id,\r\n        questionnaire_item.country_code as country_code,\r\n\r\n        ----------  strings\r\n        questionnaire.questionnaire_external_code as questionnaire_external_code,\r\n        questionnaire_section.questionnaire_section_external_code as section_external_code,\r\n        questionnaire_item.questionnaire_question_external_code as question_external_code,\r\n\r\n        questionnaire.questionnaire_details as questionnaire_details,\r\n\r\n\r\n        case\r\n            when questionnaire.questionnaire_name like N'1 Druhotn\u00e9 vystavenie%'\r\n            then N'1 Druhotn\u00e9 vystavenie'\r\n            when questionnaire.questionnaire_name like N'2. Druhotn\u00e9 vystaven\u00ed pro TT%'\r\n            then N'2. Druhotn\u00e9 vystaven\u00ed pro TT'\r\n            when questionnaire.questionnaire_name like N'2. Druhotn\u00e9 vystaven\u00ed pro MT%'\r\n            then N'2. Druhotn\u00e9 vystaven\u00ed pro MT'\r\n            when questionnaire.questionnaire_name like '2. On-top%'\r\n            then '2. On-top'\r\n            when questionnaire.questionnaire_name like N'2. Pill\u00e9r form MT%'\r\n            then N'2. Pill\u00e9r form MT'\r\n            when questionnaire.questionnaire_name like N'2. Pill\u00e9r form SF%'\r\n            then N'2. Pill\u00e9r form SF'\r\n            when questionnaire.questionnaire_name like '6. On-Top MT%'\r\n            then '6. On-Top MT'\r\n            when questionnaire.questionnaire_name like '6. On-Top TT%'\r\n            then '6. On-Top TT'\r\n            else questionnaire.questionnaire_name\r\n            \r\n        end as questionnaire,\r\n\r\n        questionnaire_section.questionnaire_section_name as section,\r\n        questionnaire_item.questionnaire_question as question,\r\n\r\n        ----------  numerics\r\n        questionnaire.questionnaire_status as questionnaire_status,\r\n        questionnaire_section.questionnaire_section_status as section_status,\r\n        questionnaire_item.questionnaire_question_status as question_status,\r\n\r\n        questionnaire_item.questionnaire_question_sort_order as question_sort_order,\r\n        questionnaire_item.questionnaire_question_weight as weight,\r\n\r\n        ----------  booleans\r\n        questionnaire_item.questionnaire_question_is_read_only as is_read_only,\r\n        questionnaire_item.questionnaire_question_is_distribution as is_distibution\r\n\r\n        ----------  timestamps\r\n\r\n        ----------  omited\r\n\r\n\r\n    from questionnaire_item\r\n    \r\n    left join questionnaire_section\r\n    on questionnaire_item.questionnaire_section_id = questionnaire_section.questionnaire_section_id\r\n\r\n    left join questionnaire\r\n    on questionnaire_section.questionnaire_id = questionnaire.questionnaire_id\r\n)\r\n\r\n\r\n--  -- questionnaire_item as (\r\n--  --     select * from {{ ref('stg_sfa__questionnaire_items') }}\r\n--  -- \r\n--  -- ),\r\n--  -- \r\n--  final as (\r\n--      select \r\n--   \r\n--      from questionnaire\r\n--      \r\n--      left join questionnaire_section\r\n--      on questionnaire.questionnaire_id = questionnaire_section.questionnaire_id\r\n--  \r\n--  )\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__questionnaires"], ["stg_sfa__questionnaire_sections"], ["stg_sfa__questionnaire_items"], ["stg_sfa__questionnaire_items"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.mattoni_1873.get_latest_version"], "nodes": ["model.mattoni_1873.stg_sfa__questionnaires", "model.mattoni_1873.stg_sfa__questionnaire_sections", "model.mattoni_1873.stg_sfa__questionnaire_items", "model.mattoni_1873.stg_sfa__questionnaire_items"]}, "compiled_path": null}, "model.mattoni_1873.dim_staff": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "dim_staff", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\dim_staff.sql", "original_file_path": "models\\marts\\core\\dim_staff.sql", "unique_id": "model.mattoni_1873.dim_staff", "fqn": ["mattoni_1873", "marts", "core", "dim_staff"], "alias": "dim_staff", "checksum": {"name": "sha256", "checksum": "070c7a173ce9c95ab579dfa3138d7f5521caddcd61d6340106becf16bad8b3c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704694.9267883, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"dim_staff\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith staff as (\r\n    select * from {{ ref('stg_sfa__staff') }}\r\n    where\r\n    dbt_valid_to >= cast('{{ var(\"future_proof_date\") }}' as datetime2)\r\n),\r\n\r\nstaff_link_org_structure as (\r\n    select * from {{ ref('stg_sfa__staff_link_org_structures_v') }}\r\n),\r\n\r\norg_structure as (\r\n    select * from {{ ref('stg_sfa__organization_structures_v') }}\r\n),\r\n\r\nfinal as (\r\n    select\r\n\r\n\r\n        staff.staff_position,\r\n        staff.staff_comment,\r\n        staff.staff_sap_code,\r\n\r\n\r\n\r\n        ----------  ids\r\n        staff.staff_id,\r\n        staff.staff_key,\r\n\r\n        staff.country_id,\r\n        staff.country_code,\r\n\r\n        staff_link_org_structure.organizational_structure_id,\r\n\r\n        ----------  strings\r\n        staff.staff_name_whole,\r\n        staff.staff_name_first,\r\n        staff.staff_name_last,\r\n        staff.staff_email,\r\n        staff.staff_telephone        \r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n    \r\n        ----------  omited\r\n\r\n\r\n\r\n    from\r\n    staff\r\n    left join\r\n    staff_link_org_structure\r\n    on staff.staff_id = staff_link_org_structure.staff_id\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__staff"], ["stg_sfa__staff_link_org_structures_v"], ["stg_sfa__organization_structures_v"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__staff", "model.mattoni_1873.stg_sfa__staff_link_org_structures_v", "model.mattoni_1873.stg_sfa__organization_structures_v"]}, "compiled_path": null}, "model.mattoni_1873.dim_visit_gps": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "dim_visit_gps", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\dim_visit_gps.sql", "original_file_path": "models\\marts\\core\\dim_visit_gps.sql", "unique_id": "model.mattoni_1873.dim_visit_gps", "fqn": ["mattoni_1873", "marts", "core", "dim_visit_gps"], "alias": "dim_visit_gps", "checksum": {"name": "sha256", "checksum": "d48bee49ee3581b61039140199fa3df31c144d4881c39a68265ced328a4faa1f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"visit_id": {"name": "visit_id", "description": "Primary key, refers to visit id from fact_visit. Hashed to be valid connection according to standards", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_key": {"name": "visit_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_start_latitude": {"name": "visit_start_latitude", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_start_longtitude": {"name": "visit_start_longtitude", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_finish_latitude": {"name": "visit_finish_latitude", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_finish_longtitude": {"name": "visit_finish_longtitude", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_fake_gps": {"name": "is_fake_gps", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.4068189, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"dim_visit_gps\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith visit_gps as (\r\n    select * from {{ ref('stg_sfa__visit_gps') }}\r\n),\r\n\r\nfinal as (\r\n    select\r\n\r\n        ----------  ids\r\n        visit_id,\r\n        visit_key,\r\n        \r\n        country_id,\r\n        country_code,\r\n\r\n        ----------  strings\r\n\r\n        ----------  numerics\r\n        visit_start_latitude,\r\n        visit_start_longtitude,\r\n        visit_finish_latitude,\r\n        visit_finish_longtitude,\r\n\r\n        ----------  booleans\r\n        is_fake_gps,\r\n\r\n        ----------  timestamps\r\n        dlm\r\n        ----------  omited\r\n\r\n    from\r\n        visit_gps\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__visit_gps"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__visit_gps"]}, "compiled_path": null}, "model.mattoni_1873.fact_day_tracking": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "fact_day_tracking", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\fact_day_tracking.sql", "original_file_path": "models\\marts\\core\\fact_day_tracking.sql", "unique_id": "model.mattoni_1873.fact_day_tracking", "fqn": ["mattoni_1873", "marts", "core", "fact_day_tracking"], "alias": "fact_day_tracking", "checksum": {"name": "sha256", "checksum": "ff217fd6f15369e95a028dfa084776f2d728df1c286dc8c928a8425e40d90212"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704694.9377916, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"fact_day_tracking\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith mobile_user as (\r\n    select * from {{ ref('stg_sfa__mobile_users_v') }}\r\n),\r\n\r\nmobile_tracking as (\r\n    select * from {{ ref('stg_sfa__mobile_day_tracking_v') }}\r\n),\r\n\r\nfinal as (\r\n    select \r\n        mobile_user.organizational_structure_id,\r\n        mobile_user.mobile_user_id,\r\n        mobile_user.country_id,\r\n        mobile_user.country_code,\r\n        mobile_tracking.day_date,\r\n        mobile_tracking.day_start_time,\r\n        mobile_tracking.day_end_time,\r\n        mobile_tracking.start_latitude,\r\n        mobile_tracking.start_longitude,\r\n        mobile_tracking.end_latitude,\r\n        mobile_tracking.end_longitude\r\n\r\n\r\n    from mobile_user\r\n\r\n    left join mobile_tracking\r\n        on mobile_user.mobile_user_id = mobile_tracking.mobile_user_id\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__mobile_users_v"], ["stg_sfa__mobile_day_tracking_v"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__mobile_users_v", "model.mattoni_1873.stg_sfa__mobile_day_tracking_v"]}, "compiled_path": null}, "model.mattoni_1873.fact_images": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "fact_images", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\fact_images.sql", "original_file_path": "models\\marts\\core\\fact_images.sql", "unique_id": "model.mattoni_1873.fact_images", "fqn": ["mattoni_1873", "marts", "core", "fact_images"], "alias": "fact_images", "checksum": {"name": "sha256", "checksum": "3f87c539e71dc700706911cd2cd623032ae16d7febab179740e295b8291da8d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704694.9407923, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"fact_images\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith sfa_file as (\r\n    select * from {{ ref('stg_sfa__files_v') }}\r\n),\r\n\r\nresponse_image as (\r\n    select * from {{ ref('stg_sfa__questionnaire_response_images_v') }}\r\n),\r\n\r\nresponded_on_visit as (\r\n    select * from {{ ref('stg_sfa__questionnaire_responded_on_visit') }}\r\n),\r\n\r\nquestion as (\r\n    select * from {{ ref('dim_questions') }}\r\n),\r\n\r\nfinal as (\r\n    select \r\n\r\n\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"responded_on_visit.visit_id\", \"question.section\"]) }} as visit_question_id,\r\n        sfa_file.sfa_file_id,\r\n        responded_on_visit.visit_id,\r\n        responded_on_visit.visit_key,\r\n        response_image.question_id,\r\n\r\n        sfa_file.country_id,\r\n        sfa_file.country_code,\r\n\r\n        ----------  strings\r\n        sfa_file.sfa_file_name_unique,\r\n        sfa_file.content_file_key,\r\n        sfa_file.comment,\r\n\r\n        case\r\n            when sfa_file.country_code = 'CZ' then\r\n                concat('https://mattonicz.softservebs.com/swimages/r.im?t=tblOutletCardStartEndImages&v=', sfa_file.content_file_key)\r\n            when sfa_file.country_code = 'HU' then\r\n                concat('https://mattonihu.softservebs.com/swimages/r.im?t=tblOutletCardStartEndImages&v=', sfa_file.content_file_key)\r\n            when sfa_file.country_code = 'SK' then\r\n                concat('https://mattonisk.softservebs.com/swimages/r.im?t=tblOutletCardStartEndImages&v=', sfa_file.content_file_key)\r\n            else\r\n                NULL\r\n        end as image_url,\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n        sfa_file.is_edited\r\n\r\n        ----------  timestamps\r\n    \r\n        ----------  omited\r\n        \r\n\r\n    from \r\n    response_image\r\n    left join sfa_file\r\n    on response_image.sfa_file_id = sfa_file.sfa_file_id\r\n\r\n    left join responded_on_visit\r\n    on response_image.questionnaire_response_id = responded_on_visit.questionnaire_response_id\r\n\r\n    left join question\r\n    on response_image.question_id = question.question_id\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__files_v"], ["stg_sfa__questionnaire_response_images_v"], ["stg_sfa__questionnaire_responded_on_visit"], ["dim_questions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.mattoni_1873.stg_sfa__files_v", "model.mattoni_1873.stg_sfa__questionnaire_response_images_v", "model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit", "model.mattoni_1873.dim_questions"]}, "compiled_path": null}, "model.mattoni_1873.fact_kpi_actual": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "fact_kpi_actual", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\fact_kpi_actual.sql", "original_file_path": "models\\marts\\core\\fact_kpi_actual.sql", "unique_id": "model.mattoni_1873.fact_kpi_actual", "fqn": ["mattoni_1873", "marts", "core", "fact_kpi_actual"], "alias": "fact_kpi_actual", "checksum": {"name": "sha256", "checksum": "a3c3613edafea23f2a7208f2d10d1ac3e56b67b3c18bc250848677ac6c923604"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704694.962793, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"fact_kpi_actual\"", "raw_code": "with rankedkpi as (\r\n    select\r\n        country_code,\r\n        kpiid,\r\n        versionid,\r\n        olcard_id,\r\n        date,\r\n        convert(\r\n            int,\r\n            format(\r\n                dateadd(day, -1, dateadd(month, datediff(month, 0, date) + 1, 0)),\r\n                'yyyyMMdd'\r\n            )\r\n        ) as period,\r\n        ol_id,\r\n        orgstructureid,\r\n        fact,\r\n        dlm,\r\n        status,\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"KpiId\", \"OL_ID\"]) }} as kpi_outlet_id,\r\n        concat(kpiid, ':', country_code) as kpi_country_id,\r\n        rank() over (\r\n            partition by country_code, kpiid, ol_id, format(date, 'yyyyMM')\r\n            order by fact desc\r\n        ) as rankinmonth\r\n    from l01_stage.sfa.ps_kpiexecutionfact_v\r\n),\r\n\r\nfinal as (\r\n    select\r\n        country_code,\r\n        olcard_id as visit_id,\r\n        date as fact_date,\r\n        period,\r\n        ol_id as outlet_id, isnull (fact, 0) as fact_value,\r\n        dlm as last_modified,\r\n        status,\r\n        kpiid as kpi_id,\r\n        orgstructureid as org_id,\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"KpiId\", \"OL_ID\"]) }} as kpi_outlet_id,\r\n        concat(kpiid, ':', country_code) as kpi_country_id\r\n    from rankedkpi\r\n    where rankinmonth = 1\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": []}, "compiled_path": null}, "model.mattoni_1873.fact_kpi_plan": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "fact_kpi_plan", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\fact_kpi_plan.sql", "original_file_path": "models\\marts\\core\\fact_kpi_plan.sql", "unique_id": "model.mattoni_1873.fact_kpi_plan", "fqn": ["mattoni_1873", "marts", "core", "fact_kpi_plan"], "alias": "fact_kpi_plan", "checksum": {"name": "sha256", "checksum": "5df148aedcbf53923930f859195f6686d563250fa8d2401cd6691bddd38d8640"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "KPI PLAN 12.12.", "columns": {"country_code": {"name": "country_code", "description": "AHOKKKKKKKKJJ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period": {"name": "period", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_to": {"name": "date_to", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_value": {"name": "plan_value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outlet_id": {"name": "outlet_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_id": {"name": "kpi_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "kpi_outlet_id": {"name": "kpi_outlet_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dlm": {"name": "dlm", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.443825, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"fact_kpi_plan\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith kpi_plan as (\r\n    select * from {{ ref('stg_sfa__kpi_execution_plans_v') }}\r\n),\r\n\r\nfinal as (\r\n    select\r\n        country_code,\r\n        period = format(date_to, 'yyyyMMdd'), \r\n        date_to,\r\n        plan_value,\r\n        outlet_id,\r\n        kpi_id,\r\n        kpi_outlet_id,\r\n        dlm\r\n    from kpi_plan\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__kpi_execution_plans_v"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__kpi_execution_plans_v"]}, "compiled_path": null}, "model.mattoni_1873.fact_outlet_distributions": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "fact_outlet_distributions", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\fact_outlet_distributions.sql", "original_file_path": "models\\marts\\core\\fact_outlet_distributions.sql", "unique_id": "model.mattoni_1873.fact_outlet_distributions", "fqn": ["mattoni_1873", "marts", "core", "fact_outlet_distributions"], "alias": "fact_outlet_distributions", "checksum": {"name": "sha256", "checksum": "d934c57852ca103d21e38e6832ffd4899f2d0bfce11947dcc77fd41375e8f70d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "distribution_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "incremental", "unique_key": "distribution_id"}, "created_at": 1704704694.9757934, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"fact_outlet_distributions\"", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='distribution_id'\r\n    )\r\n}}\r\n\r\n\r\n\r\nwith outlet_distribution as (\r\n    select * from {{ ref('stg_sfa__outlet_distributions_v')}}\r\n),\r\n\r\nproduct as (\r\n    select * from {{ ref('stg_sfa__products_v')}}\r\n),\r\n\r\nvisit as (\r\n    select * from {{ ref('stg_sfa__visits')}}\r\n),\r\n\r\nfinal as (\r\n    select \r\n\r\n        ----------  ids\r\n        outlet_distribution.distribution_id,\r\n        outlet_distribution.visit_id,\r\n        outlet_distribution.product_id,\r\n        visit.outlet_id,\r\n        outlet_distribution.country_id,\r\n\r\n        ----------  strings\r\n        product.product_name,\r\n        product.product_sap_code,\r\n\r\n        ----------  numerics\r\n        outlet_distribution.price,\r\n\r\n        ----------  booleans\r\n        product.is_pos_material,\r\n        outlet_distribution.is_present,\r\n\r\n        ----------  timestamps\r\n        visit.visit_date\r\n    \r\n        ----------  omited\r\n\r\n    from\r\n        outlet_distribution\r\n    left outer join\r\n        product\r\n        on outlet_distribution.product_id = product.product_id\r\n    left outer join\r\n        visit\r\n        on outlet_distribution.visit_id = visit.visit_id\r\n\r\n    where\r\n\r\n    {% if is_incremental() %}\r\n        visit.visit_date >= (select max(this.visit_date)from {{ this }} as this) \r\n        and\r\n\r\n    {% endif %}\r\n\r\n    visit.dbt_valid_to >= cast('{{ var(\"future_proof_date\") }}' as datetime2)\r\n   \r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__outlet_distributions_v"], ["stg_sfa__products_v"], ["stg_sfa__visits"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.mattoni_1873.stg_sfa__outlet_distributions_v", "model.mattoni_1873.stg_sfa__products_v", "model.mattoni_1873.stg_sfa__visits"]}, "compiled_path": null}, "model.mattoni_1873.fact_questionnaire_responses": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "fact_questionnaire_responses", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\fact_questionnaire_responses.sql", "original_file_path": "models\\marts\\core\\fact_questionnaire_responses.sql", "unique_id": "model.mattoni_1873.fact_questionnaire_responses", "fqn": ["mattoni_1873", "marts", "core", "fact_questionnaire_responses"], "alias": "fact_questionnaire_responses", "checksum": {"name": "sha256", "checksum": "49f1cfb3054effe8faba74a3932f0b22f348ac5b3a842219315063b51b0416d6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Provides all answers and references to question asked, visit and data with according `_id`.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.3998206, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"fact_questionnaire_responses\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith responded_on_visit as (\r\n    select * from {{ ref('stg_sfa__questionnaire_responded_on_visit') }}\r\n),\r\n\r\nresponse_text as (\r\n    select * from {{ ref('stg_sfa__questionnaire_response_texts') }}\r\n),\r\n\r\nresponse_image as (\r\n    select * from {{ ref('stg_sfa__questionnaire_response_images') }}\r\n),\r\n\r\nfinal as (\r\n    select\r\n        responded_on_visit.visit_id,\r\n        responded_on_visit.visit_key,\r\n        responded_on_visit.questionnaire_response_id,\r\n        responded_on_visit.questionnaire_response_key,\r\n        responded_on_visit.country_id,\r\n\r\n        coalesce(response_text.question_id, response_image.question_id) as question_id,\r\n        response_text.questionnaire_answer,\r\n        response_text.questionnaire_answer_external_code,\r\n        response_text.questionnaire_answer_step,\r\n\r\n        response_image.sfa_file_id as image_id,\r\n        coalesce(\r\n            response_image.sfa_file_id,\r\n            {{ dbt_utils.generate_surrogate_key([\"questionnaire_answer_step\", \"response_text.question_id\", \"responded_on_visit.questionnaire_response_id\"]) }}\r\n            )  as sfa_file_id,\r\n        response_image.question_id as image_question_id\r\n    from\r\n    responded_on_visit\r\n    left join response_text\r\n    on responded_on_visit.questionnaire_response_id = response_text.questionnaire_response_id\r\n\r\n    left join response_image\r\n    on responded_on_visit.questionnaire_response_id = response_image.questionnaire_response_id\r\n    and (response_text.question_id = response_image.question_id OR (response_text.question_id is null and response_image.question_id is not null))\r\n)\r\n\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__questionnaire_responded_on_visit"], ["stg_sfa__questionnaire_response_texts"], ["stg_sfa__questionnaire_response_images"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit", "model.mattoni_1873.stg_sfa__questionnaire_response_texts", "model.mattoni_1873.stg_sfa__questionnaire_response_images"]}, "compiled_path": null}, "model.mattoni_1873.fact_questionnaire_v2": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "fact_questionnaire_v2", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\fact_questionnaire_v2.sql", "original_file_path": "models\\marts\\core\\fact_questionnaire_v2.sql", "unique_id": "model.mattoni_1873.fact_questionnaire_v2", "fqn": ["mattoni_1873", "marts", "core", "fact_questionnaire_v2"], "alias": "fact_questionnaire_v2", "checksum": {"name": "sha256", "checksum": "c9499dc0df22284778942efb09c4600f526e0a5c49566964e7aadffce3f062fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704694.992793, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"fact_questionnaire_v2\"", "raw_code": "with responded_on_visit as (\r\n    select * from {{ ref('stg_sfa__questionnaire_responded_on_visit') }}\r\n),\r\n\r\nresponse_text as (\r\n    select * from {{ ref('stg_sfa__questionnaire_response_texts') }}\r\n),\r\n\r\nresponse_image as (\r\n    select * from {{ ref('stg_sfa__questionnaire_response_images') }}\r\n),\r\n\r\nfinal as (\r\n    select\r\n\r\n        responded_on_visit.visit_id,\r\n        responded_on_visit.visit_key,\r\n        responded_on_visit.questionnaire_response_id,\r\n        responded_on_visit.questionnaire_response_key,\r\n        responded_on_visit.country_id,\r\n\r\n        response_image.question_id as question_id,\r\n        response_image.sfa_file_id as image_id,\r\n        response_image.question_id as image_question_id\r\n\r\n    from\r\n    responded_on_visit\r\n    left join response_image\r\n    on responded_on_visit.questionnaire_response_id = response_image.questionnaire_response_id\r\n\r\n)\r\n\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__questionnaire_responded_on_visit"], ["stg_sfa__questionnaire_response_texts"], ["stg_sfa__questionnaire_response_images"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit", "model.mattoni_1873.stg_sfa__questionnaire_response_texts", "model.mattoni_1873.stg_sfa__questionnaire_response_images"]}, "compiled_path": null}, "model.mattoni_1873.fact_visit": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "fact_visit", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\core\\fact_visit.sql", "original_file_path": "models\\marts\\core\\fact_visit.sql", "unique_id": "model.mattoni_1873.fact_visit", "fqn": ["mattoni_1873", "marts", "core", "fact_visit"], "alias": "fact_visit", "checksum": {"name": "sha256", "checksum": "d0cfb304ff6cddf626e43f341bea4bf6f6e2a99e590243ed93c124c2677ffa43"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "visit_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Main fact table in the making...", "columns": {"visit_id": {"name": "visit_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\core\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "incremental", "unique_key": "visit_id"}, "created_at": 1704704696.3988214, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"fact_visit\"", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='visit_id'\r\n    )\r\n}}\r\n\r\nwith visit as (\r\n    select * from {{ ref('stg_sfa__visits') }}\r\n),\r\n\r\nfinal as (\r\n    select \r\n        ----------  ids\r\n        visit_id,\r\n        visit_key,\r\n        country_id,\r\n        country_code,\r\n        inaccessibility_reason_id,\r\n        outlet_id,\r\n        route_id,\r\n        organizational_structure_id,\r\n        customer_id,\r\n\r\n        ----------  strings\r\n        visit_comment,\r\n\r\n        ----------  numerics\r\n        visit_start_distance,\r\n        visit_end_distance,\r\n        visit_duration_sec,\r\n\r\n        ----------  booleans\r\n        is_quick_order,\r\n\r\n        ----------  timestamps\r\n        visit_date,\r\n        visit_start_time,\r\n        visit_end_time\r\n    \r\n\r\n    from visit\r\n\r\n    where\r\n\r\n    {% if is_incremental() %}\r\n        visit_date >= (select max(this.visit_date)from {{ this }} as this) \r\n        and\r\n\r\n    {% endif %}\r\n\r\n    dbt_valid_to >= cast('{{ var(\"future_proof_date\") }}' as datetime2)\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__visits"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.mattoni_1873.stg_sfa__visits"]}, "compiled_path": null}, "model.mattoni_1873.distribution_report": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "distribution_report", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\sfa\\distribution_report.sql", "original_file_path": "models\\marts\\sfa\\distribution_report.sql", "unique_id": "model.mattoni_1873.distribution_report", "fqn": ["mattoni_1873", "marts", "sfa", "distribution_report"], "alias": "distribution_report", "checksum": {"name": "sha256", "checksum": "bf0b92ff0d433547bd3ae05a6da0abad74cbe054875e75d183d633deb00872ed"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704695.011797, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"distribution_report\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith outlet_distribution as (\r\n    select\r\n        visit_id,\r\n        visit_date,\r\n        outlet_id,\r\n        product_id,\r\n        country_id,\r\n        product_name,\r\n        is_pos_material,\r\n        product_sap_code,\r\n        is_present,\r\n        price,\r\n        rank() over (partition by (outlet_id + product_id) order by visit_date desc) as visit_rank\r\n    from\r\n        {{ ref('fact_outlet_distributions')}}\r\n    where\r\n        visit_date >= dateadd(month, -2, getdate())\r\n),\r\n\r\nfinal as(\r\n    select\r\n        outlet_id,\r\n        product_id,\r\n        case\r\n            when max(case when visit_rank <= 2 then is_present end) = '1' then 1\r\n            else 0\r\n        end as is_distributed\r\n    from\r\n        outlet_distribution\r\n    group by\r\n        outlet_id,\r\n        product_id\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["fact_outlet_distributions"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.fact_outlet_distributions"]}, "compiled_path": null}, "model.mattoni_1873.kpi_report": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "kpi_report", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\sfa\\kpi_report.sql", "original_file_path": "models\\marts\\sfa\\kpi_report.sql", "unique_id": "model.mattoni_1873.kpi_report", "fqn": ["mattoni_1873", "marts", "sfa", "kpi_report"], "alias": "kpi_report", "checksum": {"name": "sha256", "checksum": "4d344e06b42b6a8ef3df184401ae5b51038046711a0447cb1f5b54164a4a9616"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.0147898, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"kpi_report\"", "raw_code": "with\r\n    final as (\r\n        select\r\n            ex.country_code,\r\n            ex.visit_id,\r\n            ex.fact_date,\r\n            ex.period,\r\n            ex.outlet_id,\r\n            ex.fact_value,\r\n            pl.plan_value,\r\n            pl.outlet_id as plan_outlet_id,\r\n            pl.kpi_outlet_id as plan_kpi_outlet_id,\r\n            pl.period as plan_period,\r\n            ex.last_modified,\r\n            ex.status,\r\n            ex.kpi_id,\r\n            ex.org_id,\r\n            ex.kpi_outlet_id,\r\n            ex.kpi_country_id\r\n        from {{ ref(\"fact_kpi_actual\") }} as ex\r\n        full outer join\r\n            {{ ref(\"fact_kpi_plan\") }} as pl\r\n            on ex.kpi_outlet_id = pl.kpi_outlet_id\r\n            and ex.period = pl.period\r\n    )\r\n\r\nselect * from final", "language": "sql", "refs": [["fact_kpi_actual"], ["fact_kpi_plan"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.fact_kpi_actual", "model.mattoni_1873.fact_kpi_plan"]}, "compiled_path": null}, "model.mattoni_1873.questionnaire_report": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "questionnaire_report", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\sfa\\questionnaire_report.sql", "original_file_path": "models\\marts\\sfa\\questionnaire_report.sql", "unique_id": "model.mattoni_1873.questionnaire_report", "fqn": ["mattoni_1873", "marts", "sfa", "questionnaire_report"], "alias": "questionnaire_report", "checksum": {"name": "sha256", "checksum": "0eb7e5fa31c1194cd38b8a6aadfd9f769b23824e2c18c1f9acd0344e1ed2518d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Provides unpivoted questionnaire data. \nFor use in PBI, its best to filter questionnaire you are interested in by questionnaire name and then pivot data in PQ.", "columns": {"visit_id": {"name": "visit_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_question_id": {"name": "visit_question_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_answer": {"name": "questionnaire_answer", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_date": {"name": "visit_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_key": {"name": "visit_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire": {"name": "questionnaire", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "section": {"name": "section", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "question": {"name": "question", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\sfa\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704696.4838274, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"questionnaire_report\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\nwith response as (\r\n    select * from {{ ref('fact_questionnaire_responses') }}\r\n),\r\n\r\nquestion as (\r\n    select * from {{ ref('dim_questions') }}\r\n),\r\n\r\nvisit as (\r\n    select * from {{ ref('fact_visit') }}\r\n),\r\n\r\nfinal as (\r\n    select \r\n    response.visit_id,\r\n    {{ dbt_utils.generate_surrogate_key([\"response.visit_id\", \"question.section\"]) }} as visit_question_id,\r\n    response.questionnaire_answer,\r\n    visit.visit_date,\r\n    response.visit_key,\r\n    response.country_id,\r\n    response.questionnaire_answer_step,\r\n    question.questionnaire,\r\n    question.section,\r\n    question.question\r\n\r\n    from response\r\n    left join question\r\n    on response.question_id = question.question_id\r\n    left join visit\r\n    on response.visit_id = visit.visit_id\r\n\r\n    {% if is_incremental() %}\r\n\r\n        where visit_date > (select max(visit_date) from {{ this }})\r\n\r\n    {% endif %}\r\n\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["fact_questionnaire_responses"], ["dim_questions"], ["fact_visit"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.mattoni_1873.fact_questionnaire_responses", "model.mattoni_1873.dim_questions", "model.mattoni_1873.fact_visit"]}, "compiled_path": null}, "model.mattoni_1873.visit_report": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "visit_report", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\sfa\\visit_report.sql", "original_file_path": "models\\marts\\sfa\\visit_report.sql", "unique_id": "model.mattoni_1873.visit_report", "fqn": ["mattoni_1873", "marts", "sfa", "visit_report"], "alias": "visit_report", "checksum": {"name": "sha256", "checksum": "95778922b4814a4d5f9791ee65449b3df53758f8d5b53e59e9518b110d4b0fff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704704695.02779, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"visit_report\"", "raw_code": "{{\r\n    config(\r\n        materialized = 'table'\r\n    )\r\n}}\r\n\r\n\r\nwith visit as (\r\n    select * from {{ ref('stg_sfa__visits') }}\r\n\r\n),\r\n\r\nvisit_with_db_ids as (\r\n    select * from {{ ref('fact_visit') }}\r\n\r\n),\r\n\r\norganizational_structure as (\r\n    select * from {{ ref('stg_sfa__organization_structures') }}\r\n),\r\n\r\ninaccessibility_reason as (\r\n    select * from {{ ref('stg_sfa__visit_inaccessibility_reasons') }}\r\n\r\n),\r\n\r\noutlet as (\r\n    select * from {{ ref('stg_sfa__outlets') }}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        visit.country_id,\r\n        visit.visit_id,\r\n        visit.visit_key,\r\n        visit.route_id,\r\n        visit.inaccessibility_reason_id,\r\n        visit.visit_date,\r\n        -- organizational_structure.structure_whole_node_tree,\r\n        -- organizational_structure.structure_name_detail,\r\n        -- outlet.outlet_name,\r\n        -- outlet.outlet_sap_code,\r\n        visit.visit_start_time,\r\n        visit.visit_end_time,\r\n        visit.visit_start_distance,\r\n        visit.visit_end_distance,\r\n        visit.is_quick_order,\r\n        inaccessibility_reason.inaccessibility_reason\r\n        \r\n\r\n\r\n        -- visit_with_db_ids.organizational_structure_key as org_struct_key,      \r\n        -- visit.visit_key,\r\n        -- organizational_structure.dbt_scd_id as organizational_structure_key,\r\n        -- outlet.dbt_scd_id as outlet_key,\r\n        -- inaccessibility_reason.dbt_scd_id as inaccessibility_reason_key,\r\n        -- organizational_structure.structure_name,\r\n        -- visit.outlet_id,\r\n\r\n\r\n\r\n    from\r\n\r\n    visit\r\n    left join inaccessibility_reason\r\n    on visit.inaccessibility_reason_id = inaccessibility_reason.inaccessibility_reason_id\r\n    -- left join organizational_structure\r\n    -- on visit_with_db_ids.organizational_structure_key = organizational_structure.dbt_scd_id\r\n    \r\n    -- left join outlet\r\n    -- on visit_with_db_ids.outlet_key = outlet.dbt_scd_id\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sfa__visits"], ["fact_visit"], ["stg_sfa__organization_structures"], ["stg_sfa__visit_inaccessibility_reasons"], ["stg_sfa__outlets"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sfa__visits", "model.mattoni_1873.fact_visit", "model.mattoni_1873.stg_sfa__organization_structures", "model.mattoni_1873.stg_sfa__visit_inaccessibility_reasons", "model.mattoni_1873.stg_sfa__outlets"]}, "compiled_path": null}, "model.mattoni_1873.stg_dwh__currencies": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_dwh__currencies", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\dwh\\stg_dwh__currencies.sql", "original_file_path": "models\\staging\\dwh\\stg_dwh__currencies.sql", "unique_id": "model.mattoni_1873.stg_dwh__currencies", "fqn": ["mattoni_1873", "staging", "dwh", "stg_dwh__currencies"], "alias": "stg_dwh__currencies", "checksum": {"name": "sha256", "checksum": "618a76b4eb657e8d1ec13d53d50e9b1723aebb2077f7b5142dcfe468fb523595"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.038791, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_dwh__currencies\"", "raw_code": "with source as (\n      select * from {{ source('core', 'Currency_c') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"Currency_Id\") }} as currency_id,\n        {{ adapter.quote(\"Currency_Code\") }} as currency_code\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["core", "Currency_c"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.core.Currency_c"]}, "compiled_path": null}, "model.mattoni_1873.stg_dwh__fx_rates": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_dwh__fx_rates", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\dwh\\stg_dwh__fx_rates.sql", "original_file_path": "models\\staging\\dwh\\stg_dwh__fx_rates.sql", "unique_id": "model.mattoni_1873.stg_dwh__fx_rates", "fqn": ["mattoni_1873", "staging", "dwh", "stg_dwh__fx_rates"], "alias": "stg_dwh__fx_rates", "checksum": {"name": "sha256", "checksum": "98a531b5579fdbef7bcc28c64b507b4155daceac4fd77f6966eba3742d674537"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.0457907, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_dwh__fx_rates\"", "raw_code": "with source as (\n      select * from {{ source('core', 'FXR_AVG_vs_BGT_Main_Currency_v') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"Calendar_Id\") }} as calendar_id,\n        {{ adapter.quote(\"Currency_Id_Buy\") }} as from_currency_id,\n        {{ adapter.quote(\"Currency_Id_Sell\") }} as to_currency_id,\n        {{ adapter.quote(\"Rate\") }} as fx_rate\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["core", "FXR_AVG_vs_BGT_Main_Currency_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.core.FXR_AVG_vs_BGT_Main_Currency_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_dwh__dim_call_representatives": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_dwh__dim_call_representatives", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sales_datamart\\stg_dwh__dim_call_representatives.sql", "original_file_path": "models\\staging\\sales_datamart\\stg_dwh__dim_call_representatives.sql", "unique_id": "model.mattoni_1873.stg_dwh__dim_call_representatives", "fqn": ["mattoni_1873", "staging", "sales_datamart", "stg_dwh__dim_call_representatives"], "alias": "stg_dwh__dim_call_representatives", "checksum": {"name": "sha256", "checksum": "fe6c9ba0650e304561add8e0d3ce54b5c34f7d4a6b1d359a7df4afe1b22d38d0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.0517902, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_dwh__dim_call_representatives\"", "raw_code": "with source as (\r\n      select * from {{ source('pbi', 'dim_Call_Representative') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Call_Representative_Id\") }} as call_representative_id,\r\n        {{ adapter.quote(\"Call_Representative_Label\") }} as call_representative_label\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["pbi", "dim_Call_Representative"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.pbi.dim_Call_Representative"]}, "compiled_path": null}, "model.mattoni_1873.stg_dwh__dim_countries": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_dwh__dim_countries", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sales_datamart\\stg_dwh__dim_countries.sql", "original_file_path": "models\\staging\\sales_datamart\\stg_dwh__dim_countries.sql", "unique_id": "model.mattoni_1873.stg_dwh__dim_countries", "fqn": ["mattoni_1873", "staging", "sales_datamart", "stg_dwh__dim_countries"], "alias": "stg_dwh__dim_countries", "checksum": {"name": "sha256", "checksum": "ebbd3350ecf775277e54180d06bd3a1a48cc6b1eef03cd479d677dcac6fddd2e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Countries dimension contains info about each country and what currency used in each country.", "columns": {"country_id": {"name": "country_id", "description": "ID of country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to currency that is used in that country", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\staging\\sales_datamart\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.5018225, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_dwh__dim_countries\"", "raw_code": "with source as (\n      select * from {{ source('pbi', 'dim_Country') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"Country_Id\") }} as country_id,\n        {{ adapter.quote(\"Currency_Id\") }} as currency_id\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["pbi", "dim_Country"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.pbi.dim_Country"]}, "compiled_path": null}, "model.mattoni_1873.stg_dwh__dim_customers": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_dwh__dim_customers", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sales_datamart\\stg_dwh__dim_customers.sql", "original_file_path": "models\\staging\\sales_datamart\\stg_dwh__dim_customers.sql", "unique_id": "model.mattoni_1873.stg_dwh__dim_customers", "fqn": ["mattoni_1873", "staging", "sales_datamart", "stg_dwh__dim_customers"], "alias": "stg_dwh__dim_customers", "checksum": {"name": "sha256", "checksum": "e8db44231da148d38a5e77205799692edccd2561484cbc86ebc63b2a0795bab5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Customer table from L30_DM_Sales", "columns": {"customer_id": {"name": "customer_id", "description": "Customer Id generated as new every day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_segment_id": {"name": "customer_segment_id", "description": "Customer Segment Id - Foreign key to L30_DM_Sales.pbi.dim_Customer_Segment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "Country Id - Foreign key to L30_DM_Sales.pbi.dim_Country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_source_code": {"name": "customer_source_code", "description": "SAP Customer Code - unique only in combination with country_id", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\staging\\sales_datamart\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704706544.3372467, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_dwh__dim_customers\"", "raw_code": "with source as (\n      select * from {{ source('pbi', 'dim_Customer') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"Customer_Id\") }} as customer_id,\n        {{ adapter.quote(\"Customer_Segment_Id\") }} as customer_segment_id,\n        {{ adapter.quote(\"Country_Id\") }} as country_id,\n        {{ adapter.quote(\"Customer_Source_Code\") }} as customer_source_code\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["pbi", "dim_Customer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.pbi.dim_Customer", "source.mattoni_1873.pbi.dim_Customer"]}, "compiled_path": null}, "model.mattoni_1873.stg_dwh__dim_entities": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_dwh__dim_entities", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sales_datamart\\stg_dwh__dim_entities.sql", "original_file_path": "models\\staging\\sales_datamart\\stg_dwh__dim_entities.sql", "unique_id": "model.mattoni_1873.stg_dwh__dim_entities", "fqn": ["mattoni_1873", "staging", "sales_datamart", "stg_dwh__dim_entities"], "alias": "stg_dwh__dim_entities", "checksum": {"name": "sha256", "checksum": "396bb54784ddf917a1f4d21e88e31134f29a78b9ebbe90d3b7e5bb972a846ec1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Connects entities (eg. Mattoni, Schenkyralyi, Kjanz Milos..) together with countries and coresponding SAP codes that belong together. Entitity represent company from Mattoni 1873 portfolio, that can fulfill orders.", "columns": {"entity_id": {"name": "entity_id", "description": "ID of entity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "Reference to coutry dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_sap_code": {"name": "entity_sap_code", "description": "SAP code of entity used in KMV & PEPSI application", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\staging\\sales_datamart\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.5028305, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_dwh__dim_entities\"", "raw_code": "with source as (\n      select * from {{ source('pbi', 'dim_Entity') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"Entity_Id\") }} as entity_id,\n        {{ adapter.quote(\"Country_Id\") }} as country_id,\n        {{ adapter.quote(\"Entity_SAP_Code\") }} as entity_sap_code\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["pbi", "dim_Entity"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.pbi.dim_Entity"]}, "compiled_path": null}, "model.mattoni_1873.stg_dwh__dim_products": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_dwh__dim_products", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sales_datamart\\stg_dwh__dim_products.sql", "original_file_path": "models\\staging\\sales_datamart\\stg_dwh__dim_products.sql", "unique_id": "model.mattoni_1873.stg_dwh__dim_products", "fqn": ["mattoni_1873", "staging", "sales_datamart", "stg_dwh__dim_products"], "alias": "stg_dwh__dim_products", "checksum": {"name": "sha256", "checksum": "b6e5797cd7e5aa5791691ce36f70724098168c43999c387bbbdaeb67dfdb3946"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"product_id": {"name": "product_id", "description": "ID of product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku_code": {"name": "sku_code", "description": "SAP code of product", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\staging\\sales_datamart\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.4998298, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_dwh__dim_products\"", "raw_code": "with source as (\n      select * from {{ source('pbi', 'dim_Product') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"Product_Id\") }} as product_id,\n        {{ adapter.quote(\"SKU_Code\") }} as sku_code\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["pbi", "dim_Product"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.pbi.dim_Product"]}, "compiled_path": null}, "model.mattoni_1873.stg_sap__customers": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sap__customers", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sap\\stg_sap__customers.sql", "original_file_path": "models\\staging\\sap\\stg_sap__customers.sql", "unique_id": "model.mattoni_1873.stg_sap__customers", "fqn": ["mattoni_1873", "staging", "sap", "stg_sap__customers"], "alias": "stg_sap__customers", "checksum": {"name": "sha256", "checksum": "d71226864e932e13273ccab8615cdcc4a1a01c7e646b01b325840181cdecb825"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.0857923, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sap__customers\"", "raw_code": "with source as (\n      select * from {{ source('sap', 'customer_now_dvt_c_hv') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"customer_id\") }} as customer_id,\n        {{ adapter.quote(\"customer_code\") }} as customer_code\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sap", "customer_now_dvt_c_hv"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sap.customer_now_dvt_c_hv"]}, "compiled_path": null}, "model.mattoni_1873.stg_sap__documents_closed": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sap__documents_closed", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sap\\stg_sap__documents_closed.sql", "original_file_path": "models\\staging\\sap\\stg_sap__documents_closed.sql", "unique_id": "model.mattoni_1873.stg_sap__documents_closed", "fqn": ["mattoni_1873", "staging", "sap", "stg_sap__documents_closed"], "alias": "stg_sap__documents_closed", "checksum": {"name": "sha256", "checksum": "63f2a19fc4abbcd4f9c05d299f9745ded799f482749747ff440e00d33d6a13b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.0917916, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sap__documents_closed\"", "raw_code": "with source as (\n      select * from {{ source('sap', 'bad_with_cost_closed_v') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"document_id\") }},\n        {{ adapter.quote(\"document_type\") }},\n        {{ adapter.quote(\"document_number\") }},\n        {{ adapter.quote(\"document_item_number\") }},\n        {{ adapter.quote(\"country_id\") }},\n        {{ adapter.quote(\"document_date_id\") }},\n        {{ adapter.quote(\"sold_to_customer_id\") }},\n        {{ adapter.quote(\"sales_channel_level_1_code\") }},\n        {{ adapter.quote(\"sales_channel_level_1_name\") }},\n        {{ adapter.quote(\"sales_channel_level_2_code\") }},\n        {{ adapter.quote(\"sales_channel_level_2_name\") }},\n        {{ adapter.quote(\"sales_channel_level_3_code\") }},\n        {{ adapter.quote(\"sales_channel_level_3_name\") }},\n        {{ adapter.quote(\"sales_channel_level_4_code\") }},\n        {{ adapter.quote(\"sales_channel_level_4_name\") }},\n        {{ adapter.quote(\"ship_to_customer_id\") }} as shipto_customer_id,\n        {{ adapter.quote(\"bill_to_customer_id\") }} as soldto_customer_id,\n        {{ adapter.quote(\"payer_customer_id\") }} as payer_id,\n        {{ adapter.quote(\"sold_by_cr_id\") }} as call_representative_id,\n        {{ adapter.quote(\"sales_route_id\") }},\n        {{ adapter.quote(\"distributor_id\") }},\n        {{ adapter.quote(\"product_id\") }},\n        {{ adapter.quote(\"material_type_code\") }},\n        {{ adapter.quote(\"currency_id\") }},\n        {{ adapter.quote(\"order_type_id\") }},\n        {{ adapter.quote(\"distribution_channel\") }},\n        {{ adapter.quote(\"payment_term\") }},\n        {{ adapter.quote(\"order_reason_id\") }},\n        {{ adapter.quote(\"payment_term_category_id\") }},\n        {{ adapter.quote(\"rrc_quantity\") }} as rrc_quantity,\n        {{ adapter.quote(\"rrc_quantity_ord\") }},\n        {{ adapter.quote(\"rrc_quantity_del\") }},\n        {{ adapter.quote(\"rrc_quantity_inv\") }},\n        {{ adapter.quote(\"rc_quantity\") }},\n        {{ adapter.quote(\"rc_quantity_ord\") }},\n        {{ adapter.quote(\"rc_quantity_del\") }},\n        {{ adapter.quote(\"rc_quantity_inv\") }},\n        {{ adapter.quote(\"oz8_quantity\") }} as oz8_quantity,\n        {{ adapter.quote(\"oz8_quantity_ord\") }},\n        {{ adapter.quote(\"oz8_quantity_del\") }},\n        {{ adapter.quote(\"oz8_quantity_inv\") }},\n        {{ adapter.quote(\"liter_quantity\") }} as liter_quantity,\n        {{ adapter.quote(\"liter_quantity_ord\") }},\n        {{ adapter.quote(\"liter_quantity_del\") }},\n        {{ adapter.quote(\"liter_quantity_inv\") }},\n        {{ adapter.quote(\"piece_quantity\") }} as piece_quantity,\n        {{ adapter.quote(\"piece_quantity_ord\") }},\n        {{ adapter.quote(\"piece_quantity_del\") }},\n        {{ adapter.quote(\"piece_quantity_inv\") }},\n        {{ adapter.quote(\"net_value_lc\") }} as net_revenue_lc,\n        {{ adapter.quote(\"net_value_ord_lc\") }},\n        {{ adapter.quote(\"net_value_del_lc\") }},\n        {{ adapter.quote(\"net_value_inv_lc\") }},\n        {{ adapter.quote(\"discount_value_lc\") }},\n        {{ adapter.quote(\"discount_value_ord_lc\") }},\n        {{ adapter.quote(\"discount_value_del_lc\") }},\n        {{ adapter.quote(\"discount_value_inv_lc\") }},\n        {{ adapter.quote(\"net_value_usd\") }},\n        {{ adapter.quote(\"net_value_ord_usd\") }},\n        {{ adapter.quote(\"net_value_del_usd\") }},\n        {{ adapter.quote(\"net_value_inv_usd\") }},\n        {{ adapter.quote(\"dv_old\") }},\n        {{ adapter.quote(\"discount_value_usd\") }},\n        {{ adapter.quote(\"discount_value_ord_usd\") }},\n        {{ adapter.quote(\"discount_value_del_usd\") }},\n        {{ adapter.quote(\"discount_value_inv_usd\") }},\n        {{ adapter.quote(\"pvc_lc\") }},\n        {{ adapter.quote(\"pvc_ord_lc\") }},\n        {{ adapter.quote(\"pvc_del_lc\") }},\n        {{ adapter.quote(\"pvc_inv_lc\") }},\n        {{ adapter.quote(\"pvc_usd\") }},\n        {{ adapter.quote(\"pvc_ord_usd\") }},\n        {{ adapter.quote(\"pvc_del_usd\") }},\n        {{ adapter.quote(\"pvc_inv_usd\") }},\n        {{ adapter.quote(\"cda_lc\") }},\n        {{ adapter.quote(\"cda_ord_lc\") }},\n        {{ adapter.quote(\"cda_del_lc\") }},\n        {{ adapter.quote(\"cda_inv_lc\") }},\n        {{ adapter.quote(\"cda_usd\") }},\n        {{ adapter.quote(\"cda_ord_usd\") }},\n        {{ adapter.quote(\"cda_del_usd\") }},\n        {{ adapter.quote(\"cda_inv_usd\") }},\n        {{ adapter.quote(\"fmoh_lc\") }},\n        {{ adapter.quote(\"fmoh_ord_lc\") }},\n        {{ adapter.quote(\"fmoh_del_lc\") }},\n        {{ adapter.quote(\"fmoh_inv_lc\") }},\n        {{ adapter.quote(\"fmoh_usd\") }},\n        {{ adapter.quote(\"fmoh_ordusd\") }},\n        {{ adapter.quote(\"fmoh_del_usd\") }},\n        {{ adapter.quote(\"fmoh_inv_usd\") }},\n        {{ adapter.quote(\"pt_lc\") }},\n        {{ adapter.quote(\"pt_ord_lc\") }},\n        {{ adapter.quote(\"pt_del_lc\") }},\n        {{ adapter.quote(\"pt_inv_lc\") }},\n        {{ adapter.quote(\"pt_usd\") }},\n        {{ adapter.quote(\"pt_ord_usd\") }},\n        {{ adapter.quote(\"pt_del_usd\") }},\n        {{ adapter.quote(\"pt_inv_usd\") }},\n        {{ adapter.quote(\"mc_lc\") }},\n        {{ adapter.quote(\"mc_ord_lc\") }},\n        {{ adapter.quote(\"mc_del_lc\") }},\n        {{ adapter.quote(\"mc_inv_lc\") }},\n        {{ adapter.quote(\"mc_usd\") }},\n        {{ adapter.quote(\"mc_ord_usd\") }},\n        {{ adapter.quote(\"mc_del_usd\") }},\n        {{ adapter.quote(\"mc_inv_usd\") }},\n        {{ adapter.quote(\"gross_profit_lc\") }},\n        {{ adapter.quote(\"gross_profit_ord_lc\") }},\n        {{ adapter.quote(\"gross_profit_del_lc\") }},\n        {{ adapter.quote(\"gross_profit_inv_lc\") }},\n        {{ adapter.quote(\"gross_profit_usd\") }},\n        {{ adapter.quote(\"gross_profit_ord_usd\") }},\n        {{ adapter.quote(\"gross_profit_del_usd\") }},\n        {{ adapter.quote(\"gross_profit_inv_usd\") }},\n        {{ adapter.quote(\"cogs_lc\") }},\n        {{ adapter.quote(\"cogs_ord_lc\") }},\n        {{ adapter.quote(\"cogs_del_lc\") }},\n        {{ adapter.quote(\"cogs_inv_lc\") }},\n        {{ adapter.quote(\"cogs_usd\") }},\n        {{ adapter.quote(\"cogs_ord_usd\") }},\n        {{ adapter.quote(\"cogs_del_usd\") }},\n        {{ adapter.quote(\"cogs_inv_usd\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sap", "bad_with_cost_closed_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sap.bad_with_cost_closed_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sap__documents_closed_kmv": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sap__documents_closed_kmv", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sap\\stg_sap__documents_closed_kmv.sql", "original_file_path": "models\\staging\\sap\\stg_sap__documents_closed_kmv.sql", "unique_id": "model.mattoni_1873.stg_sap__documents_closed_kmv", "fqn": ["mattoni_1873", "staging", "sap", "stg_sap__documents_closed_kmv"], "alias": "stg_sap__documents_closed_kmv", "checksum": {"name": "sha256", "checksum": "85180e33a113fd26e20ae02a9dbf40b4a693400ad780f879e75ea9702856db75"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.1287932, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sap__documents_closed_kmv\"", "raw_code": "with source as (\n      select * from {{ source('kmv', 'consolidated_closed_v') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"document_id\") }},\n        {{ adapter.quote(\"country_id\") }},\n        {{ adapter.quote(\"company_code\") }},\n        {{ adapter.quote(\"document_type\") }},\n        {{ adapter.quote(\"document_number\") }},\n        {{ adapter.quote(\"document_item_number\") }},\n        {{ adapter.quote(\"order_number\") }},\n        {{ adapter.quote(\"order_item_number\") }},\n        {{ adapter.quote(\"document_date_id\") }},\n        {{ adapter.quote(\"soldto_customer_id\") }},\n        {{ adapter.quote(\"shipto_customer_id\") }},\n        {{ adapter.quote(\"payer_customer_id\") }},\n        {{ adapter.quote(\"product_id\") }},\n        {{ adapter.quote(\"order_type_id\") }},\n        {{ adapter.quote(\"rrc_quantity_ordered\") }},\n        {{ adapter.quote(\"rrc_quantity_delivered\") }},\n        {{ adapter.quote(\"rrc_quantity_invoiced\") }},\n        {{ adapter.quote(\"rrc_quantity_bad\") }} as rrc_quantity,\n        {{ adapter.quote(\"rc_quantity_ordered\") }},\n        {{ adapter.quote(\"rc_quantity_delivered\") }},\n        {{ adapter.quote(\"rc_quantity_invoiced\") }},\n        {{ adapter.quote(\"rc_quantity_bad\") }},\n        {{ adapter.quote(\"oz8_quantity_ordered\") }},\n        {{ adapter.quote(\"oz8_quantity_delivered\") }},\n        {{ adapter.quote(\"oz8_quantity_invoiced\") }},\n        {{ adapter.quote(\"oz8_quantity_bad\") }} as oz8_quantity,\n        {{ adapter.quote(\"liter_quantity_ordered\") }},\n        {{ adapter.quote(\"liter_quantity_delivered\") }},\n        {{ adapter.quote(\"liter_quantity_invoiced\") }},\n        {{ adapter.quote(\"liter_quantity_bad\") }} as liter_quantity,\n        {{ adapter.quote(\"piece_quantity_ordered\") }},\n        {{ adapter.quote(\"piece_quantity_delivered\") }},\n        {{ adapter.quote(\"piece_quantity_invoiced\") }},\n        {{ adapter.quote(\"piece_quantity_bad\") }} as piece_quantity,\n        {{ adapter.quote(\"kg_quantity_ordered\") }},\n        {{ adapter.quote(\"kg_quantity_delivered\") }},\n        {{ adapter.quote(\"kg_quantity_invoiced\") }},\n        {{ adapter.quote(\"kg_quantity_bad\") }},\n        {{ adapter.quote(\"net_value_local_ordered\") }},\n        {{ adapter.quote(\"net_value_local_delivered\") }},\n        {{ adapter.quote(\"net_value_local_invoiced\") }},\n        {{ adapter.quote(\"net_value_local_bad\") }} as net_revenue_lc,\n        {{ adapter.quote(\"net_value_czk_ordered\") }},\n        {{ adapter.quote(\"net_value_czk_delivered\") }},\n        {{ adapter.quote(\"net_value_czk_invoiced\") }},\n        {{ adapter.quote(\"net_value_czk_bad\") }} as net_revenue_czk,\n        {{ adapter.quote(\"gross_revenue_local\") }},\n        {{ adapter.quote(\"promo_discount_local\") }},\n        {{ adapter.quote(\"customer_discount_local\") }},\n        {{ adapter.quote(\"free_goods_discount_local\") }},\n        {{ adapter.quote(\"gross_revenue_czk\") }},\n        {{ adapter.quote(\"promo_discount_czk\") }},\n        {{ adapter.quote(\"customer_discount_czk\") }},\n        {{ adapter.quote(\"free_goods_discount_czk\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["kmv", "consolidated_closed_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.kmv.consolidated_closed_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sap__documents_open": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sap__documents_open", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sap\\stg_sap__documents_open.sql", "original_file_path": "models\\staging\\sap\\stg_sap__documents_open.sql", "unique_id": "model.mattoni_1873.stg_sap__documents_open", "fqn": ["mattoni_1873", "staging", "sap", "stg_sap__documents_open"], "alias": "stg_sap__documents_open", "checksum": {"name": "sha256", "checksum": "f984df59a6fbbc343045c64bb10229849024758550209117cb378cdfa1ad9368"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.1497996, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sap__documents_open\"", "raw_code": "with source as (\n      select * from {{ source('sap', 'bad_with_cost_open_v') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"document_id\") }},\n        {{ adapter.quote(\"document_type\") }},\n        {{ adapter.quote(\"document_number\") }},\n        {{ adapter.quote(\"document_item_number\") }},\n        {{ adapter.quote(\"country_id\") }},\n        {{ adapter.quote(\"document_date_id\") }},\n        {{ adapter.quote(\"sold_to_customer_id\") }} as soldto_customer_id,\n        {{ adapter.quote(\"sales_channel_level_1_code\") }},\n        {{ adapter.quote(\"sales_channel_level_1_name\") }},\n        {{ adapter.quote(\"sales_channel_level_2_code\") }},\n        {{ adapter.quote(\"sales_channel_level_2_name\") }},\n        {{ adapter.quote(\"sales_channel_level_3_code\") }},\n        {{ adapter.quote(\"sales_channel_level_3_name\") }},\n        {{ adapter.quote(\"sales_channel_level_4_code\") }},\n        {{ adapter.quote(\"sales_channel_level_4_name\") }},\n        {{ adapter.quote(\"ship_to_customer_id\") }} as shipto_customer_id,\n        {{ adapter.quote(\"bill_to_customer_id\") }},\n        {{ adapter.quote(\"payer_customer_id\") }} as payer_id,\n        {{ adapter.quote(\"sold_by_cr_id\") }} as call_representative_id,\n        {{ adapter.quote(\"sales_route_id\") }},\n        {{ adapter.quote(\"distributor_id\") }},\n        {{ adapter.quote(\"product_id\") }},\n        {{ adapter.quote(\"material_type_code\") }},\n        {{ adapter.quote(\"currency_id\") }},\n        {{ adapter.quote(\"order_type_id\") }},\n        {{ adapter.quote(\"distribution_channel\") }},\n        {{ adapter.quote(\"payment_term\") }},\n        {{ adapter.quote(\"order_reason_id\") }},\n        {{ adapter.quote(\"payment_term_category_id\") }},\n        {{ adapter.quote(\"rrc_quantity\") }},\n        {{ adapter.quote(\"rrc_quantity_ord\") }},\n        {{ adapter.quote(\"rrc_quantity_del\") }},\n        {{ adapter.quote(\"rrc_quantity_inv\") }},\n        {{ adapter.quote(\"rc_quantity\") }},\n        {{ adapter.quote(\"rc_quantity_ord\") }},\n        {{ adapter.quote(\"rc_quantity_del\") }},\n        {{ adapter.quote(\"rc_quantity_inv\") }},\n        {{ adapter.quote(\"oz8_quantity\") }},\n        {{ adapter.quote(\"oz8_quantity_ord\") }},\n        {{ adapter.quote(\"oz8_quantity_del\") }},\n        {{ adapter.quote(\"oz8_quantity_inv\") }},\n        {{ adapter.quote(\"liter_quantity\") }},\n        {{ adapter.quote(\"liter_quantity_ord\") }},\n        {{ adapter.quote(\"liter_quantity_del\") }},\n        {{ adapter.quote(\"liter_quantity_inv\") }},\n        {{ adapter.quote(\"piece_quantity\") }},\n        {{ adapter.quote(\"piece_quantity_ord\") }},\n        {{ adapter.quote(\"piece_quantity_del\") }},\n        {{ adapter.quote(\"piece_quantity_inv\") }},\n        {{ adapter.quote(\"net_value_lc\") }} as net_revenue_lc,\n        {{ adapter.quote(\"net_value_ord_lc\") }},\n        {{ adapter.quote(\"net_value_del_lc\") }},\n        {{ adapter.quote(\"net_value_inv_lc\") }},\n        {{ adapter.quote(\"discount_value_lc\") }},\n        {{ adapter.quote(\"discount_value_ord_lc\") }},\n        {{ adapter.quote(\"discount_value_del_lc\") }},\n        {{ adapter.quote(\"discount_value_inv_lc\") }},\n        {{ adapter.quote(\"net_value_usd\") }},\n        {{ adapter.quote(\"net_value_ord_usd\") }},\n        {{ adapter.quote(\"net_value_del_usd\") }},\n        {{ adapter.quote(\"net_value_inv_usd\") }},\n        {{ adapter.quote(\"discount_value_usd\") }},\n        {{ adapter.quote(\"discount_value_ord_usd\") }},\n        {{ adapter.quote(\"discount_value_del_usd\") }},\n        {{ adapter.quote(\"discount_value_inv_usd\") }},\n        {{ adapter.quote(\"pvc_lc\") }},\n        {{ adapter.quote(\"pvc_ord_lc\") }},\n        {{ adapter.quote(\"pvc_del_lc\") }},\n        {{ adapter.quote(\"pvc_inv_lc\") }},\n        {{ adapter.quote(\"pvc_usd\") }},\n        {{ adapter.quote(\"pvc_ord_usd\") }},\n        {{ adapter.quote(\"pvc_del_usd\") }},\n        {{ adapter.quote(\"pvc_inv_usd\") }},\n        {{ adapter.quote(\"cda_lc\") }},\n        {{ adapter.quote(\"cda_ord_lc\") }},\n        {{ adapter.quote(\"cda_del_lc\") }},\n        {{ adapter.quote(\"cda_inv_lc\") }},\n        {{ adapter.quote(\"cda_usd\") }},\n        {{ adapter.quote(\"cda_ord_usd\") }},\n        {{ adapter.quote(\"cda_del_usd\") }},\n        {{ adapter.quote(\"cda_inv_usd\") }},\n        {{ adapter.quote(\"fmoh_lc\") }},\n        {{ adapter.quote(\"fmoh_ord_lc\") }},\n        {{ adapter.quote(\"fmoh_del_lc\") }},\n        {{ adapter.quote(\"fmoh_inv_lc\") }},\n        {{ adapter.quote(\"fmoh_usd\") }},\n        {{ adapter.quote(\"fmoh_ordusd\") }},\n        {{ adapter.quote(\"fmoh_del_usd\") }},\n        {{ adapter.quote(\"fmoh_inv_usd\") }},\n        {{ adapter.quote(\"pt_lc\") }},\n        {{ adapter.quote(\"pt_ord_lc\") }},\n        {{ adapter.quote(\"pt_del_lc\") }},\n        {{ adapter.quote(\"pt_inv_lc\") }},\n        {{ adapter.quote(\"pt_usd\") }},\n        {{ adapter.quote(\"pt_ord_usd\") }},\n        {{ adapter.quote(\"pt_del_usd\") }},\n        {{ adapter.quote(\"pt_inv_usd\") }},\n        {{ adapter.quote(\"mc_lc\") }},\n        {{ adapter.quote(\"mc_ord_lc\") }},\n        {{ adapter.quote(\"mc_del_lc\") }},\n        {{ adapter.quote(\"mc_inv_lc\") }},\n        {{ adapter.quote(\"mc_usd\") }},\n        {{ adapter.quote(\"mc_ord_usd\") }},\n        {{ adapter.quote(\"mc_del_usd\") }},\n        {{ adapter.quote(\"mc_inv_usd\") }},\n        {{ adapter.quote(\"gross_profit_lc\") }},\n        {{ adapter.quote(\"gross_profit_ord_lc\") }},\n        {{ adapter.quote(\"gross_profit_del_lc\") }},\n        {{ adapter.quote(\"gross_profit_inv_lc\") }},\n        {{ adapter.quote(\"gross_profit_usd\") }},\n        {{ adapter.quote(\"gross_profit_ord_usd\") }},\n        {{ adapter.quote(\"gross_profit_del_usd\") }},\n        {{ adapter.quote(\"gross_profit_inv_usd\") }},\n        {{ adapter.quote(\"cogs_lc\") }},\n        {{ adapter.quote(\"cogs_ord_lc\") }},\n        {{ adapter.quote(\"cogs_del_lc\") }},\n        {{ adapter.quote(\"cogs_inv_lc\") }},\n        {{ adapter.quote(\"cogs_usd\") }},\n        {{ adapter.quote(\"cogs_ord_usd\") }},\n        {{ adapter.quote(\"cogs_del_usd\") }},\n        {{ adapter.quote(\"cogs_inv_usd\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sap", "bad_with_cost_open_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sap.bad_with_cost_open_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sap__documents_open_kmv": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sap__documents_open_kmv", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sap\\stg_sap__documents_open_kmv.sql", "original_file_path": "models\\staging\\sap\\stg_sap__documents_open_kmv.sql", "unique_id": "model.mattoni_1873.stg_sap__documents_open_kmv", "fqn": ["mattoni_1873", "staging", "sap", "stg_sap__documents_open_kmv"], "alias": "stg_sap__documents_open_kmv", "checksum": {"name": "sha256", "checksum": "b778a98af6da0dc58f2bdae6f3233dcaf68621170f47e0fdcfc79653a4fc2548"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.185793, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sap__documents_open_kmv\"", "raw_code": "with source as (\n      select * from {{ source('kmv', 'consolidated_open_v') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"country_id\") }},\n        {{ adapter.quote(\"company_code\") }},\n        {{ adapter.quote(\"document_type\") }},\n        {{ adapter.quote(\"document_number\") }},\n        {{ adapter.quote(\"document_item_number\") }},\n        {{ adapter.quote(\"order_number\") }},\n        {{ adapter.quote(\"order_item_number\") }},\n        {{ adapter.quote(\"document_date_id\") }},\n        {{ adapter.quote(\"soldto_customer_id\") }},\n        {{ adapter.quote(\"shipto_customer_id\") }},\n        {{ adapter.quote(\"payer_customer_id\") }},\n        {{ adapter.quote(\"product_id\") }},\n        {{ adapter.quote(\"order_type_id\") }},\n        {{ adapter.quote(\"rrc_quantity_ordered\") }},\n        {{ adapter.quote(\"rrc_quantity_delivered\") }},\n        {{ adapter.quote(\"rrc_quantity_invoiced\") }},\n        {{ adapter.quote(\"rrc_quantity_bad\") }} as rrc_quantity,\n        {{ adapter.quote(\"rc_quantity_ordered\") }},\n        {{ adapter.quote(\"rc_quantity_delivered\") }},\n        {{ adapter.quote(\"rc_quantity_invoiced\") }},\n        {{ adapter.quote(\"rc_quantity_bad\") }},\n        {{ adapter.quote(\"oz8_quantity_ordered\") }},\n        {{ adapter.quote(\"oz8_quantity_delivered\") }},\n        {{ adapter.quote(\"oz8_quantity_invoiced\") }},\n        {{ adapter.quote(\"oz8_quantity_bad\") }} as oz8_quantity,\n        {{ adapter.quote(\"liter_quantity_ordered\") }},\n        {{ adapter.quote(\"liter_quantity_delivered\") }},\n        {{ adapter.quote(\"liter_quantity_invoiced\") }},\n        {{ adapter.quote(\"liter_quantity_bad\") }} as liter_quantity,\n        {{ adapter.quote(\"piece_quantity_ordered\") }},\n        {{ adapter.quote(\"piece_quantity_delivered\") }},\n        {{ adapter.quote(\"piece_quantity_invoiced\") }},\n        {{ adapter.quote(\"piece_quantity_bad\") }} as piece_quantity,\n        {{ adapter.quote(\"kg_quantity_ordered\") }},\n        {{ adapter.quote(\"kg_quantity_delivered\") }},\n        {{ adapter.quote(\"kg_quantity_invoiced\") }},\n        {{ adapter.quote(\"kg_quantity_bad\") }},\n        {{ adapter.quote(\"net_value_local_ordered\") }},\n        {{ adapter.quote(\"net_value_local_delivered\") }},\n        {{ adapter.quote(\"net_value_local_invoiced\") }},\n        {{ adapter.quote(\"net_value_local_bad\") }} as net_revenue_lc,\n        {{ adapter.quote(\"net_value_czk_ordered\") }},\n        {{ adapter.quote(\"net_value_czk_delivered\") }},\n        {{ adapter.quote(\"net_value_czk_invoiced\") }},\n        {{ adapter.quote(\"net_value_czk_bad\") }} as net_revenue_czk,\n        {{ adapter.quote(\"gross_revenue_local\") }},\n        {{ adapter.quote(\"promo_discount_local\") }},\n        {{ adapter.quote(\"customer_discount_local\") }},\n        {{ adapter.quote(\"free_goods_discount_local\") }},\n        {{ adapter.quote(\"gross_revenue_czk\") }},\n        {{ adapter.quote(\"promo_discount_czk\") }},\n        {{ adapter.quote(\"customer_discount_czk\") }},\n        {{ adapter.quote(\"free_goods_discount_czk\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["kmv", "consolidated_open_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.kmv.consolidated_open_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sap__products": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sap__products", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\sap\\stg_sap__products.sql", "original_file_path": "models\\staging\\sap\\stg_sap__products.sql", "unique_id": "model.mattoni_1873.stg_sap__products", "fqn": ["mattoni_1873", "staging", "sap", "stg_sap__products"], "alias": "stg_sap__products", "checksum": {"name": "sha256", "checksum": "cb150325141f5a5df80235e9b8327f5adb2d131c4088763c0fe5f86eaafb5abc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.2048063, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sap__products\"", "raw_code": "with source as (\n      select * from {{ source('sap', 'product_now_dvt_c_hv') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"Product_ID\") }} as product_id,\n        {{ adapter.quote(\"Local_SKU_ID\") }} as local_sku_id,\n        {{ adapter.quote(\"Material_Type_Code\") }} as material_type_code\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sap", "product_now_dvt_c_hv"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sap.product_now_dvt_c_hv"]}, "compiled_path": null}, "model.mattoni_1873.base_sfa_cust_VisitKPIDataMart": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "base_sfa_cust_VisitKPIDataMart", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\base_sfa_cust_VisitKPIDataMart.sql", "original_file_path": "models\\staging\\soft_serve\\base_sfa_cust_VisitKPIDataMart.sql", "unique_id": "model.mattoni_1873.base_sfa_cust_VisitKPIDataMart", "fqn": ["mattoni_1873", "staging", "soft_serve", "base_sfa_cust_VisitKPIDataMart"], "alias": "base_sfa_cust_VisitKPIDataMart", "checksum": {"name": "sha256", "checksum": "8b6db3550d749d386ea49b5417c740f6c43e193bf9e6c5b5c99f674280646b46"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.211827, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"base_sfa_cust_VisitKPIDataMart\"", "raw_code": "with source as (\n      select * from {{ source('sfa', 'cust_VisitKPIDataMart') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"Country_Code\") }},\n        {{ adapter.quote(\"VisitDate\") }},\n        {{ adapter.quote(\"Month\") }},\n        {{ adapter.quote(\"IsLastVisit\") }},\n        {{ adapter.quote(\"ClosedMonth\") }},\n        {{ adapter.quote(\"OlCard_id\") }},\n        {{ adapter.quote(\"Country\") }},\n        {{ adapter.quote(\"City\") }},\n        {{ adapter.quote(\"Area\") }},\n        {{ adapter.quote(\"Supervisor\") }},\n        {{ adapter.quote(\"ASM\") }},\n        {{ adapter.quote(\"SR\") }},\n        {{ adapter.quote(\"OutletGroups\") }},\n        {{ adapter.quote(\"OutletTypes\") }},\n        {{ adapter.quote(\"OLSubTypeName\") }},\n        {{ adapter.quote(\"Network\") }},\n        {{ adapter.quote(\"AtrernativeOutletClassification\") }},\n        {{ adapter.quote(\"OL_id\") }},\n        {{ adapter.quote(\"OLCode\") }},\n        {{ adapter.quote(\"OLName\") }},\n        {{ adapter.quote(\"OLAddress\") }},\n        {{ adapter.quote(\"Payer\") }},\n        {{ adapter.quote(\"VisitCycle\") }},\n        {{ adapter.quote(\"VisitDays\") }},\n        {{ adapter.quote(\"VisitFrequency\") }},\n        {{ adapter.quote(\"SGR\") }},\n        {{ adapter.quote(\"PricelistID\") }},\n        {{ adapter.quote(\"Listing\") }},\n        {{ adapter.quote(\"delinst\") }},\n        {{ adapter.quote(\"AdditionalName\") }},\n        {{ adapter.quote(\"VersionId\") }},\n        {{ adapter.quote(\"KpiId\") }},\n        {{ adapter.quote(\"KName0\") }},\n        {{ adapter.quote(\"KName1\") }},\n        {{ adapter.quote(\"KName2\") }},\n        {{ adapter.quote(\"KName3\") }},\n        {{ adapter.quote(\"KName4\") }},\n        {{ adapter.quote(\"KName5\") }},\n        {{ adapter.quote(\"KPISPTT\") }},\n        {{ adapter.quote(\"KPICalcStatus\") }},\n        {{ adapter.quote(\"KTypeName\") }},\n        {{ adapter.quote(\"KLevel\") }},\n        {{ adapter.quote(\"KExternalCode\") }},\n        {{ adapter.quote(\"KNameALL\") }},\n        {{ adapter.quote(\"Actual\") }},\n        {{ adapter.quote(\"TargetKPI\") }},\n        {{ adapter.quote(\"TargetSP\") }},\n        {{ adapter.quote(\"MonthID\") }},\n        {{ adapter.quote(\"Cust_id\") }},\n        {{ adapter.quote(\"Valid_From\") }},\n        {{ adapter.quote(\"Valid_To\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "cust_VisitKPIDataMart"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.cust_VisitKPIDataMart"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__customers": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__customers", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__customers.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__customers.sql", "unique_id": "model.mattoni_1873.stg_sfa__customers", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__customers"], "alias": "stg_sfa__customers", "checksum": {"name": "sha256", "checksum": "e5f8803c271ac874bdf12b27391104c3abc80a568e98482c28238b7e07643b0c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for customers. Data are imported from SAP, OPEX team is responsible to provide SoftServe with correct data.", "columns": {"converted": {"name": "converted", "description": "ahoj jak se mas", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "The numerical ID associated with the country code, generated using the macro.dddd", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The numerical ID associated with the country code, generated using the macro.", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "customer_trading_name": {"name": "customer_trading_name", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "zkpo": {"name": "zkpo", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "mfo": {"name": "mfo", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "bank_account": {"name": "bank_account", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "tax_number": {"name": "tax_number", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "vat_number": {"name": "vat_number", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "customer_adress": {"name": "customer_adress", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "customer_trading_address": {"name": "customer_trading_address", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "bank_name": {"name": "bank_name", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "director": {"name": "director", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "city_id": {"name": "city_id", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "email": {"name": "email", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "phone": {"name": "phone", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "trading_phone": {"name": "trading_phone", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "comments": {"name": "comments", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "distributor_id": {"name": "distributor_id", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "passwd": {"name": "passwd", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "dlm": {"name": "dlm", "description": "", "meta": {}, "data_type": "datetime2", "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "payformminvalue": {"name": "payformminvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "payformcurrentvalue": {"name": "payformcurrentvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "payformmaxvalue": {"name": "payformmaxvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "discountminvalue": {"name": "discountminvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "discountcurrentvalue": {"name": "discountcurrentvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "discountmaxvalue": {"name": "discountmaxvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "lastsyncdatetime": {"name": "lastsyncdatetime", "description": "", "meta": {}, "data_type": "datetime2", "quote": null, "tags": []}, "renewsupervisorpasswd": {"name": "renewsupervisorpasswd", "description": "", "meta": {}, "data_type": "bit", "quote": null, "tags": []}, "renewadminpasswd": {"name": "renewadminpasswd", "description": "", "meta": {}, "data_type": "bit", "quote": null, "tags": []}, "ulm": {"name": "ulm", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktopoutletminvalue": {"name": "desktopoutletminvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktopoutletcurrentvalue": {"name": "desktopoutletcurrentvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktopoutletmaxvalue": {"name": "desktopoutletmaxvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktoporderminvalue": {"name": "desktoporderminvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktopordercurrentvalue": {"name": "desktopordercurrentvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktopordermaxvalue": {"name": "desktopordermaxvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "merchminvalue": {"name": "merchminvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "merchmaxvalue": {"name": "merchmaxvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktoprouteminvalue": {"name": "desktoprouteminvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktoproutecurrentvalue": {"name": "desktoproutecurrentvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktoproutemaxvalue": {"name": "desktoproutemaxvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktopvisitminvalue": {"name": "desktopvisitminvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktopvisitcurrentvalue": {"name": "desktopvisitcurrentvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "desktopvisitmaxvalue": {"name": "desktopvisitmaxvalue", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "checkschedule": {"name": "checkschedule", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "area_id": {"name": "area_id", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "ieconfiguration": {"name": "ieconfiguration", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "salesorgcode": {"name": "salesorgcode", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "isblocked": {"name": "isblocked", "description": "", "meta": {}, "data_type": "bit", "quote": null, "tags": []}, "syncinprogress": {"name": "syncinprogress", "description": "", "meta": {}, "data_type": "bit", "quote": null, "tags": []}, "outlet_id": {"name": "outlet_id", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "geography_id": {"name": "geography_id", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "is2levelmode": {"name": "is2levelmode", "description": "", "meta": {}, "data_type": "bit", "quote": null, "tags": []}, "warehousebaseid": {"name": "warehousebaseid", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "externalcode": {"name": "externalcode", "description": "", "meta": {}, "data_type": "varchar", "quote": null, "tags": []}, "database_id": {"name": "database_id", "description": "", "meta": {}, "data_type": "bigint", "quote": null, "tags": []}, "isinexchangeequipment": {"name": "isinexchangeequipment", "description": "", "meta": {}, "data_type": "bit", "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": "date", "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": "date", "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\staging\\soft_serve\\_staging_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "view"}, "created_at": 1704704696.590824, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__customers\"", "raw_code": "{{ config(\r\n    materialized = \"view\"\r\n) }}\r\n\r\nwith source as (\r\n\r\n    select * from {{ ref('sfa__customers_snapshot') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n\r\n\r\n        {{ adapter.quote(\"ULM\") }} as ulm,\r\n        {{ adapter.quote(\"DesktopOutletMinValue\") }},\r\n        {{ adapter.quote(\"DesktopOutletCurrentValue\") }},\r\n        {{ adapter.quote(\"DesktopOutletMaxValue\") }},\r\n        {{ adapter.quote(\"DesktopOrderMinValue\") }},\r\n        {{ adapter.quote(\"DesktopOrderCurrentValue\") }},\r\n        {{ adapter.quote(\"DesktopOrderMaxValue\") }},\r\n\r\n\r\n\r\n        ----------  ids\r\n        {{ adapter.quote(\"dbt_scd_id\") }} as dbt_scd_id,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Cust_Id\"]) }} as customer_id,\r\n        {{ adapter.quote(\"Cust_Id\") }} as customer_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OL_id\"]) }} as outlet_id,\r\n        {{ adapter.quote(\"OL_id\") }} as outlet_key,\r\n\r\n        {{ adapter.quote(\"DB_ID\") }} as database_key,\r\n        {{ adapter.quote(\"GeographyID\") }} as geography_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n        \r\n        {{ adapter.quote(\"City_Id\") }} as city_id,\r\n        {{ adapter.quote(\"Distr_id\") }} as distributor_id,\r\n        {{ adapter.quote(\"Area_ID\") }} as area_id,\r\n        {{ adapter.quote(\"WarehouseBaseID\") }} as warehouse_base_id,\r\n\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"Cust_NAME\") }} as customer_name,\r\n        {{ adapter.quote(\"Cust_TradingName\") }} as customer_trading_name,\r\n        {{ adapter.quote(\"ZKPO\") }} as zkpo,\r\n        {{ adapter.quote(\"MFO\") }} as mfo,\r\n        {{ adapter.quote(\"Bank_Account\") }} as bank_account,\r\n        {{ adapter.quote(\"TAX_Number\") }} as tax_number,\r\n        {{ adapter.quote(\"VAT_Number\") }} as vat_number,\r\n        {{ adapter.quote(\"Cust_Address\") }} as customer_adress,\r\n        {{ adapter.quote(\"Cust_TradingAddress\") }} as customer_trading_address,\r\n        {{ adapter.quote(\"Bank_Name\") }} as bank_name,\r\n        {{ adapter.quote(\"DIRECTOR\") }} as director,\r\n        {{ adapter.quote(\"Email\") }} as email,\r\n        {{ adapter.quote(\"Phone\") }} as phone,\r\n        {{ adapter.quote(\"TradingPhone\") }} as trading_phone,\r\n        {{ adapter.quote(\"Comments\") }} as comments,\r\n        {{ adapter.quote(\"Passwd\") }} as password,\r\n        {{ adapter.quote(\"ExternalCode\") }} as customer_external_code,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Status\") }} as status,\r\n        cast({{ adapter.quote(\"PayFormMinValue\") }} as INT) as payform_min_value,\r\n        cast({{ adapter.quote(\"PayFormCurrentValue\") }} as INT) as payform_current_value,\r\n        cast({{ adapter.quote(\"PayFormMaxValue\") }} as INT) as payform_max_value,\r\n        cast({{ adapter.quote(\"DiscountMinValue\") }} as INT) as discount_min_value,\r\n        cast({{ adapter.quote(\"DiscountCurrentValue\") }} as INT) as discount_current_value,\r\n        cast({{ adapter.quote(\"DiscountMaxValue\") }} as INT) as discount_max_value,\r\n        \r\n        ----------  booleans\r\n        {{ adapter.quote(\"IsBlocked\") }},\r\n        {{ adapter.quote(\"Is2LevelMode\") }},\r\n        {{ adapter.quote(\"IsInExchangeEquipment\") }},\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"dbt_valid_from\") }} as dbt_valid_from,\r\n        coalesce(\"dbt_valid_to\", cast('{{ var(\"future_proof_date\") }}' as datetime)) as dbt_valid_to\r\n        \r\n        ----------  omited\r\n        -- {{ adapter.quote(\"MerchMinValue\") }},\r\n        -- {{ adapter.quote(\"MerchMaxValue\") }},\r\n        -- {{ adapter.quote(\"DesktopRouteMinValue\") }},\r\n        -- {{ adapter.quote(\"DesktopRouteCurrentValue\") }},\r\n        -- {{ adapter.quote(\"DesktopRouteMaxValue\") }},\r\n        -- {{ adapter.quote(\"DesktopVisitMinValue\") }},\r\n        -- {{ adapter.quote(\"DesktopVisitCurrentValue\") }},\r\n        -- {{ adapter.quote(\"DesktopVisitMaxValue\") }},\r\n        -- {{ adapter.quote(\"CheckSchedule\") }},\r\n        -- {{ adapter.quote(\"IEConfiguration\") }},\r\n        -- {{ adapter.quote(\"SalesOrgCode\") }},\r\n        -- {{ adapter.quote(\"SyncInProgress\") }},\r\n        -- {{ adapter.quote(\"LastSyncDateTime\") }},\r\n        -- {{ adapter.quote(\"RenewSupervisorPasswd\") }},\r\n        -- {{ adapter.quote(\"RenewAdminPasswd\") }},\r\n\r\n\r\n\r\n    from\r\n        source\r\n)\r\n\r\nselect *\r\nfrom\r\n    renamed", "language": "sql", "refs": [["sfa__customers_snapshot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["snapshot.mattoni_1873.sfa__customers_snapshot"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__distributions_datamart": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__distributions_datamart", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__distributions_datamart.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__distributions_datamart.sql", "unique_id": "model.mattoni_1873.stg_sfa__distributions_datamart", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__distributions_datamart"], "alias": "stg_sfa__distributions_datamart", "checksum": {"name": "sha256", "checksum": "37a50dd306ac96d6da2b9e6b083b72dd91cbb8c5ff661a997e94309cfc3738b7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "ephemeral"}, "created_at": 1704704695.2557948, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\r\n\r\nwith source as (\r\n    select * from {{ source('sfa', 'cust_DistributionsDataMart') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"ASMMonthOfVisit\") }},\r\n        {{ adapter.quote(\"ASMYearOfVisit\") }},\r\n        {{ adapter.quote(\"Ol_id\") }},\r\n        {{ adapter.quote(\"OutletExternalCode\") }},\r\n        {{ adapter.quote(\"OutletName\") }},\r\n        {{ adapter.quote(\"OutletAddress\") }},\r\n        {{ adapter.quote(\"ASMOlCardId\") }},\r\n        {{ adapter.quote(\"SROlCardId\") }},\r\n        {{ adapter.quote(\"ASMName\") }},\r\n        {{ adapter.quote(\"ASMStaffName\") }},\r\n        {{ adapter.quote(\"SRName\") }},\r\n        {{ adapter.quote(\"SRStaffName\") }},\r\n        {{ adapter.quote(\"ASMDate\") }},\r\n        {{ adapter.quote(\"SRDate\") }},\r\n        {{ adapter.quote(\"ASMLastVisitInMonth\") }},\r\n        {{ adapter.quote(\"ASMQuestionExternalCode\") }},\r\n        {{ adapter.quote(\"SRQuestionExternalCode\") }},\r\n        {{ adapter.quote(\"ProdGroupName\") }},\r\n        {{ adapter.quote(\"ProductCode\") }},\r\n        {{ adapter.quote(\"ProductName\") }},\r\n        {{ adapter.quote(\"ASMCheck\") }},\r\n        {{ adapter.quote(\"ASMOOSReason\") }},\r\n        {{ adapter.quote(\"SRCheck\") }},\r\n        {{ adapter.quote(\"SROOSReason\") }},\r\n        {{ adapter.quote(\"MonthID\") }},\r\n        {{ adapter.quote(\"ASMCustId\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "cust_DistributionsDataMart"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.cust_DistributionsDataMart"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__document_reports": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__document_reports", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__document_reports.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__document_reports.sql", "unique_id": "model.mattoni_1873.stg_sfa__document_reports", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__document_reports"], "alias": "stg_sfa__document_reports", "checksum": {"name": "sha256", "checksum": "bd17ae534c12eb7e1d54511676ac549862895a420bb83cd2480e1926802b79c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.2687948, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__document_reports\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_HReports') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"HReport_ID\") }},\r\n        {{ adapter.quote(\"Name\") }},\r\n        {{ adapter.quote(\"Comment\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"ULM\") }},\r\n        {{ adapter.quote(\"IsPrintForm\") }},\r\n        {{ adapter.quote(\"IsRecalculated\") }},\r\n        {{ adapter.quote(\"Segment\") }},\r\n        {{ adapter.quote(\"ReportType\") }},\r\n        {{ adapter.quote(\"StoredProcText\") }},\r\n        {{ adapter.quote(\"DepthCalculation\") }},\r\n        {{ adapter.quote(\"ReportScript\") }},\r\n        {{ adapter.quote(\"IsWebPage\") }},\r\n        {{ adapter.quote(\"Url\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_HReports"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_HReports"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__document_rules": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__document_rules", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__document_rules.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__document_rules.sql", "unique_id": "model.mattoni_1873.stg_sfa__document_rules", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__document_rules"], "alias": "stg_sfa__document_rules", "checksum": {"name": "sha256", "checksum": "e23f799bb97bb5634d42c79da2c38e5390d5ac46a18b1c289fef6a470a875331"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.277798, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__document_rules\"", "raw_code": "with source as (\r\n    select *\r\n    from\r\n        {{ source('sfa', 'dbo_DocumentRules') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ adapter.quote(\"Rule_ID\") }} as questionnare_rule_id,\r\n        {{ adapter.quote(\"Object_ID\") }} as questionnaire_question_id,\r\n        {{ adapter.quote(\"StandartDocumentItemId\") }} as questionnaire_question_standard_id,\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"RuleName\") }},\r\n        {{ adapter.quote(\"ExternalCode\") }},\r\n        {{ adapter.quote(\"CycleItem\") }},\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Type\") }},\r\n        {{ adapter.quote(\"RuleOperation\") }},\r\n        {{ adapter.quote(\"SortOrder\") }},\r\n        {{ adapter.quote(\"ULM\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"AllowBreakCycle\") }},\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n        ----------  omited\r\n\r\n    from\r\n        source\r\n)\r\n\r\nselect *\r\nfrom\r\n    renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_DocumentRules"]], "metrics": [], "depends_on": {"macros": ["macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_DocumentRules"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__document_rule_parameters": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__document_rule_parameters", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__document_rule_parameters.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__document_rule_parameters.sql", "unique_id": "model.mattoni_1873.stg_sfa__document_rule_parameters", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__document_rule_parameters"], "alias": "stg_sfa__document_rule_parameters", "checksum": {"name": "sha256", "checksum": "c49043ebc447f659499b299d0f39ee0c99cdcd641724743cc6b17331c351a64d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.2877953, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__document_rule_parameters\"", "raw_code": "with source as (\r\n    select * from {{ source('sfa', 'dbo_DocumentRuleParams') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"Param_ID\") }},\r\n        {{ adapter.quote(\"Rule_ID\") }},\r\n        {{ adapter.quote(\"ValidationItem_ID\") }},\r\n        {{ adapter.quote(\"TableRow_ID\") }},\r\n        {{ adapter.quote(\"DisplayValue\") }},\r\n        {{ adapter.quote(\"ValidationValue\") }},\r\n        {{ adapter.quote(\"ReplacementType\") }},\r\n        {{ adapter.quote(\"SortOrder\") }},\r\n        {{ adapter.quote(\"ParamOperation\") }},\r\n        {{ adapter.quote(\"ULM\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"DisplayValueId\") }},\r\n        {{ adapter.quote(\"ValidationValueId\") }},\r\n\r\n\r\n        ----------  ids\r\n\r\n        ----------  strings\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n        \r\n        ----------  omited\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_DocumentRuleParams"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_DocumentRuleParams"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__files": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__files", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__files.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__files.sql", "unique_id": "model.mattoni_1873.stg_sfa__files", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__files"], "alias": "stg_sfa__files", "checksum": {"name": "sha256", "checksum": "cb21b618c92fecf5b915ec011237d0d8d71d8e716a078cddc6e6c5415553d53c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.2978075, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__files\"", "raw_code": "with\r\nsource as (select * from {{ source(\"sfa\", \"dbo_ContentFiles\") }}),\r\n\r\nrenamed as (\r\n    select\r\n    \r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"ContentFileID\"]) }} as content_file_id,\r\n        {{ adapter.quote(\"ContentFileID\") }} as content_file_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"ContentID\"]) }} as sfa_file_id,\r\n        {{ adapter.quote(\"ContentID\") }} as sfa_file_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"ContentFileName\") }} as sfa_file_name,\r\n        {{ adapter.quote(\"ContentFileUniqueName\") }} as sfa_file_name_unique ,\r\n        {{ adapter.quote(\"Hash\") }} as hash,\r\n        {{ adapter.quote(\"Comment\") }} as comment,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Status\") }} as status,\r\n        {{ adapter.quote(\"Size\") }} as size,\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"IsEdited\") }} as is_edited,\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"CreationDate\") }},\r\n        {{ adapter.quote(\"ReceivingResultDate\") }},\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"Activity_ID\") }},\r\n        -- {{ adapter.quote(\"PhotoTypeId\") }},\r\n        -- {{ adapter.quote(\"ULM\") }},\r\n\r\n    from source\r\n)\r\n\r\nselect *\r\nfrom renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ContentFiles"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_ContentFiles"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__kpis": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__kpis", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__kpis.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__kpis.sql", "unique_id": "model.mattoni_1873.stg_sfa__kpis", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__kpis"], "alias": "stg_sfa__kpis", "checksum": {"name": "sha256", "checksum": "49100d1ddfc8e1f00434fc1d0b579549245006e8e2485189774e6be319367fa0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.3097963, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__kpis\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'ps_KPI') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n        {{ adapter.quote(\"KpiId\") }} as kpiid,\r\n        {{ adapter.quote(\"ParentId\") }} as parentid,\r\n        {{ adapter.quote(\"ActivityType\") }} as activitytype,\r\n        {{ adapter.quote(\"Name\") }} as name,\r\n        {{ adapter.quote(\"Comment\") }} as comment,\r\n        {{ adapter.quote(\"ExternalCode\") }} as externalcode,\r\n        {{ adapter.quote(\"Type\") }} as type,\r\n        {{ adapter.quote(\"Level\") }} as level,\r\n        {{ adapter.quote(\"Status\") }} as status,\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"ULM\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "ps_KPI"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.ps_KPI"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__kpi_execution_facts": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__kpi_execution_facts", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__kpi_execution_facts.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__kpi_execution_facts.sql", "unique_id": "model.mattoni_1873.stg_sfa__kpi_execution_facts", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__kpi_execution_facts"], "alias": "stg_sfa__kpi_execution_facts", "checksum": {"name": "sha256", "checksum": "64d5f90d9e0c79205460e3a988e2b197688562b2cd19af7ba16d0aec4c872f7a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.3207963, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__kpi_execution_facts\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'ps_KPIExecutionFact') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"KpiId\") }},\r\n        {{ adapter.quote(\"VersionId\") }},\r\n        {{ adapter.quote(\"OlCard_id\") }},\r\n        {{ adapter.quote(\"Date\") }},\r\n        {{ adapter.quote(\"OL_ID\") }},\r\n        {{ adapter.quote(\"OrgStructureID\") }},\r\n        {{ adapter.quote(\"Fact\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "ps_KPIExecutionFact"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.ps_KPIExecutionFact"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__kpi_execution_plans": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__kpi_execution_plans", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__kpi_execution_plans.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__kpi_execution_plans.sql", "unique_id": "model.mattoni_1873.stg_sfa__kpi_execution_plans", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__kpi_execution_plans"], "alias": "stg_sfa__kpi_execution_plans", "checksum": {"name": "sha256", "checksum": "53784d12b171a2515e121cfc80fc9d7d6109799bd2c9075427e1acb47bf991e6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.3287976, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__kpi_execution_plans\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'ps_KPIExecutionPlan') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"KpiId\") }},\r\n        {{ adapter.quote(\"DateFrom\") }},\r\n        {{ adapter.quote(\"DateTo\") }},\r\n        {{ adapter.quote(\"OL_ID\") }},\r\n        {{ adapter.quote(\"PlanValue\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "ps_KPIExecutionPlan"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.ps_KPIExecutionPlan"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__networks": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__networks", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__networks.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__networks.sql", "unique_id": "model.mattoni_1873.stg_sfa__networks", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__networks"], "alias": "stg_sfa__networks", "checksum": {"name": "sha256", "checksum": "11dae4949ee5495753d5d69ef1dbbae646902889cd0d16c521c92d14d8184ecf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.3367968, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__networks\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_Networks') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"Network_id\") }},\r\n        {{ adapter.quote(\"Network_Name\") }},\r\n        {{ adapter.quote(\"Notes\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"ULM\") }},\r\n        {{ adapter.quote(\"AppliesToAllCities\") }},\r\n        {{ adapter.quote(\"NetworkType_ID\") }},\r\n        {{ adapter.quote(\"NetworkCode\") }},\r\n        {{ adapter.quote(\"JuridicalName\") }},\r\n        {{ adapter.quote(\"JuridicalAddress\") }},\r\n        {{ adapter.quote(\"GrdCode\") }},\r\n        {{ adapter.quote(\"NetworkLevel\") }},\r\n        {{ adapter.quote(\"OrgStructureID\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Networks"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_Networks"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__ordersdatamart": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__ordersdatamart", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__ordersdatamart.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__ordersdatamart.sql", "unique_id": "model.mattoni_1873.stg_sfa__ordersdatamart", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__ordersdatamart"], "alias": "stg_sfa__ordersdatamart", "checksum": {"name": "sha256", "checksum": "e7581d63aba5f398a7ba66ae84546866c0d610ff99ea8ee235fbb154168ba424"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.3467972, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__ordersdatamart\"", "raw_code": "with source as (\r\n    select * from {{ source('sfa', 'cust_OrdersDataMart') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"Cust_id\") }},\r\n        {{ adapter.quote(\"MonthID\") }},\r\n        {{ adapter.quote(\"OS_NameL1\") }},\r\n        {{ adapter.quote(\"OS_CodeL1\") }},\r\n        {{ adapter.quote(\"OS_NameL2\") }},\r\n        {{ adapter.quote(\"OS_CodeL2\") }},\r\n        {{ adapter.quote(\"OS_NameL3\") }},\r\n        {{ adapter.quote(\"OS_CodeL3\") }},\r\n        {{ adapter.quote(\"OS_NameL4\") }},\r\n        {{ adapter.quote(\"OS_CodeL4\") }},\r\n        {{ adapter.quote(\"OS_NameL5\") }},\r\n        {{ adapter.quote(\"OS_CodeL5\") }},\r\n        {{ adapter.quote(\"OS_NameL6\") }},\r\n        {{ adapter.quote(\"OS_CodeL6\") }},\r\n        {{ adapter.quote(\"OS_NameL7\") }},\r\n        {{ adapter.quote(\"OS_CodeL7\") }},\r\n        {{ adapter.quote(\"OS_SRStaff\") }},\r\n        {{ adapter.quote(\"Outlet_SWCode\") }},\r\n        {{ adapter.quote(\"Outlet_ERPCode\") }},\r\n        {{ adapter.quote(\"Outlet_LegalName\") }},\r\n        {{ adapter.quote(\"Outlet_LegalAddress\") }},\r\n        {{ adapter.quote(\"Outlet_ActualName\") }},\r\n        {{ adapter.quote(\"Outlet_DeliveryAddress\") }},\r\n        {{ adapter.quote(\"Outlet_Status\") }},\r\n        {{ adapter.quote(\"Outlet_Network\") }},\r\n        {{ adapter.quote(\"Outlet_SubType\") }},\r\n        {{ adapter.quote(\"Outlet_Type\") }},\r\n        {{ adapter.quote(\"Outlet_Group\") }},\r\n        {{ adapter.quote(\"Product_Category\") }},\r\n        {{ adapter.quote(\"Product_Type\") }},\r\n        {{ adapter.quote(\"Product_SWCode\") }},\r\n        {{ adapter.quote(\"Product_Code\") }},\r\n        {{ adapter.quote(\"Product_Name\") }},\r\n        {{ adapter.quote(\"Product_ShortName\") }},\r\n        {{ adapter.quote(\"Product_BarCode\") }},\r\n        {{ adapter.quote(\"Product_PackageQty\") }},\r\n        {{ adapter.quote(\"Visit_Number\") }},\r\n        {{ adapter.quote(\"Visit_Date\") }},\r\n        {{ adapter.quote(\"OrderIntoTheVisit\") }},\r\n        {{ adapter.quote(\"Order_Date\") }},\r\n        {{ adapter.quote(\"Order_Number\") }},\r\n        {{ adapter.quote(\"PaymentForm\") }},\r\n        {{ adapter.quote(\"PaymentFormType\") }},\r\n        {{ adapter.quote(\"Order_Type\") }},\r\n        {{ adapter.quote(\"Warehouse_Code\") }},\r\n        {{ adapter.quote(\"Warehouse_ShortName\") }},\r\n        {{ adapter.quote(\"Warehouse_Name\") }},\r\n        {{ adapter.quote(\"Warehouse_Type\") }},\r\n        {{ adapter.quote(\"Order_Qty\") }},\r\n        {{ adapter.quote(\"Order_PriceWithoutVAT\") }},\r\n        {{ adapter.quote(\"Order_PriceWithVAT\") }},\r\n        {{ adapter.quote(\"Order_SumWithoutVAT\") }},\r\n        {{ adapter.quote(\"Order_SumWithVAT\") }},\r\n        {{ adapter.quote(\"Order_PackageQty\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "cust_OrdersDataMart"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.cust_OrdersDataMart"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__organizationalstructuregeographylinksactive": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__organizationalstructuregeographylinksactive", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__organizationalstructuregeographylinksactive.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__organizationalstructuregeographylinksactive.sql", "unique_id": "model.mattoni_1873.stg_sfa__organizationalstructuregeographylinksactive", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__organizationalstructuregeographylinksactive"], "alias": "stg_sfa__organizationalstructuregeographylinksactive", "checksum": {"name": "sha256", "checksum": "8b445f22e26ad0fd74ccc1e404bb88655882f80d430fe66804eb7cca0b8308ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.3657982, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__organizationalstructuregeographylinksactive\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_OrganizationalStructureGeographyLinksActive') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"OrgStructureID\") }},\r\n        {{ adapter.quote(\"GeographyID\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OrganizationalStructureGeographyLinksActive"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_OrganizationalStructureGeographyLinksActive"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__organization_structures": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__organization_structures", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__organization_structures.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__organization_structures.sql", "unique_id": "model.mattoni_1873.stg_sfa__organization_structures", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__organization_structures"], "alias": "stg_sfa__organization_structures", "checksum": {"name": "sha256", "checksum": "597c495a6a3d69038322798ca57baaf06aabe379fed706acfb1d20f75cff84d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.3728008, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__organization_structures\"", "raw_code": "with source as (\r\n      select * from {{ ref('sfa__organization_structures_snapshot') }}\r\n),\r\nrenamed as (\r\n    select\r\n\r\n\r\n\r\n        ----------  ids\r\n        {{ adapter.quote(\"dbt_scd_id\") }} as dbt_scd_id,\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OrgStructureID\"]) }} as _id,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OrgStructureID\"]) }} as organizational_structure_id,\r\n        {{ adapter.quote(\"OrgStructureID\") }} as organizational_structure_key,\r\n        \r\n        {{ adapter.quote(\"ParentID\") }} as parent_structure_id,\r\n        {{ adapter.quote(\"NodeId\") }} as structure_node_id,\r\n        {{ adapter.quote(\"Level\") }}  as structure_node_level,\r\n        {{ adapter.quote(\"TreeNodeHierarchy\") }},\r\n        {{ adapter.quote(\"OrgStructureCode\") }},\r\n        {{ adapter.quote(\"OrgStructureOldId\") }},\r\n        {{ adapter.quote(\"AT_ID\") }},\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"Name\") }} as structure_name,\r\n        {{ adapter.quote(\"PhoneNumber\") }} as structure_telephone,\r\n        {{ adapter.quote(\"Email\") }} as structure_email,\r\n        {{ adapter.quote(\"FullName\") }} as structure_whole_node_tree,\r\n        {{ adapter.quote(\"AdditionalFullTextSearch\") }} as structure_name_detail,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"BusinessRole\") }},\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"ResetPassword\") }},\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"dbt_valid_from\") }} as dbt_valid_from,\r\n        coalesce(\"dbt_valid_to\", cast('{{ var(\"future_proof_date\") }}' as datetime)) as dbt_valid_to\r\n        \r\n        ----------  omited\r\n        -- {{ adapter.quote(\"ULM\") }},\r\n        -- {{ adapter.quote(\"TaxCode\") }},\r\n        -- {{ adapter.quote(\"StaffType_id\") }},\r\n        -- {{ adapter.quote(\"OfficeID\") }},\r\n        -- {{ adapter.quote(\"ChildOrgStructureToUserTypeLinkRequired\") }},\r\n        -- {{ adapter.quote(\"ChildOrgStructureToActivityTypeLinkRequired\") }},\r\n\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [["sfa__organization_structures_snapshot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["snapshot.mattoni_1873.sfa__organization_structures_snapshot"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__outlets": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__outlets", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__outlets.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__outlets.sql", "unique_id": "model.mattoni_1873.stg_sfa__outlets", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__outlets"], "alias": "stg_sfa__outlets", "checksum": {"name": "sha256", "checksum": "043d013f7587a7f68c840cb444e00e5de199fd1b4ca9e270df138d11e7a88f9e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.3887992, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__outlets\"", "raw_code": "with source as (\r\n      select * from {{ ref('sfa__outlets_snapshot') }}\r\n),\r\nrenamed as (\r\n    select\r\n\r\n\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"OLCode\") }},\r\n        {{ adapter.quote(\"Proximity\") }},\r\n        {{ adapter.quote(\"Location\") }},\r\n        {{ adapter.quote(\"VisitFrequency\") }},\r\n        {{ adapter.quote(\"BankCode\") }},\r\n        {{ adapter.quote(\"BankName\") }},\r\n        {{ adapter.quote(\"BankAddress\") }},\r\n        {{ adapter.quote(\"ContractNumber\") }},\r\n        {{ adapter.quote(\"ContractDate\") }},\r\n        {{ adapter.quote(\"CreationDate\") }},\r\n        {{ adapter.quote(\"Cust_id\") }},\r\n        {{ adapter.quote(\"CPCode\") }},\r\n        {{ adapter.quote(\"DC_Allow\") }},\r\n        {{ adapter.quote(\"OLDistributionCentre\") }},\r\n        {{ adapter.quote(\"OlDistributionShare\") }},\r\n        {{ adapter.quote(\"DC_Delivery\") }},\r\n        {{ adapter.quote(\"DC_Payer\") }},\r\n        {{ adapter.quote(\"LicenseUsage\") }},\r\n        {{ adapter.quote(\"Appartments\") }},\r\n        {{ adapter.quote(\"KLADR_ID\") }},\r\n        {{ adapter.quote(\"ContractDateFinish\") }},\r\n        {{ adapter.quote(\"ULM\") }},\r\n        {{ adapter.quote(\"SaleType\") }},\r\n        {{ adapter.quote(\"DeliveryDelay\") }},\r\n        {{ adapter.quote(\"DeactivateDate\") }},\r\n        {{ adapter.quote(\"InactivationCandidate\") }},\r\n        {{ adapter.quote(\"PrevOL_Code\") }},\r\n        {{ adapter.quote(\"PostalCode\") }},\r\n        {{ adapter.quote(\"KOATUU\") }},\r\n        {{ adapter.quote(\"OutletParsingAddressId\") }},\r\n        {{ adapter.quote(\"ReturnOrderOnly\") }},\r\n\r\n        ----------  ids\r\n        \r\n        {{ adapter.quote(\"dbt_scd_id\") }} as dbt_scd_id,\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OL_id\"]) }} as outlet_id,\r\n        {{ adapter.quote(\"OL_id\") }} as outlet_key,\r\n        {{ adapter.quote(\"OLSubType_id\") }} as outlet_subtype_id,\r\n        {{ adapter.quote(\"Area_id\") }} as area_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Network_ID\") }} as network_id,\r\n        {{ adapter.quote(\"VisitRate_id\") }} as visit_rate_id,\r\n        {{ adapter.quote(\"Owner_id\") }} as owner_id,\r\n        {{ adapter.quote(\"ParentComp_id\") }} as parent_company_id,\r\n        {{ adapter.quote(\"Cust_id\") }} as customer_id,\r\n        {{ adapter.quote(\"AT_ID\") }} as at_id,\r\n        {{ adapter.quote(\"OrgStructureID\") }} as organizational_structure_id,\r\n        {{ adapter.quote(\"GeographyID\") }} as geography_id,\r\n        {{ adapter.quote(\"ExternalFormat_ID\") }} as external_format_id,\r\n        {{ adapter.quote(\"HouseId\") }} as house_id,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"OLName\") }} as outlet_name,\r\n        {{ adapter.quote(\"OLTradingName\") }} as outlet_trading_name,\r\n        {{ adapter.quote(\"OLDirector\") }} as outlet_director,\r\n        {{ adapter.quote(\"OLAddress\") }} as outlet_adress,\r\n        {{ adapter.quote(\"OLDeliveryAddress\") }} as outlet_delivery_adress,\r\n        {{ adapter.quote(\"OLTelephone\") }} as outlet_telephone,\r\n        {{ adapter.quote(\"OLFax\") }} as outlet_fax,\r\n        {{ adapter.quote(\"OLEMail\") }} as outlet_email,\r\n        {{ adapter.quote(\"OLAccountant\") }} as outlet_accountant,\r\n        {{ adapter.quote(\"OLAccountantPhone\") }} as outlet_accountant_phone,\r\n        {{ adapter.quote(\"OLMarkManager\") }} as outlet_marketing,\r\n        {{ adapter.quote(\"OLMarkManagerPhone\") }} as outlet_marketing_phone,\r\n        {{ adapter.quote(\"OLPurchManager\") }} as outlet_purchasing,\r\n        {{ adapter.quote(\"OL_Code\") }}  as outlet_sap_code,\r\n        {{ adapter.quote(\"ZKPO\") }},\r\n        {{ adapter.quote(\"IPN\") }},\r\n        {{ adapter.quote(\"VATN\") }},\r\n        {{ adapter.quote(\"Block\") }},\r\n        {{ adapter.quote(\"BlockLetter\") }},\r\n        {{ adapter.quote(\"HouseLetter\") }},\r\n        {{ adapter.quote(\"Place\") }},\r\n        {{ adapter.quote(\"Comment\") }} as outlet_comment,\r\n        {{ adapter.quote(\"CloseReason\") }},\r\n\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"HasCoordinates\") }} as has_coordinates,\r\n\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"dbt_valid_from\") }} as dbt_valid_from,\r\n        coalesce(\"dbt_valid_to\", cast('{{ var(\"future_proof_date\") }}' as datetime)) as dbt_valid_to\r\n        \r\n        ----------  omited\r\n        -- {{ adapter.quote(\"OLOpenTime\") }},\r\n        -- {{ adapter.quote(\"OLCloseTime\") }},\r\n        -- {{ adapter.quote(\"OLBreakTimeFrom\") }},\r\n        -- {{ adapter.quote(\"OLBreakTimeTo\") }},\r\n        -- {{ adapter.quote(\"RR\") }},\r\n        -- {{ adapter.quote(\"OLSize\") }},\r\n        -- {{ adapter.quote(\"OLWHSize\") }},\r\n        -- {{ adapter.quote(\"OLStockCoverDays\") }},\r\n        -- {{ adapter.quote(\"CashFlow_id\") }},\r\n\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [["sfa__outlets_snapshot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["snapshot.mattoni_1873.sfa__outlets_snapshot"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__outlet_custom_fields": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__outlet_custom_fields", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__outlet_custom_fields.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__outlet_custom_fields.sql", "unique_id": "model.mattoni_1873.stg_sfa__outlet_custom_fields", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__outlet_custom_fields"], "alias": "stg_sfa__outlet_custom_fields", "checksum": {"name": "sha256", "checksum": "af8f7c7a937e1197e82f5c3c5f8bc4ff2567f9b63ad66914d96547271c8f9fa4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.4167995, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__outlet_custom_fields\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_OutLetsCustomField') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"CustomKey\") }} as outlet_key,\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"CustomKey\"]) }} as outlet_id,\r\n        {{ adapter.quote(\"FI1\") }},\r\n        {{ adapter.quote(\"FI2\") }},\r\n        {{ adapter.quote(\"FI3\") }},\r\n        {{ adapter.quote(\"FI4\") }},\r\n        {{ adapter.quote(\"FI5\") }},\r\n        {{ adapter.quote(\"FI6\") }},\r\n        {{ adapter.quote(\"FI7\") }},\r\n        {{ adapter.quote(\"FI8\") }},\r\n        {{ adapter.quote(\"FI9\") }},\r\n        {{ adapter.quote(\"FI10\") }},\r\n        {{ adapter.quote(\"FI11\") }},\r\n        {{ adapter.quote(\"FI12\") }},\r\n        {{ adapter.quote(\"FI13\") }},\r\n        {{ adapter.quote(\"FI14\") }},\r\n        {{ adapter.quote(\"FI15\") }},\r\n        {{ adapter.quote(\"FI16\") }},\r\n        {{ adapter.quote(\"FI17\") }},\r\n        {{ adapter.quote(\"FI18\") }},\r\n        {{ adapter.quote(\"FI19\") }},\r\n        {{ adapter.quote(\"FI20\") }},\r\n        {{ adapter.quote(\"FI21\") }},\r\n        {{ adapter.quote(\"FI22\") }},\r\n        {{ adapter.quote(\"FI23\") }},\r\n        {{ adapter.quote(\"FI24\") }},\r\n        {{ adapter.quote(\"FI25\") }},\r\n        {{ adapter.quote(\"FI26\") }},\r\n        {{ adapter.quote(\"FI27\") }},\r\n        {{ adapter.quote(\"FI28\") }},\r\n        {{ adapter.quote(\"FI29\") }},\r\n        {{ adapter.quote(\"FI30\") }},\r\n        {{ adapter.quote(\"FI31\") }},\r\n        {{ adapter.quote(\"FI32\") }},\r\n        {{ adapter.quote(\"FI33\") }},\r\n        {{ adapter.quote(\"FI34\") }},\r\n        {{ adapter.quote(\"FI35\") }},\r\n        {{ adapter.quote(\"FI36\") }},\r\n        {{ adapter.quote(\"FI37\") }},\r\n        {{ adapter.quote(\"FI38\") }},\r\n        {{ adapter.quote(\"FI39\") }},\r\n        {{ adapter.quote(\"FI40\") }},\r\n        {{ adapter.quote(\"FS1\") }} as sortiment_type,\r\n        {{ adapter.quote(\"FS2\") }} as visit_cycle,\r\n        {{ adapter.quote(\"FS3\") }} as visit_frequency,\r\n        {{ adapter.quote(\"FS4\") }} as visit_days,\r\n        {{ adapter.quote(\"FS5\") }} as pricelist_id,\r\n        {{ adapter.quote(\"FS6\") }} as listing,\r\n        {{ adapter.quote(\"FS7\") }} as delinst,\r\n        {{ adapter.quote(\"FS8\") }} as additional_name,\r\n        {{ adapter.quote(\"FS9\") }} as sgr,\r\n        {{ adapter.quote(\"FS10\") }} as payer,\r\n        {{ adapter.quote(\"FS11\") }},\r\n        {{ adapter.quote(\"FS12\") }},\r\n        {{ adapter.quote(\"FS13\") }},\r\n        {{ adapter.quote(\"FS14\") }},\r\n        {{ adapter.quote(\"FS15\") }},\r\n        {{ adapter.quote(\"FS16\") }},\r\n        {{ adapter.quote(\"FS17\") }},\r\n        {{ adapter.quote(\"FS18\") }},\r\n        {{ adapter.quote(\"FS19\") }},\r\n        {{ adapter.quote(\"FS20\") }},\r\n        {{ adapter.quote(\"FB1\") }},\r\n        {{ adapter.quote(\"FB2\") }},\r\n        {{ adapter.quote(\"FB3\") }},\r\n        {{ adapter.quote(\"FB4\") }},\r\n        {{ adapter.quote(\"FB5\") }},\r\n        {{ adapter.quote(\"FB6\") }},\r\n        {{ adapter.quote(\"FB7\") }},\r\n        {{ adapter.quote(\"FB8\") }},\r\n        {{ adapter.quote(\"FB9\") }},\r\n        {{ adapter.quote(\"FB10\") }},\r\n        {{ adapter.quote(\"FB11\") }},\r\n        {{ adapter.quote(\"FB12\") }},\r\n        {{ adapter.quote(\"FB13\") }},\r\n        {{ adapter.quote(\"FB14\") }},\r\n        {{ adapter.quote(\"FB15\") }},\r\n        {{ adapter.quote(\"FB16\") }},\r\n        {{ adapter.quote(\"FB17\") }},\r\n        {{ adapter.quote(\"FB18\") }},\r\n        {{ adapter.quote(\"FB19\") }},\r\n        {{ adapter.quote(\"FB20\") }},\r\n        {{ adapter.quote(\"FD1\") }},\r\n        {{ adapter.quote(\"FD2\") }},\r\n        {{ adapter.quote(\"FD3\") }},\r\n        {{ adapter.quote(\"FD4\") }},\r\n        {{ adapter.quote(\"FD5\") }},\r\n        {{ adapter.quote(\"FD6\") }},\r\n        {{ adapter.quote(\"FD7\") }},\r\n        {{ adapter.quote(\"FD8\") }},\r\n        {{ adapter.quote(\"FD9\") }},\r\n        {{ adapter.quote(\"FD10\") }},\r\n        {{ adapter.quote(\"FD11\") }},\r\n        {{ adapter.quote(\"FD12\") }},\r\n        {{ adapter.quote(\"FD13\") }},\r\n        {{ adapter.quote(\"FD14\") }},\r\n        {{ adapter.quote(\"FD15\") }},\r\n        {{ adapter.quote(\"FD16\") }},\r\n        {{ adapter.quote(\"FD17\") }},\r\n        {{ adapter.quote(\"FD18\") }},\r\n        {{ adapter.quote(\"FD19\") }},\r\n        {{ adapter.quote(\"FD20\") }},\r\n        {{ adapter.quote(\"FN1\") }},\r\n        {{ adapter.quote(\"FN2\") }},\r\n        {{ adapter.quote(\"FN3\") }},\r\n        {{ adapter.quote(\"FN4\") }},\r\n        {{ adapter.quote(\"FN5\") }},\r\n        {{ adapter.quote(\"FN6\") }},\r\n        {{ adapter.quote(\"FN7\") }},\r\n        {{ adapter.quote(\"FN8\") }},\r\n        {{ adapter.quote(\"FN9\") }},\r\n        {{ adapter.quote(\"FN10\") }},\r\n        {{ adapter.quote(\"FN11\") }},\r\n        {{ adapter.quote(\"FN12\") }},\r\n        {{ adapter.quote(\"FN13\") }},\r\n        {{ adapter.quote(\"FN14\") }},\r\n        {{ adapter.quote(\"FN15\") }},\r\n        {{ adapter.quote(\"FN16\") }},\r\n        {{ adapter.quote(\"FN17\") }},\r\n        {{ adapter.quote(\"FN18\") }},\r\n        {{ adapter.quote(\"FN19\") }},\r\n        {{ adapter.quote(\"FN20\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutLetsCustomField"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["source.mattoni_1873.sfa.dbo_OutLetsCustomField"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__outlet_distributions": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__outlet_distributions", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__outlet_distributions.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__outlet_distributions.sql", "unique_id": "model.mattoni_1873.stg_sfa__outlet_distributions", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__outlet_distributions"], "alias": "stg_sfa__outlet_distributions", "checksum": {"name": "sha256", "checksum": "1d618895d3fd3d7834ec012864017a6932f303f7d13b3677bc70058777f3b1de"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.4548082, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__outlet_distributions\"", "raw_code": "with source as (\r\n    select * from {{ source('sfa', 'dbo_OutletDistribution') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OLCard_ID\", \"Product_id\"]) }} as distribution_id,\r\n        \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OLCard_ID\"]) }} as visit_id,\r\n        {{ adapter.quote(\"OLCard_ID\") }} as visit_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Product_id\"]) }} as product_id,\r\n        {{ adapter.quote(\"Product_id\") }} as product_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n        ----------  strings\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Price\") }} as price,\r\n        ----------  booleans\r\n        case\r\n            when {{ adapter.quote(\"IsPresent\") }} = '1' then 1\r\n            else 0\r\n        end as is_present,\r\n        {{ adapter.quote(\"IsSetup\") }} as is_setup\r\n\r\n        ----------  timestamps\r\n        -- {{ adapter.quote(\"Valid_From\") }},\r\n        -- {{ adapter.quote(\"Valid_To\") }}\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"OutOfStockReason\") }},        \r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutletDistribution"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_OutletDistribution"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__outlet_orders_h": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__outlet_orders_h", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__outlet_orders_h.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__outlet_orders_h.sql", "unique_id": "model.mattoni_1873.stg_sfa__outlet_orders_h", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__outlet_orders_h"], "alias": "stg_sfa__outlet_orders_h", "checksum": {"name": "sha256", "checksum": "fcaea83d5e2a523fedabb297f77f47c35b8e17a282c7a6661322703e1e39f7bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.4698007, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__outlet_orders_h\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_OutletOrderH') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"OlCard_id\") }},\r\n        {{ adapter.quote(\"OrderNo\") }},\r\n        {{ adapter.quote(\"OlOrderDate\") }},\r\n        {{ adapter.quote(\"OrderExecutionDate\") }},\r\n        {{ adapter.quote(\"PayForm_id\") }},\r\n        {{ adapter.quote(\"ResponsiblePerson\") }},\r\n        {{ adapter.quote(\"OLOrderAmount\") }},\r\n        {{ adapter.quote(\"Discount\") }},\r\n        {{ adapter.quote(\"Cust_id\") }},\r\n        {{ adapter.quote(\"ConsumerUnit\") }},\r\n        {{ adapter.quote(\"OrderYear\") }},\r\n        {{ adapter.quote(\"OrderMonth\") }},\r\n        {{ adapter.quote(\"OrderWeek\") }},\r\n        {{ adapter.quote(\"OlDeliveryAddress\") }},\r\n        {{ adapter.quote(\"VATCalcMode\") }},\r\n        {{ adapter.quote(\"VAT_Sum\") }},\r\n        {{ adapter.quote(\"ProxySeries\") }},\r\n        {{ adapter.quote(\"ProxyNumber\") }},\r\n        {{ adapter.quote(\"ProxyDate\") }},\r\n        {{ adapter.quote(\"TransportCost\") }},\r\n        {{ adapter.quote(\"Operation_id\") }},\r\n        {{ adapter.quote(\"W_id\") }},\r\n        {{ adapter.quote(\"Comments\") }},\r\n        {{ adapter.quote(\"IsReturn\") }},\r\n        {{ adapter.quote(\"TaxFactureNo\") }},\r\n        {{ adapter.quote(\"IsLocalProducts\") }},\r\n        {{ adapter.quote(\"HasUnboundPayments\") }},\r\n        {{ adapter.quote(\"SyncWithDBF\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"PayDate\") }},\r\n        {{ adapter.quote(\"IsConfirm\") }},\r\n        {{ adapter.quote(\"OrderInPackages\") }},\r\n        {{ adapter.quote(\"OrderingTime\") }},\r\n        {{ adapter.quote(\"Signature\") }},\r\n        {{ adapter.quote(\"PComp_id\") }},\r\n        {{ adapter.quote(\"CustNumber\") }},\r\n        {{ adapter.quote(\"PayFormType\") }},\r\n        {{ adapter.quote(\"InvestmentId\") }},\r\n        {{ adapter.quote(\"NextVisitDate\") }},\r\n        {{ adapter.quote(\"Postpay\") }},\r\n        {{ adapter.quote(\"SyncMMDate\") }},\r\n        {{ adapter.quote(\"PCDistr_id\") }},\r\n        {{ adapter.quote(\"DistributorEntity\") }},\r\n        {{ adapter.quote(\"IsPromoActivity\") }},\r\n        {{ adapter.quote(\"PromoActivities_ID\") }},\r\n        {{ adapter.quote(\"AcceptStatus\") }},\r\n        {{ adapter.quote(\"BaseOrderNo\") }},\r\n        {{ adapter.quote(\"AgreementId\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutletOrderH"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_OutletOrderH"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__outlet_order_d": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__outlet_order_d", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__outlet_order_d.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__outlet_order_d.sql", "unique_id": "model.mattoni_1873.stg_sfa__outlet_order_d", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__outlet_order_d"], "alias": "stg_sfa__outlet_order_d", "checksum": {"name": "sha256", "checksum": "8abbda71ff16902fcd3f05533b8a5708ad6fae0f17c6b94d1b3fcbba0f695428"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.4888048, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__outlet_order_d\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_OutletOrderD') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"OrderNo\") }},\r\n        {{ adapter.quote(\"Product_id\") }},\r\n        {{ adapter.quote(\"Price\") }},\r\n        {{ adapter.quote(\"Product_qty\") }},\r\n        {{ adapter.quote(\"Discount\") }},\r\n        {{ adapter.quote(\"IsReturnable\") }},\r\n        {{ adapter.quote(\"VAT\") }},\r\n        {{ adapter.quote(\"Recommend_qty\") }},\r\n        {{ adapter.quote(\"BasePrice\") }},\r\n        {{ adapter.quote(\"ConsumerUnitId\") }},\r\n        {{ adapter.quote(\"InitialProductId\") }},\r\n        {{ adapter.quote(\"PromoActivities_ID\") }},\r\n        {{ adapter.quote(\"ReturnReasonId\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutletOrderD"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_OutletOrderD"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__products": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__products", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__products.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__products.sql", "unique_id": "model.mattoni_1873.stg_sfa__products", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__products"], "alias": "stg_sfa__products", "checksum": {"name": "sha256", "checksum": "c805926bf34217b7b0edd07bf27886e03c444648025e267237e403c24bc5a562"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.4998026, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__products\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_Products') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"ProductType_Id\") }},\r\n        {{ adapter.quote(\"Unit_Id\") }},\r\n        {{ adapter.quote(\"UnitWeight\") }},\r\n        {{ adapter.quote(\"Package_QTY\") }},\r\n        {{ adapter.quote(\"SortOrder\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"Price\") }},\r\n        {{ adapter.quote(\"IsMix\") }},\r\n        {{ adapter.quote(\"IsTare\") }},\r\n        {{ adapter.quote(\"Tare_Id\") }},\r\n        {{ adapter.quote(\"TarePack_Qty\") }},\r\n        {{ adapter.quote(\"IsReturnable\") }},\r\n        {{ adapter.quote(\"IsConcurrent\") }},\r\n        {{ adapter.quote(\"ProductVolume\") }},\r\n        {{ adapter.quote(\"IsProductWeight\") }},\r\n        {{ adapter.quote(\"CertificateNo\") }},\r\n        {{ adapter.quote(\"CertificateBeginDate\") }},\r\n        {{ adapter.quote(\"CertificateEndDate\") }},\r\n        {{ adapter.quote(\"HLCode\") }},\r\n        {{ adapter.quote(\"IsBonuse\") }},\r\n        {{ adapter.quote(\"EANCode\") }},\r\n        {{ adapter.quote(\"LicenseType_ID\") }},\r\n        {{ adapter.quote(\"ProductBrand_ID\") }},\r\n        {{ adapter.quote(\"Delisted\") }},\r\n        {{ adapter.quote(\"Quant_Qty\") }},\r\n        {{ adapter.quote(\"ProductCode2\") }},\r\n        {{ adapter.quote(\"SyncToDDB\") }},\r\n        {{ adapter.quote(\"ServiceBit\") }},\r\n        {{ adapter.quote(\"IsPromotional\") }},\r\n        {{ adapter.quote(\"IsLinkedToAllCustomers\") }},\r\n        {{ adapter.quote(\"FrontWidth\") }},\r\n        {{ adapter.quote(\"FrontHeight\") }},\r\n        {{ adapter.quote(\"HasActiveContentFile\") }},\r\n        {{ adapter.quote(\"IsSeasonal\") }},\r\n        {{ adapter.quote(\"IsBaseProduct\") }},\r\n        {{ adapter.quote(\"ForRecognition\") }},\r\n        {{ adapter.quote(\"IsExchangeBottle\") }},\r\n\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Product_Id\"]) }} as product_id,\r\n        {{ adapter.quote(\"Product_Id\") }} as product_key,\r\n\r\n        {{ adapter.quote(\"ProductCode\") }} as product_code,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"ProductName\") }} as product_name,\r\n        {{ adapter.quote(\"ProductShortName\") }} as product_name_short,\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"IsPosm\") }} as is_pos_material,\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"ULM\") }}\r\n\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Products"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_Products"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__product_active_promotions": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__product_active_promotions", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__product_active_promotions.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__product_active_promotions.sql", "unique_id": "model.mattoni_1873.stg_sfa__product_active_promotions", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__product_active_promotions"], "alias": "stg_sfa__product_active_promotions", "checksum": {"name": "sha256", "checksum": "2ea557382b92f733eab1041423370a186ff57ef15ec2e42862bc885898d95239"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.5188076, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__product_active_promotions\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_ProductPromotionActive') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"Product_Id\") }},\r\n        {{ adapter.quote(\"ComponentId\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ProductPromotionActive"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_ProductPromotionActive"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__product_categories": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__product_categories", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__product_categories.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__product_categories.sql", "unique_id": "model.mattoni_1873.stg_sfa__product_categories", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__product_categories"], "alias": "stg_sfa__product_categories", "checksum": {"name": "sha256", "checksum": "46e92d7d59aaa341356e54ba09bc506753fd4306d02ddba7dfc19ba03edbeda5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.5268085, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__product_categories\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_ProductCategory') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"ProdCategory_ID\") }},\r\n        {{ adapter.quote(\"ProdCategoryName\") }},\r\n        {{ adapter.quote(\"ProdCategoryShortName\") }},\r\n        {{ adapter.quote(\"SortOrder\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"ULM\") }},\r\n        {{ adapter.quote(\"IsConcurrent\") }},\r\n        {{ adapter.quote(\"ProdCategoryCode\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ProductCategory"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_ProductCategory"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__product_groups": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__product_groups", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__product_groups.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__product_groups.sql", "unique_id": "model.mattoni_1873.stg_sfa__product_groups", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__product_groups"], "alias": "stg_sfa__product_groups", "checksum": {"name": "sha256", "checksum": "0279fbc4633cefc4af1054cfd200b8d3e8ea9420bb90b7cdf1bbeab91d036ab9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.535807, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__product_groups\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_ProductGroups') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"ProdGroup_ID\") }},\r\n        {{ adapter.quote(\"ProdGroupName\") }},\r\n        {{ adapter.quote(\"ProdGroupShortName\") }},\r\n        {{ adapter.quote(\"SortOrder\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"ULM\") }},\r\n        {{ adapter.quote(\"IsConcurrent\") }},\r\n        {{ adapter.quote(\"ProdCategory_ID\") }},\r\n        {{ adapter.quote(\"ProdGroupCode\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ProductGroups"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_ProductGroups"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__product_stocks": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__product_stocks", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__product_stocks.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__product_stocks.sql", "unique_id": "model.mattoni_1873.stg_sfa__product_stocks", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__product_stocks"], "alias": "stg_sfa__product_stocks", "checksum": {"name": "sha256", "checksum": "bcdcaccd1eed4589536410f6eacfd70c06368d162fa546b5ab80a30482b81cb8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.5448039, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__product_stocks\"", "raw_code": "with source as (\r\n    select * from {{ source('sfa', 'dbo_ProductStocks') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"W_id\") }},\r\n        {{ adapter.quote(\"Product_id\") }},\r\n        {{ adapter.quote(\"Stock\") }},\r\n        {{ adapter.quote(\"Required\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"StockEditAdd\") }},\r\n        {{ adapter.quote(\"StockEditTotal\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ProductStocks"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_ProductStocks"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__questionnaires": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__questionnaires", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__questionnaires.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__questionnaires.sql", "unique_id": "model.mattoni_1873.stg_sfa__questionnaires", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__questionnaires"], "alias": "stg_sfa__questionnaires", "checksum": {"name": "sha256", "checksum": "6e4b6198f9556550f5df605481713af8185b826fc5d05bfcc4980d1488429eb2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model transforms the source table `sfa__documents_snapshot` with various transformations.", "columns": {"dbt_scd_id": {"name": "dbt_scd_id", "description": "The system-generated surrogate key during snapshot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_id": {"name": "questionnaire_id", "description": "A surrogate key for the questionnaire, generated using a combination of the country code and document ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_key": {"name": "questionnaire_key", "description": "The original Document_ID from the source table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "The numerical ID associated with the country code, generated using the macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_name": {"name": "questionnaire_name", "description": "The name or title of the questionnaire.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_details": {"name": "questionnaire_details", "description": "Detailed description or context related to the questionnaire.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "The original country code from the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_external_code": {"name": "questionnaire_external_code", "description": "External code related to the questionnaire.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_pass_score": {"name": "questionnaire_pass_score", "description": "The passing score for the questionnaire, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_status": {"name": "questionnaire_status", "description": "Status indicator. `2` or `9` to be discovered what it means in real life.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dlm": {"name": "dlm", "description": "Date of last modification", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "Start of the validity period for this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "End of the validity period for this record, defaults to a future-proof date if not provided in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\staging\\soft_serve\\_staging_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.6018236, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__questionnaires\"", "raw_code": "with source as (\r\n    select * from {{ ref('sfa__documents_snapshot') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ adapter.quote(\"dbt_scd_id\") }} as dbt_scd_id,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Document_ID\"]) }} as questionnaire_id,\r\n        {{ adapter.quote(\"Document_ID\") }} as questionnaire_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"Name\") }} as questionnaire_name,\r\n        {{ adapter.quote(\"Details\") }} as questionnaire_details,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n        {{ adapter.quote(\"ExternalCode\") }} as questionnaire_external_code,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"PassScore\") }} as questionnaire_pass_score,\r\n        {{ adapter.quote(\"Status\") }} as questionnaire_status,\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"dbt_valid_from\") }} as dbt_valid_from,\r\n        coalesce(\"dbt_valid_to\", cast('{{ var(\"future_proof_date\") }}' as datetime)) as dbt_valid_to\r\n        \r\n        ----------  omited\r\n        -- {{ adapter.quote(\"HighlightColor\") }},\r\n        -- {{ adapter.quote(\"ClearPreFilledResponses\") }},\r\n        -- {{ adapter.quote(\"ResetPreFieldResponses\") }},\r\n        -- {{ adapter.quote(\"UseContentMDB\") }},\r\n        -- {{ adapter.quote(\"UseContentCDB\") }},\r\n        -- {{ adapter.quote(\"ULM\") }} as document_ulm,\r\n        -- {{ adapter.quote(\"DocumentClassificationId\") }} as document_classification_id,\r\n        -- {{ adapter.quote(\"DocumentLinkStandartDocumentItemId\") }} as document_link_standard_document_id,\r\n        -- {{ adapter.quote(\"StandartDocumentItemId\") }} as document_standard_document_id,\r\n        -- {{ adapter.quote(\"DisplayLastResponseDate\") }} as is_display_last_response_date,\r\n        -- {{ adapter.quote(\"PromoActivities_ID\") }} as promo_activities_key,\r\n        -- {{ adapter.quote(\"ActivityId\") }} as activity_id,\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [["sfa__documents_snapshot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["snapshot.mattoni_1873.sfa__documents_snapshot"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__questionnaire_items": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__questionnaire_items", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__questionnaire_items.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__questionnaire_items.sql", "unique_id": "model.mattoni_1873.stg_sfa__questionnaire_items", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__questionnaire_items"], "alias": "stg_sfa__questionnaire_items", "checksum": {"name": "sha256", "checksum": "408a4ceabcbcce6b8646f802ae9ee41cf246581d337eb64eaf8cb5ae11ad9c44"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model transforms the source table `sfa__questionnaire_items_snapshot` with various transformations.", "columns": {"dbt_scd_id": {"name": "dbt_scd_id", "description": "The system-generated surrogate key during snapshot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_id": {"name": "questionnaire_question_id", "description": "A surrogate key for the questionnaire, generated using a combination of the country code and document item ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_key": {"name": "questionnaire_question_key", "description": "The original Document_Item_ID from the source table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_id": {"name": "questionnaire_section_id", "description": "A surrogate key for the questionnaire section, generated using a combination of the country code and Section_ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_key": {"name": "questionnaire_section_key", "description": "The original Section_ID from the source table. It gets **repeated** between countries.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_standard_id": {"name": "questionnaire_question_standard_id", "description": "Not used. A surrogate key for the question standard, generated using a combination of the country code and StandartDocumentItemId.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_standard_key": {"name": "questionnaire_question_standard_key", "description": "Not used. The original StandartDocumentItemId from the source table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_bo_id": {"name": "questionnaire_question_bo_id", "description": "Not used. A surrogate key for the business object related to the questionnaire section, generated using a combination of the country code and BO_ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_bo_key": {"name": "questionnaire_question_bo_key", "description": "Not used. The original BO_ID from the source table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "The numerical ID associated with the country code, generated using the macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "The original country code from the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question": {"name": "questionnaire_question", "description": "Question itself. The text of the question.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_target_value": {"name": "questionnaire_question_target_value", "description": "The target or expected value for the questionnaire question.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_sort_order": {"name": "questionnaire_question_sort_order", "description": "The sort order of the question in its respective section or list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_external_code": {"name": "questionnaire_question_external_code", "description": "External **SAP code** related to the question.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_weight": {"name": "questionnaire_question_weight", "description": "The weight or importance assigned to the question.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_status": {"name": "questionnaire_question_status", "description": "Status indicator. `2` or `9` to be discovered what it means in real life.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_response_format": {"name": "questionnaire_question_response_format", "description": "The expected format or type of response for the questionnaire question.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_has_use_previous_answer": {"name": "questionnaire_question_has_use_previous_answer", "description": "Indicator if the question uses the response from a previous questionnaire.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_is_read_only": {"name": "questionnaire_question_is_read_only", "description": "Indicator if the question is read-only and cannot be modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_question_is_distribution": {"name": "questionnaire_question_is_distribution", "description": "Indicator if the question is regarding distribution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dlm": {"name": "dlm", "description": "Date of last modification", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "Start of the validity period for this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "End of the validity period for this record, defaults to a future-proof date if not provided in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\staging\\soft_serve\\_staging_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.612824, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__questionnaire_items\"", "raw_code": "with source as (\r\n    select * from {{ ref('sfa__document_items_snapshot') }}\r\n),\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ adapter.quote(\"dbt_scd_id\") }} as dbt_scd_id,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Item_ID\"]) }} as questionnaire_question_id,\r\n        {{ adapter.quote(\"Item_ID\") }} as questionnaire_question_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Section_ID\"]) }} as questionnaire_section_id,\r\n        {{ adapter.quote(\"Section_ID\") }} as questionnaire_section_key,\r\n        \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"StandartDocumentItemId\"]) }} as questionnaire_question_standard_id,\r\n        {{ adapter.quote(\"StandartDocumentItemId\") }} as questionnaire_question_standard_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"BO_ID\"]) }} as questionnaire_question_bo_id,\r\n        {{ adapter.quote(\"BO_ID\") }} as questionnaire_question_bo_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"DisplayValue\") }} as questionnaire_question,\r\n        {{ adapter.quote(\"TargetValue\") }} as questionnaire_question_target_value,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"SortOrder\") }} as questionnaire_question_sort_order,\r\n        {{ adapter.quote(\"ExternalCode\") }} as questionnaire_question_external_code, \r\n        {{ adapter.quote(\"QuestionWeight\") }} as questionnaire_question_weight,\r\n        {{ adapter.quote(\"Status\") }} as questionnaire_question_status,\r\n        {{ adapter.quote(\"ResponseFormat\") }} as questionnaire_question_response_format,\r\n\r\n        ----------  booleans\r\n\r\n        {{ adapter.quote(\"UseResponseFromPreviousQuestionnaire\") }}  as questionnaire_question_has_use_previous_answer,\r\n        {{ adapter.quote(\"IsReadOnly\") }} as questionnaire_question_is_read_only,\r\n        {{ adapter.quote(\"Distribution\") }} as questionnaire_question_is_distribution,\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"dbt_valid_from\") }} as dbt_valid_from,\r\n        coalesce(\"dbt_valid_to\", cast('{{ var(\"future_proof_date\") }}' as datetime)) as dbt_valid_to\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"HighlightInColor\") }},\r\n        -- {{ adapter.quote(\"Hint\") }},\r\n        -- {{ adapter.quote(\"IsProhibitEditingPreviousAnswer\") }},\r\n        -- {{ adapter.quote(\"UsePreviousVisitContent\") }},\r\n        -- {{ adapter.quote(\"ULM\") }},\r\n        -- {{ adapter.quote(\"ControlType\") }} as questionnaire_control_type,\r\n        -- {{ adapter.quote(\"TotalType\") }} as questionnaire_total_type,\r\n        -- {{ adapter.quote(\"ValueType\") }} as questionnaire_value_type,\r\n        -- {{ adapter.quote(\"UseContentCDB\") }} as questionnaire_,\r\n        -- {{ adapter.quote(\"UseContentMDB\") }} as questionnaire_,\r\n        -- {{ adapter.quote(\"HasRestrictionRules\") }} as questionnaire_,\r\n        -- {{ adapter.quote(\"HasValidationRules\") }} as questionnaire_,\r\n        -- {{ adapter.quote(\"HasMobileContentRules\") }} as questionnaire_,\r\n        -- {{ adapter.quote(\"MDBContentCountLimit\") }}  as questionnaire_question_,\r\n        -- {{ adapter.quote(\"BarCodeScanning\") }} as questionnaire_question_is_,\r\n\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [["sfa__document_items_snapshot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["snapshot.mattoni_1873.sfa__document_items_snapshot"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__questionnaire_responded_on_visit", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__questionnaire_responded_on_visit.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__questionnaire_responded_on_visit.sql", "unique_id": "model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__questionnaire_responded_on_visit"], "alias": "stg_sfa__questionnaire_responded_on_visit", "checksum": {"name": "sha256", "checksum": "a9a59de4831b77788b3d82fe1e37479533e35af3330de823c22c48cce5f8249f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.5908003, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__questionnaire_responded_on_visit\"", "raw_code": "with source as (\r\n    select * from {{ source('sfa', 'dbo_QuestionnaireResponseOnVisit_v') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Visit_ID\"]) }} as visit_id,\r\n        {{ adapter.quote(\"Visit_ID\") }} as visit_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Response_ID\"]) }} as questionnaire_response_id,\r\n        {{ adapter.quote(\"Response_ID\") }} as questionnaire_response_key,\r\n    \r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_key\r\n\r\n        ----------  strings\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"Valid_From\") }},\r\n        -- {{ adapter.quote(\"Valid_To\") }}\r\n        \r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_QuestionnaireResponseOnVisit_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_QuestionnaireResponseOnVisit_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__questionnaire_responses": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__questionnaire_responses", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__questionnaire_responses.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__questionnaire_responses.sql", "unique_id": "model.mattoni_1873.stg_sfa__questionnaire_responses", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__questionnaire_responses"], "alias": "stg_sfa__questionnaire_responses", "checksum": {"name": "sha256", "checksum": "8011260ad54ffa6563c4c1b2fd170ba07f84fbd3c7ed17d8bd2a18f66eb934d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.6028013, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__questionnaire_responses\"", "raw_code": "with source as (\r\n    select * from {{ ref('sfa__questionnare_responses_snapshot') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Response_ID\"]) }} as link_id,\r\n        {{ adapter.quote(\"Response_ID\") }} as questionnaire_response_id,\r\n        {{ adapter.quote(\"Document_ID\") }} as questionnaire_id,\r\n        {{ adapter.quote(\"SourceResponse_ID\") }} as questionnaire_source_response_id,\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        ----------  strings\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n        dbt_valid_from as valid_from,\r\n        dbt_valid_to as valid_to\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"Status\") }},\r\n        -- {{ adapter.quote(\"IsProcessed\") }},\r\n        -- {{ adapter.quote(\"DLM\") }},\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [["sfa__questionnare_responses_snapshot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["snapshot.mattoni_1873.sfa__questionnare_responses_snapshot"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__questionnaire_response_images": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__questionnaire_response_images", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__questionnaire_response_images.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__questionnaire_response_images.sql", "unique_id": "model.mattoni_1873.stg_sfa__questionnaire_response_images", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__questionnaire_response_images"], "alias": "stg_sfa__questionnaire_response_images", "checksum": {"name": "sha256", "checksum": "598f2767435a7e249e3a6f8ecce93c86feaae2d1c27111b561f5f096238c059b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.6118011, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__questionnaire_response_images\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_ResponsesSingleContentD') }}\r\n),\r\nrenamed as (\r\n    select\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"ContentID\"]) }} as sfa_file_id,\r\n        {{ adapter.quote(\"ContentID\") }} as sfa_file_key,\r\n    \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Response_ID\"]) }} as questionnaire_response_id,\r\n        {{ adapter.quote(\"Response_ID\") }} as questionnaire_response_key,\r\n    \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Object_ID\"]) }} as question_id,\r\n        {{ adapter.quote(\"Object_ID\") }} as question_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        ----------  strings\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"StepNumber\") }}\r\n        \r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n        -- {{ adapter.quote(\"Valid_From\") }},\r\n        -- {{ adapter.quote(\"Valid_To\") }}\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"EntityTypeID\") }},\r\n\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ResponsesSingleContentD"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_ResponsesSingleContentD"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__questionnaire_response_texts": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__questionnaire_response_texts", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__questionnaire_response_texts.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__questionnaire_response_texts.sql", "unique_id": "model.mattoni_1873.stg_sfa__questionnaire_response_texts", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__questionnaire_response_texts"], "alias": "stg_sfa__questionnaire_response_texts", "checksum": {"name": "sha256", "checksum": "14e9aeec762bc47afaf1d7dc368a865aac113d9f91a591c66dc84907269e60a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.626807, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__questionnaire_response_texts\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_ResponsesSingleD_v') }}\r\n),\r\nrenamed as (\r\n    select\r\n\r\n\r\n       ----------  ids\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"ResponseValueId\"]) }} as questionnare_answer_id,\r\n        {{ adapter.quote(\"ResponseValueId\") }} as questionnare_answer_key,       \r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Response_ID\"]) }} as questionnaire_response_id,\r\n        {{ adapter.quote(\"Response_ID\") }} as questionnaire_response_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Item_ID\"]) }} as question_id,\r\n        {{ adapter.quote(\"Item_ID\") }} as question_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"ResponseValue\") }} as questionnaire_answer,\r\n\r\n        {{ adapter.quote(\"ExternalCode\") }} as questionnaire_answer_external_code,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"StepNumber\") }} as questionnaire_answer_step,\r\n        {{ adapter.quote(\"ScanMethod\") }} as questionnaire_answer_scan_method\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n        -- {{ adapter.quote(\"Valid_From\") }},\r\n        -- {{ adapter.quote(\"Valid_To\") }}\r\n        \r\n        ----------  omited\r\n\r\n \r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ResponsesSingleD_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_ResponsesSingleD_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__questionnaire_sections": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__questionnaire_sections", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__questionnaire_sections.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__questionnaire_sections.sql", "unique_id": "model.mattoni_1873.stg_sfa__questionnaire_sections", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__questionnaire_sections"], "alias": "stg_sfa__questionnaire_sections", "checksum": {"name": "sha256", "checksum": "9e8792203d962e48ca79be69b0729f65ae7c8e94fb32984a538e7b882f187607"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model transforms the source table with various transformations.", "columns": {"dbt_scd_id": {"name": "dbt_scd_id", "description": "The system-generated surrogate key during snapshot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_id": {"name": "questionnaire_section_id", "description": "A surrogate key for the questionnaire section, generated using a combination of the country code and Section_ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_key": {"name": "questionnaire_section_key", "description": "The original Section_ID from the source table. It gets **repeated** between countries.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_parent_id": {"name": "questionnaire_section_parent_id", "description": "A surrogate key for the parent section of the questionnaire, generated using a combination of the country code and ParentSection_ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_parent_key": {"name": "questionnaire_section_parent_key", "description": "The original ParentSection_ID from the source table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_id": {"name": "questionnaire_id", "description": "A surrogate key for the questionnaire, generated using a combination of the country code and document ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_key": {"name": "questionnaire_key", "description": "The original Document_ID from the source table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_bo_id": {"name": "questionnaire_section_bo_id", "description": "Not used. A surrogate key for the business object related to the questionnaire section, generated using a combination of the country code and BO_ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_bo_key": {"name": "questionnaire_section_bo_key", "description": "Not used. The original BO_ID from the source table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "The numerical ID associated with the country code, generated using the macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_name": {"name": "questionnaire_section_name", "description": "The name of the specific section.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_external_code": {"name": "questionnaire_section_external_code", "description": "External code related to a specific section.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_level": {"name": "questionnaire_section_level", "description": "The hierarchical level of the section within the questionnaire section's structure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_sort_order": {"name": "questionnaire_section_sort_order", "description": "The sort order of the section within the questionnaire or within its parent section.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_grouping_type": {"name": "questionnaire_section_grouping_type", "description": "Not used. Method used to group questions within the section.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "questionnaire_section_status": {"name": "questionnaire_section_status", "description": "Status indicator. `2` or `9` to be discovered what it means in real life.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_call_button": {"name": "is_call_button", "description": "Indicator if the section has a call button functionality.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_photo_report": {"name": "is_photo_report", "description": "Indicator if the section requires a photo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dlm": {"name": "dlm", "description": "Date of last modification", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "Start of the validity period for this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "End of the validity period for this record, defaults to a future-proof date if not provided in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\staging\\soft_serve\\_staging_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.621823, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__questionnaire_sections\"", "raw_code": "with source as (\r\n    select * from {{ ref('sfa__document_sections_snapshot') }}\r\n),\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ adapter.quote(\"dbt_scd_id\") }} as dbt_scd_id,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Section_ID\"]) }} as questionnaire_section_id,\r\n        {{ adapter.quote(\"Section_ID\") }} as questionnaire_section_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"ParentSection_ID\"]) }} as questionnaire_section_parent_id,\r\n        {{ adapter.quote(\"ParentSection_ID\") }} as questionnaire_section_parent_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Document_ID\"]) }} as questionnaire_id,\r\n        {{ adapter.quote(\"Document_ID\") }} as questionnaire_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"BO_ID\"]) }} as questionnaire_section_bo_id,\r\n        {{ adapter.quote(\"BO_ID\") }} as questionnaire_section_bo_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"Name\") }} as questionnaire_section_name,\r\n        {{ adapter.quote(\"ExternalCode\") }} as questionnaire_section_external_code,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Level\") }} as questionnaire_section_level,\r\n        {{ adapter.quote(\"SortOrder\") }} as questionnaire_section_sort_order,\r\n        {{ adapter.quote(\"GroupingType\") }} as questionnaire_section_grouping_type,\r\n        {{ adapter.quote(\"Status\") }} as questionnaire_section_status,\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"IsCallButton\") }} as is_call_button,\r\n        {{ adapter.quote(\"IsPhotoReport\") }} as is_photo_report,\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"dbt_valid_from\") }} as dbt_valid_from,\r\n        coalesce(\"dbt_valid_to\", cast('{{ var(\"future_proof_date\") }}' as datetime)) as dbt_valid_to\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"HReport_ID\") }} as questionnaire_group_id,\r\n        -- {{ adapter.quote(\"ULM\") }},\r\n        -- {{ adapter.quote(\"RandomQuestionsNumber\") }},\r\n        -- {{ adapter.quote(\"EnableCopy\") }} as is_enabled_copy,\r\n        -- {{ adapter.quote(\"ShootingAngle\") }},\r\n\r\n\r\n\r\n    from source\r\n)\r\nselect *\r\nfrom renamed", "language": "sql", "refs": [["sfa__document_sections_snapshot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["snapshot.mattoni_1873.sfa__document_sections_snapshot"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__questionnaire_visible_sections": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__questionnaire_visible_sections", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__questionnaire_visible_sections.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__questionnaire_visible_sections.sql", "unique_id": "model.mattoni_1873.stg_sfa__questionnaire_visible_sections", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__questionnaire_visible_sections"], "alias": "stg_sfa__questionnaire_visible_sections", "checksum": {"name": "sha256", "checksum": "5d6f4685bbd08018067508ac0884225521fdbdc0233dfee0ddb79b83a84a3bd7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.7468126, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__questionnaire_visible_sections\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_QuestionnaireVisibleSections') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"Response_Id\") }},\r\n        {{ adapter.quote(\"Section_Id\") }},\r\n        {{ adapter.quote(\"StepNumber\") }},\r\n        {{ adapter.quote(\"IsVisible\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_QuestionnaireVisibleSections"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_QuestionnaireVisibleSections"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__staff": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__staff", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__staff.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__staff.sql", "unique_id": "model.mattoni_1873.stg_sfa__staff", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__staff"], "alias": "stg_sfa__staff", "checksum": {"name": "sha256", "checksum": "3e2271254104901b7c640df94f41871e1ad4d544c4699afcd163f4f109cd03a1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.7558076, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__staff\"", "raw_code": "with source as (\r\n      select * from {{ ref('sfa__staff_snapshot') }}\r\n),\r\nrenamed as (\r\n    select\r\n        ----------  ids\r\n        {{ adapter.quote(\"dbt_scd_id\") }},\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Staff_id\"]) }} as staff_id,\r\n        {{ adapter.quote(\"Staff_id\") }} as staff_key,\r\n        {{ adapter.quote(\"Staff_Code\") }} as staff_sap_code,\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n         {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"Name\") }} as staff_name_whole,\r\n        {{ adapter.quote(\"FName\") }} as staff_name_first,\r\n        {{ adapter.quote(\"LName\") }} as staff_name_last,\r\n        {{ adapter.quote(\"Position\") }} as staff_position,\r\n        {{ adapter.quote(\"Comment\") }} as staff_comment,\r\n        {{ adapter.quote(\"EMail\") }} as staff_email,\r\n        reverse(\r\n            left(\r\n                reverse({{ adapter.quote(\"Name\") }}),\r\n                patindex('%[^0-9 ]%', reverse({{ adapter.quote(\"Name\") }}) + 'x') - 1\r\n            )\r\n        ) as staff_telephone,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Status\") }} as status,\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"dbt_valid_from\") }},\r\n        coalesce(\"dbt_valid_to\", cast('{{ var(\"future_proof_date\") }}' as datetime)) as dbt_valid_to\r\n        \r\n        ----------  omited\r\n        -- {{ adapter.quote(\"SName\") }} as staff_middle_name,\r\n        -- {{ adapter.quote(\"BirthDate\") }} as staff_birth_date,\r\n        -- {{ adapter.quote(\"Location\") }} as staff_location,\r\n        -- {{ adapter.quote(\"Dept\") }} as staff_department,\r\n        -- {{ adapter.quote(\"GeographyID\") }},\r\n        -- {{ adapter.quote(\"StaffType_id\") }},\r\n        -- {{ adapter.quote(\"ULM\") }},\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [["sfa__staff_snapshot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["snapshot.mattoni_1873.sfa__staff_snapshot"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__staff_link_org_structure": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__staff_link_org_structure", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__staff_link_org_structure.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__staff_link_org_structure.sql", "unique_id": "model.mattoni_1873.stg_sfa__staff_link_org_structure", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__staff_link_org_structure"], "alias": "stg_sfa__staff_link_org_structure", "checksum": {"name": "sha256", "checksum": "d447efc7e24cbe40857b9e3003787ac023fd3aa51f4694a7a99f51d41ad82d7e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.7708073, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__staff_link_org_structure\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_StaffOrganizationalStructureLinksActive') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OrgStructureID\"]) }} as organizational_structure_id,\r\n        {{ adapter.quote(\"OrgStructureID\") }} as organizational_structure_key,\r\n        \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Staff_id\"]) }} as staff_id,\r\n        {{ adapter.quote(\"Staff_id\") }} as staff_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n     \r\n        {{ adapter.quote(\"StartDate\") }} as link_start_date,\r\n        {{ adapter.quote(\"EndDate\") }} as link_end_date,\r\n        {{ adapter.quote(\"IsMain\") }} as is_main,\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"RecordNumber\") }} as record_number,\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_StaffOrganizationalStructureLinksActive"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__survey_datamart": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__survey_datamart", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__survey_datamart.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__survey_datamart.sql", "unique_id": "model.mattoni_1873.stg_sfa__survey_datamart", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__survey_datamart"], "alias": "stg_sfa__survey_datamart", "checksum": {"name": "sha256", "checksum": "5aa7d9056de68ea59f370a5b092a8439d1122b825530b08e8bde05c1b5a54bc0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "ephemeral"}, "created_at": 1704704695.7848086, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\r\n\r\n\r\nwith source as (\r\n    select * from {{ source('sfa', 'cust_SurveyDataMart') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"ASMMonthOfVisit\") }},\r\n        {{ adapter.quote(\"ASMYearOfVisit\") }},\r\n        {{ adapter.quote(\"Ol_id\") }},\r\n        {{ adapter.quote(\"OutletExternalCode\") }},\r\n        {{ adapter.quote(\"OutletName\") }},\r\n        {{ adapter.quote(\"OutletAddress\") }},\r\n        {{ adapter.quote(\"ASMOlCardId\") }},\r\n        {{ adapter.quote(\"SROlCardId\") }},\r\n        {{ adapter.quote(\"ASMName\") }},\r\n        {{ adapter.quote(\"ASMStaffName\") }},\r\n        {{ adapter.quote(\"SRName\") }},\r\n        {{ adapter.quote(\"SRStaffName\") }},\r\n        {{ adapter.quote(\"ASMDate\") }},\r\n        {{ adapter.quote(\"SRDate\") }},\r\n        {{ adapter.quote(\"ASMLastVisitInMonth\") }},\r\n        {{ adapter.quote(\"UniqGroup\") }},\r\n        {{ adapter.quote(\"ASMDocument_ID\") }},\r\n        {{ adapter.quote(\"SRDocument_ID\") }},\r\n        {{ adapter.quote(\"QuestionExternalCodeRN\") }},\r\n        {{ adapter.quote(\"QKeyValue\") }},\r\n        {{ adapter.quote(\"OrderKey\") }},\r\n        {{ adapter.quote(\"QuestionExternalCode\") }},\r\n        {{ adapter.quote(\"Question\") }},\r\n        {{ adapter.quote(\"ASMResponse\") }},\r\n        {{ adapter.quote(\"SRResponse\") }},\r\n        {{ adapter.quote(\"MonthID\") }},\r\n        {{ adapter.quote(\"ASMCustId\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "cust_SurveyDataMart"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.cust_SurveyDataMart"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__visits": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__visits", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__visits.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__visits.sql", "unique_id": "model.mattoni_1873.stg_sfa__visits", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__visits"], "alias": "stg_sfa__visits", "checksum": {"name": "sha256", "checksum": "7d083095abf6635cc7fe92fbf4935caf80dbcc8eeca62957cf3c275260ad5cb5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.799807, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__visits\"", "raw_code": "with source as (\r\n    select * from {{ ref('sfa__visits_snapshot') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OlCard_id\"]) }} as visit_id,\r\n        {{ adapter.quote(\"OlCard_id\") }} as visit_key,\r\n      \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Ol_id\"]) }} as outlet_id,\r\n        {{ adapter.quote(\"Ol_id\") }} as outlet_key,\r\n        \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Merch_id\"]) }} as merchant_id,\r\n        {{ adapter.quote(\"Merch_id\") }} as merchant_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n         {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Reason_ID\"]) }} as inaccessibility_reason_id,\r\n        {{ adapter.quote(\"Reason_ID\") }} as inaccessibility_reason_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Route_id\"]) }} as route_id,\r\n        {{ adapter.quote(\"Route_id\") }} as route_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OrgStructureID\"]) }} as organizational_structure_id,\r\n        {{ adapter.quote(\"OrgStructureID\") }} as organizational_structure_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Cust_id\"]) }} as customer_id,\r\n        {{ adapter.quote(\"Cust_id\") }} as customer_key,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"Comments\") }} as visit_comment,\r\n        {{ adapter.quote(\"CompletionReasonTS\") }},\r\n        {{ adapter.quote(\"T1CommentTS\") }},\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"OlCardYear\") }} as visit_year,\r\n        {{ adapter.quote(\"OlCardMonth\") }} as visit_month,\r\n        {{ adapter.quote(\"OlCardWeek\") }} as visit_week,\r\n        {{ adapter.quote(\"DistributionCaptureMode\") }},\r\n        {{ adapter.quote(\"CommentsDestination\") }},\r\n        {{ adapter.quote(\"DistanceToOutlet\") }} as visit_start_distance,\r\n        {{ adapter.quote(\"DistanceToOutlet_End\") }} as visit_end_distance,\r\n        {{ adapter.quote(\"FacingCaptureMode\") }},\r\n        {{ adapter.quote(\"UserStepCount\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"Inaccessible\") }},\r\n        {{ adapter.quote(\"IsFromDDB\") }},\r\n        {{ adapter.quote(\"HasStartImage\") }},\r\n        {{ adapter.quote(\"HasEndImage\") }},\r\n        {{ adapter.quote(\"Incomplete\") }},\r\n        {{ adapter.quote(\"DocumentIsFilled\") }},\r\n        {{ adapter.quote(\"SyncWithDBF\") }},\r\n        {{ adapter.quote(\"SyncMainWithDBF\") }},\r\n        {{ adapter.quote(\"QuickOrder\") }} as is_quick_order,\r\n\r\n        ----------  timestamps\r\n        cast({{ adapter.quote(\"OlCardDate\") }} as date) as visit_date,\r\n        cast({{ adapter.quote(\"BeginTime\") }} as time(2)) as visit_start_time,\r\n        cast({{ adapter.quote(\"EndTime\") }} as time(2)) as visit_end_time,\r\n        {{ adapter.quote(\"VisitTimeSec\") }} as visit_duration_sec,\r\n        {{ adapter.quote(\"EndTimeChange\") }} as visit_end_time_edit,\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        dbt_valid_from as dbt_valid_from,\r\n        coalesce(\"dbt_valid_to\", cast('{{ var(\"future_proof_date\") }}' as datetime)) as dbt_valid_to\r\n\r\n        \r\n        ----------  omited\r\n        -- {{ adapter.quote(\"OLCardType\") }},\r\n        -- {{ adapter.quote(\"DelegatedOrgStructureID\") }},\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [["sfa__visits_snapshot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["snapshot.mattoni_1873.sfa__visits_snapshot"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__visit_activity_datamart": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__visit_activity_datamart", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__visit_activity_datamart.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__visit_activity_datamart.sql", "unique_id": "model.mattoni_1873.stg_sfa__visit_activity_datamart", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__visit_activity_datamart"], "alias": "stg_sfa__visit_activity_datamart", "checksum": {"name": "sha256", "checksum": "f19b0e8e93779106a021371611d435f98e7926b93843bc963c75b5257034a910"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "ephemeral"}, "created_at": 1704704695.8278172, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\r\n\r\n\r\nwith source as (\r\n    select * from {{ source('sfa', 'cust_VisitActivityDataMart') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"ORGName1\") }},\r\n        {{ adapter.quote(\"ORGCode1\") }},\r\n        {{ adapter.quote(\"ORGName2\") }},\r\n        {{ adapter.quote(\"ORGCode2\") }},\r\n        {{ adapter.quote(\"ORGName3\") }},\r\n        {{ adapter.quote(\"ORGCode3\") }},\r\n        {{ adapter.quote(\"ORGName4\") }},\r\n        {{ adapter.quote(\"ORGCode4\") }},\r\n        {{ adapter.quote(\"ORGName5\") }},\r\n        {{ adapter.quote(\"ORGCode5\") }},\r\n        {{ adapter.quote(\"ORGName6\") }},\r\n        {{ adapter.quote(\"ORGCode6\") }},\r\n        {{ adapter.quote(\"ORGName7\") }},\r\n        {{ adapter.quote(\"ORGCode7\") }},\r\n        {{ adapter.quote(\"SR_Staff\") }},\r\n        {{ adapter.quote(\"Outlet_SW_code\") }},\r\n        {{ adapter.quote(\"Outlet_ERP_Code\") }},\r\n        {{ adapter.quote(\"Outlet_Legal_Name\") }},\r\n        {{ adapter.quote(\"Outlet_Legal_Address\") }},\r\n        {{ adapter.quote(\"Outlet_Trading_Name\") }},\r\n        {{ adapter.quote(\"Outlet_Delivery_Address\") }},\r\n        {{ adapter.quote(\"Outlet_Status\") }},\r\n        {{ adapter.quote(\"Outlet_Network\") }},\r\n        {{ adapter.quote(\"Outlet_Sub_Type\") }},\r\n        {{ adapter.quote(\"Outlet_Type\") }},\r\n        {{ adapter.quote(\"Outlet_Group\") }},\r\n        {{ adapter.quote(\"Start_WD_time\") }},\r\n        {{ adapter.quote(\"Start_WD_GPS\") }},\r\n        {{ adapter.quote(\"End_WD_time\") }},\r\n        {{ adapter.quote(\"End_WD_GPS\") }},\r\n        {{ adapter.quote(\"Route_Name\") }},\r\n        {{ adapter.quote(\"Route_Start_date\") }},\r\n        {{ adapter.quote(\"Route_End_date\") }},\r\n        {{ adapter.quote(\"Visit_ID\") }},\r\n        {{ adapter.quote(\"Visit_commentary\") }},\r\n        {{ adapter.quote(\"Visit_date\") }},\r\n        {{ adapter.quote(\"Visit_week\") }},\r\n        {{ adapter.quote(\"Visit_month\") }},\r\n        {{ adapter.quote(\"Visit_type\") }},\r\n        {{ adapter.quote(\"Visit_quick_order\") }},\r\n        {{ adapter.quote(\"Visit_reason_of_unavailability\") }},\r\n        {{ adapter.quote(\"Visit_Plan\") }},\r\n        {{ adapter.quote(\"Visit_Fact_in_route\") }},\r\n        {{ adapter.quote(\"Visit_Fact\") }},\r\n        {{ adapter.quote(\"Productive_visit\") }},\r\n        {{ adapter.quote(\"Visit_start_time\") }},\r\n        {{ adapter.quote(\"Visit_end_time\") }},\r\n        {{ adapter.quote(\"Visit_duration_min\") }},\r\n        {{ adapter.quote(\"Visit_travel_time_min\") }},\r\n        {{ adapter.quote(\"POS_Equipment_activity_time\") }},\r\n        {{ adapter.quote(\"Inventoryzation_activity_time\") }},\r\n        {{ adapter.quote(\"Surveys_activity_time\") }},\r\n        {{ adapter.quote(\"GPS_coordinates_of_the_visit_start\") }},\r\n        {{ adapter.quote(\"GPS_deviation_of_coordinates_of_the_visit_start_m\") }},\r\n        {{ adapter.quote(\"GPS_coordinates_of_the_visit_end\") }},\r\n        {{ adapter.quote(\"GPS_deviation_of_coordinates_of_the_visit_end_m\") }},\r\n        {{ adapter.quote(\"OrgStructureID\") }},\r\n        {{ adapter.quote(\"Cust_id\") }},\r\n        {{ adapter.quote(\"MonthID\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "cust_VisitActivityDataMart"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.cust_VisitActivityDataMart"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__visit_gps": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__visit_gps", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__visit_gps.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__visit_gps.sql", "unique_id": "model.mattoni_1873.stg_sfa__visit_gps", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__visit_gps"], "alias": "stg_sfa__visit_gps", "checksum": {"name": "sha256", "checksum": "641f00dad5a5f781d286600334cad4f009dd7ed5b4303ce3ff9f7a11a5e3d169"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.8508084, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__visit_gps\"", "raw_code": "with source as (\r\n    select * from {{ source('sfa', 'dbo_OutletCardGPS_v') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OLCard_id\"]) }} as visit_id,\r\n        {{ adapter.quote(\"OLCard_id\") }} as visit_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n        ----------  strings\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Latitude\") }} as visit_start_latitude,\r\n        {{ adapter.quote(\"Longitude\") }} as visit_start_longtitude,\r\n        {{ adapter.quote(\"FinishLatitude\") }} as visit_finish_latitude,\r\n        {{ adapter.quote(\"FinishLongitude\") }} as visit_finish_longtitude,\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"isFake\") }} as is_fake_gps,\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm\r\n        -- {{ adapter.quote(\"Valid_From\") }} as valid_from,\r\n        -- {{ adapter.quote(\"Valid_To\") }} as valid_to\r\n\r\n        ----------  omited\r\n        \r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutletCardGPS_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_OutletCardGPS_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__visit_inaccessibility_reasons": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__visit_inaccessibility_reasons", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__visit_inaccessibility_reasons.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__visit_inaccessibility_reasons.sql", "unique_id": "model.mattoni_1873.stg_sfa__visit_inaccessibility_reasons", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__visit_inaccessibility_reasons"], "alias": "stg_sfa__visit_inaccessibility_reasons", "checksum": {"name": "sha256", "checksum": "7316db969c0746cca627e10db810d966602a83fc1fcaa9057979e49da71ff410"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model transforms the source table `sfa__visit_inaccessibility_reasons_snapshot` with various transformations.", "columns": {"dbt_scd_id": {"name": "dbt_scd_id", "description": "The system-generated surrogate key during snapshot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inaccessibility_reason_id": {"name": "inaccessibility_reason_id", "description": "Identifier for the inaccessibility reason.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inaccessibility_reason_external_code": {"name": "inaccessibility_reason_external_code", "description": "External code related to the inaccessibility reason.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "The numerical ID associated with the country code, generated using the macro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inaccessibility_reason": {"name": "inaccessibility_reason", "description": "Description of the inaccessibility reason.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "The original country code from the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status indicator. `2` or `9` to be discovered what it means in real life.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ulm": {"name": "ulm", "description": "user_id, which made last modification to this entry", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dlm": {"name": "dlm", "description": "Date of last modification", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "Start of the validity period for this record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "End of the validity period for this record, defaults to a future-proof date if not provided in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\staging\\soft_serve\\_staging_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.5958242, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__visit_inaccessibility_reasons\"", "raw_code": "with source as (\r\n    select * from {{ ref('sfa__visit_inaccessibility_reasons_snapshot') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        ----------  ids\r\n        {{ adapter.quote(\"dbt_scd_id\") }} as dbt_scd_id,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Reason_id\"]) }} as inaccessibility_reason_id,       \r\n        {{ adapter.quote(\"Reason_id\") }} as inaccessibility_reason_key,\r\n\r\n        {{ adapter.quote(\"ExternalCode\") }} as inaccessibility_reason_external_code,\r\n            \r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"Reason\") }} as inaccessibility_reason,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Status\") }} as status,\r\n        {{ adapter.quote(\"ULM\") }} as ulm,\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"dbt_valid_from\") }} as dbt_valid_from,\r\n        coalesce(\"dbt_valid_to\", cast('{{ var(\"future_proof_date\") }}' as datetime2)) as dbt_valid_to\r\n\r\n        ----------  omited\r\n        --{{ adapter.quote(\"IsLegal\") }},\r\n\r\n\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [["sfa__visit_inaccessibility_reasons_snapshot"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["snapshot.mattoni_1873.sfa__visit_inaccessibility_reasons_snapshot"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__visit_kpi_datamart": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__visit_kpi_datamart", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__visit_kpi_datamart.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__visit_kpi_datamart.sql", "unique_id": "model.mattoni_1873.stg_sfa__visit_kpi_datamart", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__visit_kpi_datamart"], "alias": "stg_sfa__visit_kpi_datamart", "checksum": {"name": "sha256", "checksum": "3ff1dabcab8bb3ed3b056e6dd23cc38d05ebfc3ba73da37e1533d6633277a752"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "ephemeral"}, "created_at": 1704704695.8748062, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\r\n\r\nwith source as (\r\n      select * from {{ source('sfa', 'cust_VisitKPIDataMart') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"VisitDate\") }},\r\n        {{ adapter.quote(\"Month\") }},\r\n        {{ adapter.quote(\"IsLastVisit\") }},\r\n        {{ adapter.quote(\"ClosedMonth\") }},\r\n        {{ adapter.quote(\"OlCard_id\") }},\r\n        {{ adapter.quote(\"Country\") }},\r\n        {{ adapter.quote(\"City\") }},\r\n        {{ adapter.quote(\"Area\") }},\r\n        {{ adapter.quote(\"Supervisor\") }},\r\n        {{ adapter.quote(\"ASM\") }},\r\n        {{ adapter.quote(\"SR\") }},\r\n        {{ adapter.quote(\"OutletGroups\") }},\r\n        {{ adapter.quote(\"OutletTypes\") }},\r\n        {{ adapter.quote(\"OLSubTypeName\") }},\r\n        {{ adapter.quote(\"Network\") }},\r\n        {{ adapter.quote(\"AtrernativeOutletClassification\") }},\r\n        {{ adapter.quote(\"OL_id\") }},\r\n        {{ adapter.quote(\"OLCode\") }},\r\n        {{ adapter.quote(\"OLName\") }},\r\n        {{ adapter.quote(\"OLAddress\") }},\r\n        {{ adapter.quote(\"Payer\") }},\r\n        {{ adapter.quote(\"VisitCycle\") }},\r\n        {{ adapter.quote(\"VisitDays\") }},\r\n        {{ adapter.quote(\"VisitFrequency\") }},\r\n        {{ adapter.quote(\"SGR\") }},\r\n        {{ adapter.quote(\"PricelistID\") }},\r\n        {{ adapter.quote(\"Listing\") }},\r\n        {{ adapter.quote(\"delinst\") }},\r\n        {{ adapter.quote(\"AdditionalName\") }},\r\n        {{ adapter.quote(\"VersionId\") }},\r\n        {{ adapter.quote(\"KpiId\") }},\r\n        {{ adapter.quote(\"KName0\") }},\r\n        {{ adapter.quote(\"KName1\") }},\r\n        {{ adapter.quote(\"KName2\") }},\r\n        {{ adapter.quote(\"KName3\") }},\r\n        {{ adapter.quote(\"KName4\") }},\r\n        {{ adapter.quote(\"KName5\") }},\r\n        {{ adapter.quote(\"KPISPTT\") }},\r\n        {{ adapter.quote(\"KPICalcStatus\") }},\r\n        {{ adapter.quote(\"KTypeName\") }},\r\n        {{ adapter.quote(\"KLevel\") }},\r\n        {{ adapter.quote(\"KExternalCode\") }},\r\n        {{ adapter.quote(\"KNameALL\") }},\r\n        {{ adapter.quote(\"Actual\") }},\r\n        {{ adapter.quote(\"TargetKPI\") }},\r\n        {{ adapter.quote(\"TargetSP\") }},\r\n        {{ adapter.quote(\"MonthID\") }},\r\n        {{ adapter.quote(\"Cust_id\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "cust_VisitKPIDataMart"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.cust_VisitKPIDataMart"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__visit_startendimages": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__visit_startendimages", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__visit_startendimages.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__visit_startendimages.sql", "unique_id": "model.mattoni_1873.stg_sfa__visit_startendimages", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__visit_startendimages"], "alias": "stg_sfa__visit_startendimages", "checksum": {"name": "sha256", "checksum": "7d816833e351cbb8043df303f80e9a2252fdc3633e54db87925b50c8d9e54f90"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.8948123, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__visit_startendimages\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_OutletCardStartEndImages') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"OLCard_ID\") }},\r\n        {{ adapter.quote(\"ImageID\") }},\r\n        {{ adapter.quote(\"ImageName\") }},\r\n        {{ adapter.quote(\"Image\") }},\r\n        {{ adapter.quote(\"IsStartImage\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"PhotoTypeId\") }},\r\n        {{ adapter.quote(\"Comment\") }},\r\n        {{ adapter.quote(\"IsChecked\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutletCardStartEndImages"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_OutletCardStartEndImages"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__visit_steps": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__visit_steps", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__visit_steps.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__visit_steps.sql", "unique_id": "model.mattoni_1873.stg_sfa__visit_steps", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__visit_steps"], "alias": "stg_sfa__visit_steps", "checksum": {"name": "sha256", "checksum": "f3c4fd320d3bb7d0191e0a7ab0eb1a8b9bbc1a31514249adc6ffdedce0108119"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.9048085, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__visit_steps\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_OutletCardSteps') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"OlCard_Id\") }},\r\n        {{ adapter.quote(\"Step_No\") }},\r\n        {{ adapter.quote(\"Step_ID\") }},\r\n        {{ adapter.quote(\"Step_Detail\") }},\r\n        {{ adapter.quote(\"Step_Begin_DateTime\") }},\r\n        {{ adapter.quote(\"Step_End_DateTime\") }},\r\n        {{ adapter.quote(\"Valid_From\") }},\r\n        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutletCardSteps"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_OutletCardSteps"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__warehouses": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__warehouses", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\stg_sfa__warehouses.sql", "original_file_path": "models\\staging\\soft_serve\\stg_sfa__warehouses.sql", "unique_id": "model.mattoni_1873.stg_sfa__warehouses", "fqn": ["mattoni_1873", "staging", "soft_serve", "stg_sfa__warehouses"], "alias": "stg_sfa__warehouses", "checksum": {"name": "sha256", "checksum": "bd8f2bbe13cac4e5e4290ccc61968f3de653f26aa9243b27eec6fcc1be3cea09"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.9128077, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__warehouses\"", "raw_code": "with source as (\r\n    select * from {{ source('sfa', 'dbo_Warehouses') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n    \r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"W_id\", \"Valid_From\"]) }} as _id,\r\n        {{ adapter.quote(\"W_id\") }} as warehouse_id,\r\n        {{ adapter.quote(\"WType_id\") }} as warehouse_type_id,\r\n        {{ adapter.quote(\"Cust_id\") }} as customer_id,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"W_ExternalCode\") }} as warehouse_external_code,\r\n        {{ adapter.quote(\"W_ShortName\") }} as warehouse_short_name,\r\n        {{ adapter.quote(\"W_LongName\") }} as warehouse_long_name,\r\n        {{ adapter.quote(\"Address\") }} as warehouse_address,\r\n        {{ adapter.quote(\"Email\") }} as warehouse_email,\r\n\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"DeliveryDelay\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"ULM\") }},\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"StockAccounting\") }},\r\n        {{ adapter.quote(\"StockManagement\") }},\r\n        {{ adapter.quote(\"StockOrder\") }},\r\n        {{ adapter.quote(\"LotAccounting\") }},\r\n        {{ adapter.quote(\"StockNegative\") }},\r\n        {{ adapter.quote(\"CountHolidaysForDelivery\") }},\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"StartingStockDate\") }},\r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Valid_From\") }} as valid_from,\r\n        {{ adapter.quote(\"Valid_To\") }} as valid_to\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"Priority\") }},\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Warehouses"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_Warehouses"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__files_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__files_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__files_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__files_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__files_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__files_v"], "alias": "stg_sfa__files_v", "checksum": {"name": "sha256", "checksum": "04958f3f1cd809f967c2c2f6ac094283dcc89b3afd7ce9fa6412f1409bad0371"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.9268079, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__files_v\"", "raw_code": "with\r\nsource as (select * from {{ source(\"sfa\", \"dbo_ContentFiles_v\") }}),\r\n\r\nrenamed as (\r\n    select\r\n    \r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"ContentFileID\"]) }} as content_file_id,\r\n        {{ adapter.quote(\"ContentFileID\") }} as content_file_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"ContentID\"]) }} as sfa_file_id,\r\n        {{ adapter.quote(\"ContentID\") }} as sfa_file_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"ContentFileName\") }} as sfa_file_name,\r\n        {{ adapter.quote(\"ContentFileUniqueName\") }} as sfa_file_name_unique ,\r\n        {{ adapter.quote(\"Hash\") }} as hash,\r\n        {{ adapter.quote(\"Comment\") }} as comment,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Status\") }} as status,\r\n        {{ adapter.quote(\"Size\") }} as size,\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"IsEdited\") }} as is_edited,\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"CreationDate\") }},\r\n        {{ adapter.quote(\"ReceivingResultDate\") }},\r\n        {{ adapter.quote(\"DLM\") }} as dlm\r\n        -- {{ adapter.quote(\"Valid_From\") }},\r\n        -- {{ adapter.quote(\"Valid_To\") }}\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"Activity_ID\") }},\r\n        -- {{ adapter.quote(\"PhotoTypeId\") }},\r\n        -- {{ adapter.quote(\"ULM\") }},\r\n\r\n    from source\r\n)\r\n\r\nselect *\r\nfrom renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ContentFiles_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_ContentFiles_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__kpi_execution_plans_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__kpi_execution_plans_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__kpi_execution_plans_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__kpi_execution_plans_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__kpi_execution_plans_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__kpi_execution_plans_v"], "alias": "stg_sfa__kpi_execution_plans_v", "checksum": {"name": "sha256", "checksum": "38aeb10a9e4f1c3fed3cf974de1e2d7ba3abc2aa40583ab2dde0a1dd9d8842e7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.9418094, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__kpi_execution_plans_v\"", "raw_code": "with source as (\r\n    select * from {{ source('sfa', 'ps_KPIExecutionPlan_v') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n    \r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"KpiId\"]) }} as kpi_id,\r\n        {{ adapter.quote(\"KpiId\") }} as kpi_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OL_ID\"]) }} as outlet_id,\r\n        {{ adapter.quote(\"OL_ID\") }} as outlet_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"KpiId\", \"OL_ID\"]) }} as kpi_outlet_id,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"PlanValue\") }} as plan_value,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Status\") }} as status,\r\n\r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DateFrom\") }} as date_from,\r\n        {{ adapter.quote(\"DateTo\") }} as date_to,\r\n        {{ adapter.quote(\"DLM\") }} as dlm\r\n    \r\n        ----------  omited\r\n\r\n--        {{ adapter.quote(\"Valid_From\") }},\r\n--        {{ adapter.quote(\"Valid_To\") }}\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "ps_KPIExecutionPlan_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.ps_KPIExecutionPlan_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__mobile_day_tracking_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__mobile_day_tracking_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__mobile_day_tracking_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__mobile_day_tracking_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__mobile_day_tracking_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__mobile_day_tracking_v"], "alias": "stg_sfa__mobile_day_tracking_v", "checksum": {"name": "sha256", "checksum": "5653f0a8439e37b5bda70a9f8275f6c87d9c3c190c86e1c002c65ee60718396e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.9578102, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__mobile_day_tracking_v\"", "raw_code": "with source as (\n      select * from {{ source('sfa', 'dbo_MobileModuleUserTimeTrack_v') }}\n),\nrenamed as (\n    select\n\n        ----------  ids\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"MobileModuleUserID\"]) }} as mobile_user_id,\n        {{ adapter.quote(\"MobileModuleUserID\") }} as mobile_user_key,\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\n\n        ----------  strings\n        {{ adapter.quote(\"StartLatitude\") }} as start_latitude,\n        {{ adapter.quote(\"StartLongitude\") }} as start_longitude,\n        {{ adapter.quote(\"EndLatitude\") }} as end_latitude,\n        {{ adapter.quote(\"EndLongitude\") }} as end_longitude,\n\n        ----------  numerics\n\n        ----------  booleans\n\n        ----------  timestamps\n        cast({{ adapter.quote(\"Date\") }} as date) as day_date,\n        cast({{ adapter.quote(\"StartTime\") }} as time(2)) as day_start_time,\n        cast({{ adapter.quote(\"EndTime\") }} as time(2)) as day_end_time\n\n        ----------  omited\n--        {{ adapter.quote(\"DLM\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_MobileModuleUserTimeTrack_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_MobileModuleUserTimeTrack_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__mobile_users_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__mobile_users_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__mobile_users_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__mobile_users_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__mobile_users_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__mobile_users_v"], "alias": "stg_sfa__mobile_users_v", "checksum": {"name": "sha256", "checksum": "1db08c273eeab611d8985cc09ff88d1d846e6569e822c3550211ea2707fbc369"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.9688115, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__mobile_users_v\"", "raw_code": "with source as (\n      select * from {{ source('sfa', 'dbo_MobileModuleUser_v') }}\n),\nrenamed as (\n    select\n\n        ----------  ids\n\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"MobileModuleUserID\"]) }} as mobile_user_id,\n        {{ adapter.quote(\"MobileModuleUserID\") }} as mobile_user_key,\n\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OrgStructureID\"]) }} as organizational_structure_id,\n        {{ adapter.quote(\"OrgStructureID\") }} as organizational_structure_key,\n\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\n        {{ adapter.quote(\"Country_Code\") }} as country_code\n\n\n        ----------  strings\n\n        ----------  numerics\n\n        ----------  booleans\n\n        ----------  timestamps\n    \n        ----------  omited\n--        {{ adapter.quote(\"DeviceSerialNumber\") }},\n--        {{ adapter.quote(\"MerchStatus\") }},\n--        {{ adapter.quote(\"OLCardMinValue\") }},\n--        {{ adapter.quote(\"OLCardCurrentValue\") }},\n--        {{ adapter.quote(\"OLCardMaxValue\") }},\n--        {{ adapter.quote(\"OrderNoMinValue\") }},\n--        {{ adapter.quote(\"OrderNoCurrentvalue\") }},\n--        {{ adapter.quote(\"OrderNoMaxValue\") }},\n--        {{ adapter.quote(\"OutletMinValue\") }},\n--        {{ adapter.quote(\"OutletCurrentValue\") }},\n--        {{ adapter.quote(\"OutletMaxValue\") }},\n--        {{ adapter.quote(\"RouteMinValue\") }},\n--        {{ adapter.quote(\"RouteCurrentValue\") }},\n--        {{ adapter.quote(\"RouteMaxValue\") }},\n--        {{ adapter.quote(\"TaxFactureNoCurrentValue\") }},\n--        {{ adapter.quote(\"Prefix\") }},\n--        {{ adapter.quote(\"MobileVersion\") }},\n--        {{ adapter.quote(\"DevOsVersion\") }},\n--        {{ adapter.quote(\"DevModelName\") }},\n--        {{ adapter.quote(\"SyncDate\") }},\n--        {{ adapter.quote(\"DLM\") }},\n--        {{ adapter.quote(\"Status\") }},\n--        {{ adapter.quote(\"ULM\") }},\n--        {{ adapter.quote(\"Cust_id\") }},\n--        {{ adapter.quote(\"PinCode\") }},\n--        {{ adapter.quote(\"Password\") }},\n--        {{ adapter.quote(\"PasswordValidTo\") }},\n--        {{ adapter.quote(\"ReportsDenyAccess\") }},\n--        {{ adapter.quote(\"MobileModuleUserProfileID\") }},\n--        {{ adapter.quote(\"ChangePassword\") }},\n--        {{ adapter.quote(\"UseCustNumber\") }},\n--        {{ adapter.quote(\"StartCustNumber\") }},\n--        {{ adapter.quote(\"LastFivePasswordsHistory\") }},\n--        {{ adapter.quote(\"WOrderRequestMinValue\") }},\n--        {{ adapter.quote(\"WOrderRequestMaxValue\") }},\n--        {{ adapter.quote(\"WOrderRequestCurrentValue\") }},\n--        {{ adapter.quote(\"DeviceFcmToken\") }},\n--        {{ adapter.quote(\"MMAllowedVersion\") }},\n--        {{ adapter.quote(\"SyncType\") }},\n--        {{ adapter.quote(\"ShardId\") }},\n--        {{ adapter.quote(\"SyncVersion\") }},\n--        {{ adapter.quote(\"CPU_Info\") }},\n--        {{ adapter.quote(\"Camera\") }},\n--        {{ adapter.quote(\"GPS_Type\") }},\n--        {{ adapter.quote(\"RAM\") }},\n--        {{ adapter.quote(\"ROM\") }},\n--        {{ adapter.quote(\"TypeDevice\") }},\n--        {{ adapter.quote(\"DisplaySize\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_MobileModuleUser_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_MobileModuleUser_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__organization_structures_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__organization_structures_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__organization_structures_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__organization_structures_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__organization_structures_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__organization_structures_v"], "alias": "stg_sfa__organization_structures_v", "checksum": {"name": "sha256", "checksum": "1442e89be70953a0481eebf752073a4fedf94c1482dba9c2516a50c3ee1943b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704695.9908235, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__organization_structures_v\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_OrganizationalStructure_v') }}\r\n),\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OrgStructureID\"]) }} as organizational_structure_id,\r\n        {{ adapter.quote(\"OrgStructureID\") }} as organizational_structure_key,\r\n        \r\n        {{ adapter.quote(\"ParentID\") }} as organizational_structure_parent_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"NodeId\"]) }} as structure_node_id,\r\n        {{ adapter.quote(\"NodeId\") }} as structure_node_key,\r\n        {{ adapter.quote(\"Level\") }}  as structure_node_level,\r\n        {{ adapter.quote(\"TreeNodeHierarchy\") }} as structure_node_tree_hierarchy,\r\n        {{ adapter.quote(\"OrgStructureCode\") }} as structure_code,\r\n        {{ adapter.quote(\"OrgStructureOldId\") }} as structure_old_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"Name\") }} as structure_name,\r\n        {{ adapter.quote(\"PhoneNumber\") }} as structure_telephone,\r\n        {{ adapter.quote(\"Email\") }} as structure_email,\r\n        {{ adapter.quote(\"FullName\") }} as structure_whole_node_tree,\r\n        {{ adapter.quote(\"AdditionalFullTextSearch\") }} as structure_name_detail,\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"BusinessRole\") }},\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"ResetPassword\") }},\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm\r\n        \r\n        ----------  omited\r\n        -- {{ adapter.quote(\"ULM\") }},\r\n        -- {{ adapter.quote(\"TaxCode\") }},\r\n        -- {{ adapter.quote(\"StaffType_id\") }},\r\n        -- {{ adapter.quote(\"OfficeID\") }},\r\n        -- {{ adapter.quote(\"ChildOrgStructureToUserTypeLinkRequired\") }},\r\n        -- {{ adapter.quote(\"ChildOrgStructureToActivityTypeLinkRequired\") }},\r\n        -- {{ adapter.quote(\"AT_ID\") }},\r\n\r\n\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OrganizationalStructure_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_OrganizationalStructure_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__outlets_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__outlets_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__outlets_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__outlets_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__outlets_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__outlets_v"], "alias": "stg_sfa__outlets_v", "checksum": {"name": "sha256", "checksum": "d9791821389a3601ecdf7aedf78966cac3129aff6eeb10f2738436d4389aaaa4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.0058112, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__outlets_v\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_OutLets_v') }}\r\n),\r\nrenamed as (\r\n    select\r\n\r\n\r\n        {{ adapter.quote(\"Status\") }},\r\n        {{ adapter.quote(\"OLCode\") }},\r\n        {{ adapter.quote(\"Proximity\") }},\r\n        {{ adapter.quote(\"Location\") }},\r\n        {{ adapter.quote(\"VisitFrequency\") }},\r\n        {{ adapter.quote(\"OL_Code\") }}  as outlet_sap_code,\r\n        {{ adapter.quote(\"BankCode\") }},\r\n        {{ adapter.quote(\"BankName\") }},\r\n        {{ adapter.quote(\"BankAddress\") }},\r\n        {{ adapter.quote(\"ContractNumber\") }},\r\n        {{ adapter.quote(\"ContractDate\") }},\r\n        {{ adapter.quote(\"CreationDate\") }},\r\n        {{ adapter.quote(\"Cust_id\") }},\r\n        {{ adapter.quote(\"CPCode\") }},\r\n        {{ adapter.quote(\"DC_Allow\") }},\r\n        {{ adapter.quote(\"OLDistributionCentre\") }},\r\n        {{ adapter.quote(\"OlDistributionShare\") }},\r\n        {{ adapter.quote(\"DC_Delivery\") }},\r\n        {{ adapter.quote(\"DC_Payer\") }},\r\n        {{ adapter.quote(\"LicenseUsage\") }},\r\n        {{ adapter.quote(\"Appartments\") }},\r\n        {{ adapter.quote(\"KLADR_ID\") }},\r\n        {{ adapter.quote(\"ContractDateFinish\") }},\r\n        {{ adapter.quote(\"ULM\") }},\r\n        {{ adapter.quote(\"SaleType\") }},\r\n        {{ adapter.quote(\"DeliveryDelay\") }},\r\n        {{ adapter.quote(\"DeactivateDate\") }},\r\n        {{ adapter.quote(\"InactivationCandidate\") }},\r\n\r\n        {{ adapter.quote(\"PrevOL_Code\") }},\r\n        {{ adapter.quote(\"PostalCode\") }},\r\n        {{ adapter.quote(\"KOATUU\") }},\r\n        {{ adapter.quote(\"OutletParsingAddressId\") }},\r\n        {{ adapter.quote(\"ReturnOrderOnly\") }},\r\n\r\n        ----------  ids\r\n        \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OL_id\"]) }} as outlet_id,\r\n        {{ adapter.quote(\"OL_id\") }} as outlet_key,\r\n\r\n        {{ adapter.quote(\"OLSubType_id\") }} as outlet_subtype_id,\r\n        {{ adapter.quote(\"Area_id\") }} as area_id,\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Network_ID\") }} as network_id,\r\n        {{ adapter.quote(\"VisitRate_id\") }} as visit_rate_id,\r\n        {{ adapter.quote(\"Owner_id\") }} as owner_id,\r\n        {{ adapter.quote(\"ParentComp_id\") }} as parent_company_id,\r\n        {{ adapter.quote(\"Cust_id\") }} as customer_id,\r\n        {{ adapter.quote(\"AT_ID\") }} as at_id,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OrgStructureID\"]) }} as organizational_structure_id,\r\n        {{ adapter.quote(\"OrgStructureID\") }} as organizational_structure_key,\r\n\r\n        {{ adapter.quote(\"GeographyID\") }} as geography_id,\r\n        {{ adapter.quote(\"ExternalFormat_ID\") }} as external_format_id,\r\n        {{ adapter.quote(\"HouseId\") }} as house_id,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"OLName\") }} as outlet_name,\r\n        {{ adapter.quote(\"OLTradingName\") }} as outlet_trading_name,\r\n        {{ adapter.quote(\"OLDirector\") }} as outlet_director,\r\n        {{ adapter.quote(\"OLAddress\") }} as outlet_adress,\r\n        {{ adapter.quote(\"OLDeliveryAddress\") }} as outlet_delivery_adress,\r\n        {{ adapter.quote(\"OLTelephone\") }} as outlet_telephone,\r\n        {{ adapter.quote(\"OLFax\") }} as outlet_fax,\r\n        {{ adapter.quote(\"OLEMail\") }} as outlet_email,\r\n        {{ adapter.quote(\"OLAccountant\") }} as outlet_accountant,\r\n        {{ adapter.quote(\"OLAccountantPhone\") }} as outlet_accountant_phone,\r\n        {{ adapter.quote(\"OLMarkManager\") }} as outlet_marketing,\r\n        {{ adapter.quote(\"OLMarkManagerPhone\") }} as outlet_marketing_phone,\r\n        {{ adapter.quote(\"OLPurchManager\") }} as outlet_purchasing,\r\n        {{ adapter.quote(\"ZKPO\") }},\r\n        {{ adapter.quote(\"IPN\") }},\r\n        {{ adapter.quote(\"VATN\") }},\r\n        {{ adapter.quote(\"Block\") }},\r\n        {{ adapter.quote(\"BlockLetter\") }},\r\n        {{ adapter.quote(\"HouseLetter\") }},\r\n        {{ adapter.quote(\"Place\") }},\r\n        {{ adapter.quote(\"Comment\") }} as outlet_comment,\r\n        {{ adapter.quote(\"CloseReason\") }},\r\n\r\n\r\n        ----------  numerics\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"HasCoordinates\") }} as has_coordinates,\r\n\r\n\r\n        ----------  timestamps\r\n        {{ adapter.quote(\"DLM\") }} as dlm\r\n        \r\n        ----------  omited\r\n        -- {{ adapter.quote(\"OLOpenTime\") }},\r\n        -- {{ adapter.quote(\"OLCloseTime\") }},\r\n        -- {{ adapter.quote(\"OLBreakTimeFrom\") }},\r\n        -- {{ adapter.quote(\"OLBreakTimeTo\") }},\r\n        -- {{ adapter.quote(\"RR\") }},\r\n        -- {{ adapter.quote(\"OLSize\") }},\r\n        -- {{ adapter.quote(\"OLWHSize\") }},\r\n        -- {{ adapter.quote(\"OLStockCoverDays\") }},\r\n        -- {{ adapter.quote(\"CashFlow_id\") }},\r\n\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutLets_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_OutLets_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__outlet_custom_fields_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__outlet_custom_fields_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__outlet_custom_fields_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__outlet_custom_fields_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__outlet_custom_fields_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__outlet_custom_fields_v"], "alias": "stg_sfa__outlet_custom_fields_v", "checksum": {"name": "sha256", "checksum": "d2286b2086a7c26f6e5e0025c8fc6e4d2dd5b454517cc50a97f3aa498f847156"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.0368106, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__outlet_custom_fields_v\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_OutLetsCustomField_v') }}\r\n),\r\nrenamed as (\r\n    select\r\n        {{ adapter.quote(\"Country_Code\") }},\r\n        {{ adapter.quote(\"CustomKey\") }},\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"CustomKey\"]) }} as outlet_id,\r\n        {{ adapter.quote(\"FI1\") }},\r\n        {{ adapter.quote(\"FI2\") }},\r\n        {{ adapter.quote(\"FI3\") }},\r\n        {{ adapter.quote(\"FI4\") }},\r\n        {{ adapter.quote(\"FI5\") }},\r\n        {{ adapter.quote(\"FI6\") }},\r\n        {{ adapter.quote(\"FI7\") }},\r\n        {{ adapter.quote(\"FI8\") }},\r\n        {{ adapter.quote(\"FI9\") }},\r\n        {{ adapter.quote(\"FI10\") }},\r\n        {{ adapter.quote(\"FI11\") }},\r\n        {{ adapter.quote(\"FI12\") }},\r\n        {{ adapter.quote(\"FI13\") }},\r\n        {{ adapter.quote(\"FI14\") }},\r\n        {{ adapter.quote(\"FI15\") }},\r\n        {{ adapter.quote(\"FI16\") }},\r\n        {{ adapter.quote(\"FI17\") }},\r\n        {{ adapter.quote(\"FI18\") }},\r\n        {{ adapter.quote(\"FI19\") }},\r\n        {{ adapter.quote(\"FI20\") }},\r\n        {{ adapter.quote(\"FI21\") }},\r\n        {{ adapter.quote(\"FI22\") }},\r\n        {{ adapter.quote(\"FI23\") }},\r\n        {{ adapter.quote(\"FI24\") }},\r\n        {{ adapter.quote(\"FI25\") }},\r\n        {{ adapter.quote(\"FI26\") }},\r\n        {{ adapter.quote(\"FI27\") }},\r\n        {{ adapter.quote(\"FI28\") }},\r\n        {{ adapter.quote(\"FI29\") }},\r\n        {{ adapter.quote(\"FI30\") }},\r\n        {{ adapter.quote(\"FI31\") }},\r\n        {{ adapter.quote(\"FI32\") }},\r\n        {{ adapter.quote(\"FI33\") }},\r\n        {{ adapter.quote(\"FI34\") }},\r\n        {{ adapter.quote(\"FI35\") }},\r\n        {{ adapter.quote(\"FI36\") }},\r\n        {{ adapter.quote(\"FI37\") }},\r\n        {{ adapter.quote(\"FI38\") }},\r\n        {{ adapter.quote(\"FI39\") }},\r\n        {{ adapter.quote(\"FI40\") }},\r\n        {{ adapter.quote(\"FS1\") }} as sortiment_type,\r\n        {{ adapter.quote(\"FS2\") }} as visit_cycle,\r\n        {{ adapter.quote(\"FS3\") }} as visit_frequency,\r\n        {{ adapter.quote(\"FS4\") }} as visit_days,\r\n        {{ adapter.quote(\"FS5\") }} as pricelist_id,\r\n        {{ adapter.quote(\"FS6\") }} as listing,\r\n        {{ adapter.quote(\"FS7\") }} as delinst,\r\n        {{ adapter.quote(\"FS8\") }} as additional_name,\r\n        {{ adapter.quote(\"FS9\") }} as sgr,\r\n        {{ adapter.quote(\"FS10\") }} as payer,\r\n        {{ adapter.quote(\"FS11\") }},\r\n        {{ adapter.quote(\"FS12\") }},\r\n        {{ adapter.quote(\"FS13\") }},\r\n        {{ adapter.quote(\"FS14\") }},\r\n        {{ adapter.quote(\"FS15\") }},\r\n        {{ adapter.quote(\"FS16\") }},\r\n        {{ adapter.quote(\"FS17\") }},\r\n        {{ adapter.quote(\"FS18\") }},\r\n        {{ adapter.quote(\"FS19\") }},\r\n        {{ adapter.quote(\"FS20\") }},\r\n        {{ adapter.quote(\"FB1\") }},\r\n        {{ adapter.quote(\"FB2\") }},\r\n        {{ adapter.quote(\"FB3\") }},\r\n        {{ adapter.quote(\"FB4\") }},\r\n        {{ adapter.quote(\"FB5\") }},\r\n        {{ adapter.quote(\"FB6\") }},\r\n        {{ adapter.quote(\"FB7\") }},\r\n        {{ adapter.quote(\"FB8\") }},\r\n        {{ adapter.quote(\"FB9\") }},\r\n        {{ adapter.quote(\"FB10\") }},\r\n        {{ adapter.quote(\"FB11\") }},\r\n        {{ adapter.quote(\"FB12\") }},\r\n        {{ adapter.quote(\"FB13\") }},\r\n        {{ adapter.quote(\"FB14\") }},\r\n        {{ adapter.quote(\"FB15\") }},\r\n        {{ adapter.quote(\"FB16\") }},\r\n        {{ adapter.quote(\"FB17\") }},\r\n        {{ adapter.quote(\"FB18\") }},\r\n        {{ adapter.quote(\"FB19\") }},\r\n        {{ adapter.quote(\"FB20\") }},\r\n        {{ adapter.quote(\"FD1\") }},\r\n        {{ adapter.quote(\"FD2\") }},\r\n        {{ adapter.quote(\"FD3\") }},\r\n        {{ adapter.quote(\"FD4\") }},\r\n        {{ adapter.quote(\"FD5\") }},\r\n        {{ adapter.quote(\"FD6\") }},\r\n        {{ adapter.quote(\"FD7\") }},\r\n        {{ adapter.quote(\"FD8\") }},\r\n        {{ adapter.quote(\"FD9\") }},\r\n        {{ adapter.quote(\"FD10\") }},\r\n        {{ adapter.quote(\"FD11\") }},\r\n        {{ adapter.quote(\"FD12\") }},\r\n        {{ adapter.quote(\"FD13\") }},\r\n        {{ adapter.quote(\"FD14\") }},\r\n        {{ adapter.quote(\"FD15\") }},\r\n        {{ adapter.quote(\"FD16\") }},\r\n        {{ adapter.quote(\"FD17\") }},\r\n        {{ adapter.quote(\"FD18\") }},\r\n        {{ adapter.quote(\"FD19\") }},\r\n        {{ adapter.quote(\"FD20\") }},\r\n        {{ adapter.quote(\"FN1\") }},\r\n        {{ adapter.quote(\"FN2\") }},\r\n        {{ adapter.quote(\"FN3\") }},\r\n        {{ adapter.quote(\"FN4\") }},\r\n        {{ adapter.quote(\"FN5\") }},\r\n        {{ adapter.quote(\"FN6\") }},\r\n        {{ adapter.quote(\"FN7\") }},\r\n        {{ adapter.quote(\"FN8\") }},\r\n        {{ adapter.quote(\"FN9\") }},\r\n        {{ adapter.quote(\"FN10\") }},\r\n        {{ adapter.quote(\"FN11\") }},\r\n        {{ adapter.quote(\"FN12\") }},\r\n        {{ adapter.quote(\"FN13\") }},\r\n        {{ adapter.quote(\"FN14\") }},\r\n        {{ adapter.quote(\"FN15\") }},\r\n        {{ adapter.quote(\"FN16\") }},\r\n        {{ adapter.quote(\"FN17\") }},\r\n        {{ adapter.quote(\"FN18\") }},\r\n        {{ adapter.quote(\"FN19\") }},\r\n        {{ adapter.quote(\"FN20\") }}\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutLetsCustomField_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["source.mattoni_1873.sfa.dbo_OutLetsCustomField_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__outlet_distributions_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__outlet_distributions_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__outlet_distributions_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__outlet_distributions_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__outlet_distributions_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__outlet_distributions_v"], "alias": "stg_sfa__outlet_distributions_v", "checksum": {"name": "sha256", "checksum": "89790d055229a0115fd6d7c8e2b2a443c73a39eb5bef88163d9934f27c36957a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.0748136, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__outlet_distributions_v\"", "raw_code": "with source as (\r\n    select * from {{ source('sfa', 'dbo_OutletDistribution_v') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OLCard_ID\", \"Product_id\"]) }} as distribution_id,\r\n        \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OLCard_ID\"]) }} as visit_id,\r\n        {{ adapter.quote(\"OLCard_ID\") }} as visit_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Product_id\"]) }} as product_id,\r\n        {{ adapter.quote(\"Product_id\") }} as product_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        ----------  strings\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"Price\") }} as price,\r\n        ----------  booleans\r\n        case\r\n            when {{ adapter.quote(\"IsPresent\") }} = '1' then 1\r\n            else 0\r\n        end as is_present,\r\n        {{ adapter.quote(\"IsSetup\") }} as is_setup\r\n\r\n        ----------  timestamps\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"OutOfStockReason\") }},        \r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutletDistribution_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_OutletDistribution_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__products_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__products_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__products_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__products_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__products_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__products_v"], "alias": "stg_sfa__products_v", "checksum": {"name": "sha256", "checksum": "526b598c25b502c58f4e6b9f542a4acf5522b76322ee344cacebbf9bab9601ae"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.0878122, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__products_v\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_Products_v') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n       \r\n        {{ adapter.quote(\"DLM\") }},\r\n        {{ adapter.quote(\"Price\") }},\r\n        {{ adapter.quote(\"IsMix\") }},\r\n        {{ adapter.quote(\"IsTare\") }},\r\n        {{ adapter.quote(\"Tare_Id\") }},\r\n        {{ adapter.quote(\"TarePack_Qty\") }},\r\n        {{ adapter.quote(\"IsReturnable\") }},\r\n        {{ adapter.quote(\"IsConcurrent\") }},\r\n        {{ adapter.quote(\"ProductVolume\") }},\r\n        {{ adapter.quote(\"IsProductWeight\") }},\r\n        {{ adapter.quote(\"CertificateNo\") }},\r\n        {{ adapter.quote(\"CertificateBeginDate\") }},\r\n        {{ adapter.quote(\"CertificateEndDate\") }},\r\n        {{ adapter.quote(\"HLCode\") }},\r\n        {{ adapter.quote(\"IsBonuse\") }},\r\n        {{ adapter.quote(\"LicenseType_ID\") }},\r\n        {{ adapter.quote(\"ProductBrand_ID\") }},\r\n        {{ adapter.quote(\"Delisted\") }},\r\n        {{ adapter.quote(\"Quant_Qty\") }},\r\n        {{ adapter.quote(\"ProductCode2\") }},\r\n        {{ adapter.quote(\"SyncToDDB\") }},\r\n        {{ adapter.quote(\"ServiceBit\") }},\r\n        {{ adapter.quote(\"IsPromotional\") }},\r\n        {{ adapter.quote(\"IsLinkedToAllCustomers\") }},\r\n        {{ adapter.quote(\"FrontWidth\") }},\r\n        {{ adapter.quote(\"FrontHeight\") }},\r\n        {{ adapter.quote(\"HasActiveContentFile\") }},\r\n        {{ adapter.quote(\"IsSeasonal\") }},\r\n        {{ adapter.quote(\"IsBaseProduct\") }},\r\n        {{ adapter.quote(\"ForRecognition\") }},\r\n        {{ adapter.quote(\"IsExchangeBottle\") }},\r\n\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Product_Id\"]) }} as product_id,\r\n        {{ adapter.quote(\"Product_Id\") }} as product_key,\r\n\r\n        {{ adapter.quote(\"ProductCode\") }} as product_sap_code,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"ProductType_Id\"]) }} as product_type_id,\r\n        {{ adapter.quote(\"ProductType_Id\") }} as product_type_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Unit_Id\"]) }} as product_unit_id,\r\n        {{ adapter.quote(\"Unit_Id\") }} as product_unit_key,\r\n\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"ProductName\") }} as product_name,\r\n        {{ adapter.quote(\"ProductShortName\") }} as product_name_short,\r\n        {{ adapter.quote(\"EANCode\") }} as ean_code,\r\n\r\n        ----------  numerics\r\n  \r\n        {{ adapter.quote(\"UnitWeight\") }} as unit_weight,\r\n        {{ adapter.quote(\"Package_QTY\") }} as package_quantity,\r\n        {{ adapter.quote(\"SortOrder\") }} as sort_order,\r\n        {{ adapter.quote(\"Status\") }} as status,\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"IsPosm\") }} as is_pos_material\r\n        ----------  timestamps\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"ULM\") }}\r\n\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Products_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_Products_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__questionnaire_response_images_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__questionnaire_response_images_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__questionnaire_response_images_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__questionnaire_response_images_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__questionnaire_response_images_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__questionnaire_response_images_v"], "alias": "stg_sfa__questionnaire_response_images_v", "checksum": {"name": "sha256", "checksum": "8fd6dbd73e56f4eb8a5f1ed0d103491f5e09bf50292dfc1c582571a629e1ea52"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.110815, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__questionnaire_response_images_v\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_ResponsesSingleContentD_v') }}\r\n),\r\nrenamed as (\r\n    select\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"ContentID\"]) }} as sfa_file_id,\r\n        {{ adapter.quote(\"ContentID\") }} as sfa_file_key,\r\n    \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Response_ID\", \"Object_ID\"]) }} as image_id,\r\n\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Response_ID\"]) }} as questionnaire_response_id,\r\n        {{ adapter.quote(\"Response_ID\") }} as questionnaire_response_key,\r\n    \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Object_ID\"]) }} as question_id,\r\n        {{ adapter.quote(\"Object_ID\") }} as question_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        ----------  strings\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"StepNumber\") }} as step\r\n        \r\n        ----------  booleans\r\n\r\n        ----------  timestamps\r\n        -- {{ adapter.quote(\"Valid_From\") }},\r\n        -- {{ adapter.quote(\"Valid_To\") }}\r\n\r\n        ----------  omited\r\n        -- {{ adapter.quote(\"EntityTypeID\") }},\r\n\r\n\r\n    from source\r\n)\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ResponsesSingleContentD_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_ResponsesSingleContentD_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__staff_link_org_structures_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__staff_link_org_structures_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__staff_link_org_structures_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__staff_link_org_structures_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__staff_link_org_structures_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__staff_link_org_structures_v"], "alias": "stg_sfa__staff_link_org_structures_v", "checksum": {"name": "sha256", "checksum": "582df95b9d560ef4a9e1c17ebb2333a0c60efff4152bcac5c3c33a5d099a36b3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.1248138, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__staff_link_org_structures_v\"", "raw_code": "with source as (\r\n      select * from {{ source('sfa', 'dbo_StaffOrganizationalStructureLinksActive_v') }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OrgStructureID\"]) }} as organizational_structure_id,\r\n        {{ adapter.quote(\"OrgStructureID\") }} as organizational_structure_key,\r\n        \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Staff_id\"]) }} as staff_id,\r\n        {{ adapter.quote(\"Staff_id\") }} as staff_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n        {{ adapter.quote(\"Country_Code\") }} as country_code,\r\n     \r\n        {{ adapter.quote(\"StartDate\") }} as link_start_date,\r\n        {{ adapter.quote(\"EndDate\") }} as link_end_date,\r\n        {{ adapter.quote(\"IsMain\") }} as is_main,\r\n        {{ adapter.quote(\"DLM\") }} as dlm,\r\n        {{ adapter.quote(\"RecordNumber\") }} as record_number\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_StaffOrganizationalStructureLinksActive_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive_v"]}, "compiled_path": null}, "model.mattoni_1873.stg_sfa__visits_v": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_sfa__visits_v", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\soft_serve_views\\stg_sfa__visits_v.sql", "original_file_path": "models\\staging\\soft_serve_views\\stg_sfa__visits_v.sql", "unique_id": "model.mattoni_1873.stg_sfa__visits_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "stg_sfa__visits_v"], "alias": "stg_sfa__visits_v", "checksum": {"name": "sha256", "checksum": "2b2f66dcc164034aaee0e370843d400bf22b2ff0521d1ccb31e2e43d17c2e4c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704696.135814, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_sfa__visits_v\"", "raw_code": "with source as (\r\n    select * from {{ source(\"sfa\", \"dbo_OutLetCardH_v\") }}\r\n),\r\n\r\nrenamed as (\r\n    select\r\n\r\n        ----------  ids\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OlCard_id\"]) }} as visit_id,\r\n        {{ adapter.quote(\"OlCard_id\") }} as visit_key,\r\n      \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Ol_id\"]) }} as outlet_id,\r\n        {{ adapter.quote(\"Ol_id\") }} as outlet_key,\r\n        \r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Merch_id\"]) }} as merchant_id,\r\n        {{ adapter.quote(\"Merch_id\") }} as merchant_key,\r\n\r\n        {{ convert_country_to_code(\"Country_Code\") }} as country_id,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Reason_ID\"]) }} as inaccessibility_reason_id,\r\n        {{ adapter.quote(\"Reason_ID\") }} as inaccessibility_reason_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Route_id\"]) }} as route_id,\r\n        {{ adapter.quote(\"Route_id\") }} as route_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"OrgStructureID\"]) }} as organizational_structure_id,\r\n        {{ adapter.quote(\"OrgStructureID\") }} as organizational_structure_key,\r\n\r\n        {{ dbt_utils.generate_surrogate_key([\"Country_Code\", \"Cust_id\"]) }} as customer_id,\r\n        {{ adapter.quote(\"Cust_id\") }} as customer_key,\r\n\r\n        ----------  strings\r\n        {{ adapter.quote(\"Comments\") }} as visit_comment,\r\n        {{ adapter.quote(\"CompletionReasonTS\") }},\r\n        {{ adapter.quote(\"T1CommentTS\") }},\r\n\r\n        ----------  numerics\r\n        {{ adapter.quote(\"OlCardYear\") }} as visit_year,\r\n        {{ adapter.quote(\"OlCardMonth\") }} as visit_month,\r\n        {{ adapter.quote(\"OlCardWeek\") }} as visit_week,\r\n        {{ adapter.quote(\"DistributionCaptureMode\") }},\r\n        {{ adapter.quote(\"CommentsDestination\") }},\r\n        {{ adapter.quote(\"VisitTimeSec\") }},\r\n        {{ adapter.quote(\"DistanceToOutlet\") }} as visit_start_distance,\r\n        {{ adapter.quote(\"DistanceToOutlet_End\") }} as visit_end_distance,\r\n        {{ adapter.quote(\"FacingCaptureMode\") }},\r\n        {{ adapter.quote(\"UserStepCount\") }},\r\n        {{ adapter.quote(\"Status\") }},\r\n\r\n        ----------  booleans\r\n        {{ adapter.quote(\"Inaccessible\") }},\r\n        {{ adapter.quote(\"IsFromDDB\") }},\r\n        {{ adapter.quote(\"HasStartImage\") }},\r\n        {{ adapter.quote(\"HasEndImage\") }},\r\n        {{ adapter.quote(\"Incomplete\") }},\r\n        {{ adapter.quote(\"DocumentIsFilled\") }},\r\n        {{ adapter.quote(\"SyncWithDBF\") }},\r\n        {{ adapter.quote(\"SyncMainWithDBF\") }},\r\n        {{ adapter.quote(\"QuickOrder\") }} as is_quick_order,\r\n\r\n        ----------  timestamps\r\n        cast({{ adapter.quote(\"OlCardDate\") }} as date) as visit_date,\r\n        cast({{ adapter.quote(\"BeginTime\") }} as time) as visit_start_time,\r\n        cast({{ adapter.quote(\"EndTime\") }} as time) as visit_end_time,\r\n        {{ adapter.quote(\"EndTimeChange\") }} as visit_end_time_edit,\r\n        {{ adapter.quote(\"DLM\") }} as dlm\r\n        \r\n        ----------  omited\r\n        -- {{ adapter.quote(\"OLCardType\") }},\r\n        -- {{ adapter.quote(\"DelegatedOrgStructureID\") }},\r\n\r\n    from source\r\n)\r\n\r\nselect * from renamed", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutLetCardH_v"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.mattoni_1873.convert_country_to_code"], "nodes": ["source.mattoni_1873.sfa.dbo_OutLetCardH_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__customers_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__customers_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__customers_snapshot.sql", "original_file_path": "snapshots\\sfa__customers_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__customers_snapshot", "fqn": ["mattoni_1873", "sfa__customers_snapshot", "sfa__customers_snapshot"], "alias": "sfa__customers_snapshot", "checksum": {"name": "sha256", "checksum": "b5df25cc682f0cda0b4a790c2c0de858571f7b521568791cae6000ed3c9d4334"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, Cust_Id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, Cust_Id)", "updated_at": "DLM"}, "created_at": 1704704696.1848152, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__customers_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, Cust_Id)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_Customers_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Customers_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_Customers_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__documents_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__documents_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__documents_snapshot.sql", "original_file_path": "snapshots\\sfa__documents_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__documents_snapshot", "fqn": ["mattoni_1873", "sfa__documents_snapshot", "sfa__documents_snapshot"], "alias": "sfa__documents_snapshot", "checksum": {"name": "sha256", "checksum": "f3c4473b94702b9c97e8d09b733f79aa324d452b1118b387e811909b7b7bb899"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, Document_ID)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, Document_ID)", "updated_at": "DLM"}, "created_at": 1704704696.198817, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__documents_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, Document_ID)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_Documents_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Documents_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_Documents_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__document_items_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__document_items_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__document_items_snapshot.sql", "original_file_path": "snapshots\\sfa__document_items_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__document_items_snapshot", "fqn": ["mattoni_1873", "sfa__document_items_snapshot", "sfa__document_items_snapshot"], "alias": "sfa__document_items_snapshot", "checksum": {"name": "sha256", "checksum": "ebd857382561afc4f7564ac3927142e029f70fcbece3599fa18956ae54f4f75c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, Item_ID)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, Item_ID)", "updated_at": "DLM"}, "created_at": 1704704696.2058125, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__document_items_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, Item_ID)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_DocumentItems_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_DocumentItems_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_DocumentItems_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__document_sections_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__document_sections_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__document_sections_snapshot.sql", "original_file_path": "snapshots\\sfa__document_sections_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__document_sections_snapshot", "fqn": ["mattoni_1873", "sfa__document_sections_snapshot", "sfa__document_sections_snapshot"], "alias": "sfa__document_sections_snapshot", "checksum": {"name": "sha256", "checksum": "ef15e2e123655ad079eac864cce583c036bd5e417ad9dba2ea771ac04eb02cf8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, Section_ID)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, Section_ID)", "updated_at": "DLM"}, "created_at": 1704704696.21182, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__document_sections_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, Section_ID)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_DocumentSections_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_DocumentSections_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_DocumentSections_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__content_files_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__content_files_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__files_snapshot.sql", "original_file_path": "snapshots\\sfa__files_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__content_files_snapshot", "fqn": ["mattoni_1873", "sfa__files_snapshot", "sfa__content_files_snapshot"], "alias": "sfa__content_files_snapshot", "checksum": {"name": "sha256", "checksum": "982dcb73c753bc067e0fa4642a7b51eac89ad64ea8239d8c27b44c3a8dd565c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, ContentFileID)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, ContentFileID)", "updated_at": "DLM"}, "created_at": 1704704696.218815, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__content_files_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, ContentFileID)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_ContentFiles_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ContentFiles_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_ContentFiles_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__kpis_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__kpis_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__kpis_snapshot.sql", "original_file_path": "snapshots\\sfa__kpis_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__kpis_snapshot", "fqn": ["mattoni_1873", "sfa__kpis_snapshot", "sfa__kpis_snapshot"], "alias": "sfa__kpis_snapshot", "checksum": {"name": "sha256", "checksum": "3985db42be54931a1b68c4dc0c269e3309ad99a911122fc7b36c06e7cb30fd10"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, KpiId)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, KpiId)", "updated_at": "DLM"}, "created_at": 1704704696.226819, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__kpis_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, KpiId)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"ps_KPI_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "ps_KPI_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.ps_KPI_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__kpi_execution_facts_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__kpi_execution_facts_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__kpi_execution_facts_snapshot.sql", "original_file_path": "snapshots\\sfa__kpi_execution_facts_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__kpi_execution_facts_snapshot", "fqn": ["mattoni_1873", "sfa__kpi_execution_facts_snapshot", "sfa__kpi_execution_facts_snapshot"], "alias": "sfa__kpi_execution_facts_snapshot", "checksum": {"name": "sha256", "checksum": "8a2b47fda5c1da587fdbc7860cd9d01680510f473d7b1d3844437dd11b8dccc8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, KpiId, OlCard_id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, KpiId, OlCard_id)", "updated_at": "DLM"}, "created_at": 1704704696.2338214, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__kpi_execution_facts_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, KpiId, OlCard_id)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"ps_KPIExecutionFact_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "ps_KPIExecutionFact_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.ps_KPIExecutionFact_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__kpi_execution_plans_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__kpi_execution_plans_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__kpi_execution_plans_snapshot.sql", "original_file_path": "snapshots\\sfa__kpi_execution_plans_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__kpi_execution_plans_snapshot", "fqn": ["mattoni_1873", "sfa__kpi_execution_plans_snapshot", "sfa__kpi_execution_plans_snapshot"], "alias": "sfa__kpi_execution_plans_snapshot", "checksum": {"name": "sha256", "checksum": "34251cecfb563f85f7579215cab0be19d958093e718bca352ee9b62a0473e106"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, KpiId, OL_ID, DateFrom)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, KpiId, OL_ID, DateFrom)", "updated_at": "DLM"}, "created_at": 1704704696.2398157, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__kpi_execution_plans_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, KpiId, OL_ID, DateFrom)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"ps_KPIExecutionPlan_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "ps_KPIExecutionPlan_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.ps_KPIExecutionPlan_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__networks_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__networks_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__networks_snapshot.sql", "original_file_path": "snapshots\\sfa__networks_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__networks_snapshot", "fqn": ["mattoni_1873", "sfa__networks_snapshot", "sfa__networks_snapshot"], "alias": "sfa__networks_snapshot", "checksum": {"name": "sha256", "checksum": "116216a72c6fa6a574b1f55807160a7098501e468cbd606de3db604b62e483e7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, Network_id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, Network_id)", "updated_at": "DLM"}, "created_at": 1704704696.245821, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__networks_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, Network_id)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_Networks_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Networks_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_Networks_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__organization_structures_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__organization_structures_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__organization_structures_snapshot.sql", "original_file_path": "snapshots\\sfa__organization_structures_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__organization_structures_snapshot", "fqn": ["mattoni_1873", "sfa__organization_structures_snapshot", "sfa__organization_structures_snapshot"], "alias": "sfa__organization_structures_snapshot", "checksum": {"name": "sha256", "checksum": "5fbb9126896bfeade65753f1ac85f42f807851afe38f77ae0e90557e4043b601"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, OrgStructureID)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, OrgStructureID)", "updated_at": "DLM"}, "created_at": 1704704696.2518208, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__organization_structures_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, OrgStructureID)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_OrganizationalStructure_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OrganizationalStructure_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_OrganizationalStructure_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__outlets_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__outlets_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__outlets_snapshot.sql", "original_file_path": "snapshots\\sfa__outlets_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__outlets_snapshot", "fqn": ["mattoni_1873", "sfa__outlets_snapshot", "sfa__outlets_snapshot"], "alias": "sfa__outlets_snapshot", "checksum": {"name": "sha256", "checksum": "7161322a5f753aabb509764ade71aec3e1049a7205d994a0a7d73212bd948aa7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, OL_id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, OL_id)", "updated_at": "DLM"}, "created_at": 1704704696.258818, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__outlets_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, OL_id)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_OutLets_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutLets_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_OutLets_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__products_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__products_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__products_snapshot.sql", "original_file_path": "snapshots\\sfa__products_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__products_snapshot", "fqn": ["mattoni_1873", "sfa__products_snapshot", "sfa__products_snapshot"], "alias": "sfa__products_snapshot", "checksum": {"name": "sha256", "checksum": "c6a16f6914ec46bb1322f1d4ad864df159f390de22b4aa9a4f78a79c8864ff9b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, Product_Id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, Product_Id)", "updated_at": "DLM"}, "created_at": 1704704696.2648163, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__products_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, Product_Id)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_Products_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Products_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_Products_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__product_categories_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__product_categories_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__product_categories_snapshot.sql", "original_file_path": "snapshots\\sfa__product_categories_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__product_categories_snapshot", "fqn": ["mattoni_1873", "sfa__product_categories_snapshot", "sfa__product_categories_snapshot"], "alias": "sfa__product_categories_snapshot", "checksum": {"name": "sha256", "checksum": "ba784f807db3b9a0bdd89992655151f085744e39008482718521775101df7590"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, ProdCategory_ID)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, ProdCategory_ID)", "updated_at": "DLM"}, "created_at": 1704704696.2728157, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__product_categories_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, ProdCategory_ID)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_ProductCategory_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ProductCategory_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_ProductCategory_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__product_groups_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__product_groups_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__product_groups_snapshot.sql", "original_file_path": "snapshots\\sfa__product_groups_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__product_groups_snapshot", "fqn": ["mattoni_1873", "sfa__product_groups_snapshot", "sfa__product_groups_snapshot"], "alias": "sfa__product_groups_snapshot", "checksum": {"name": "sha256", "checksum": "ab5a4a3dc386c45fcca3c9cc7e9665c91f0102c18d3bfa0da1c54bccb1cc1ff9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, ProdGroup_ID)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, ProdGroup_ID)", "updated_at": "DLM"}, "created_at": 1704704696.2788198, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__product_groups_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, ProdGroup_ID)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_ProductGroups_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ProductGroups_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_ProductGroups_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__product_stocks_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__product_stocks_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__product_stocks_snapshot.sql", "original_file_path": "snapshots\\sfa__product_stocks_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__product_stocks_snapshot", "fqn": ["mattoni_1873", "sfa__product_stocks_snapshot", "sfa__product_stocks_snapshot"], "alias": "sfa__product_stocks_snapshot", "checksum": {"name": "sha256", "checksum": "9b7fe27ce26157b83f61da0334f9339f2097a6feb45a413d8d8b14ef4e55f12e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, W_id, Product_id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, W_id, Product_id)", "updated_at": "DLM"}, "created_at": 1704704696.285816, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__product_stocks_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, W_id, Product_id)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_ProductStocks_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ProductStocks_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_ProductStocks_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__questionnare_responses_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__questionnare_responses_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__questionnare_responses_snapshot.sql", "original_file_path": "snapshots\\sfa__questionnare_responses_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__questionnare_responses_snapshot", "fqn": ["mattoni_1873", "sfa__questionnare_responses_snapshot", "sfa__questionnare_responses_snapshot"], "alias": "sfa__questionnare_responses_snapshot", "checksum": {"name": "sha256", "checksum": "4bdf190dfc3a2d62837a885e139df3444161a27572384507cc21abf7a9240171"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, Response_ID)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, Response_ID)", "updated_at": "DLM"}, "created_at": 1704704696.2918222, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__questionnare_responses_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, Response_ID)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_ResponsesH_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_ResponsesH_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_ResponsesH_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__staff_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__staff_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__staff_snapshot.sql", "original_file_path": "snapshots\\sfa__staff_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__staff_snapshot", "fqn": ["mattoni_1873", "sfa__staff_snapshot", "sfa__staff_snapshot"], "alias": "sfa__staff_snapshot", "checksum": {"name": "sha256", "checksum": "2a6daf03fd3b77645a89a818750502231c9d4c2df02e6442889915808ba6deb4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, Staff_id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, Staff_id)", "updated_at": "DLM"}, "created_at": 1704704696.2978163, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__staff_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, Staff_id)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_Staff_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Staff_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_Staff_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__visits_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__visits_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__visits_snapshot.sql", "original_file_path": "snapshots\\sfa__visits_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__visits_snapshot", "fqn": ["mattoni_1873", "sfa__visits_snapshot", "sfa__visits_snapshot"], "alias": "sfa__visits_snapshot", "checksum": {"name": "sha256", "checksum": "6b4447c3ab3ffc0339fd3110095ea41fbaa7385f6bc3a8d29bc60ba0181fcc22"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, OlCard_id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, OlCard_id)", "updated_at": "DLM"}, "created_at": 1704704696.303826, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__visits_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key=\"concat(Country_Code, OlCard_id)\",\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select *\r\n    from {{ source(\"sfa\", \"dbo_OutLetCardH_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutLetCardH_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_OutLetCardH_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__visit_gps_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__visit_gps_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__visit_gps_snapshot.sql", "original_file_path": "snapshots\\sfa__visit_gps_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__visit_gps_snapshot", "fqn": ["mattoni_1873", "sfa__visit_gps_snapshot", "sfa__visit_gps_snapshot"], "alias": "sfa__visit_gps_snapshot", "checksum": {"name": "sha256", "checksum": "2f897b3ca3b6bd62c84d0fac44aff3e37a58d93190f2868dfa502dd4f4a37ac2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code,OLCard_id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code,OLCard_id)", "updated_at": "DLM"}, "created_at": 1704704696.3098125, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__visit_gps_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code,OLCard_id)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_OutletCardGPS_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_OutletCardGPS_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_OutletCardGPS_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__visit_inaccessibility_reasons_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__visit_inaccessibility_reasons_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__visit_inaccessibility_reasons_snapshot.sql", "original_file_path": "snapshots\\sfa__visit_inaccessibility_reasons_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__visit_inaccessibility_reasons_snapshot", "fqn": ["mattoni_1873", "sfa__visit_inaccessibility_reasons_snapshot", "sfa__visit_inaccessibility_reasons_snapshot"], "alias": "sfa__visit_inaccessibility_reasons_snapshot", "checksum": {"name": "sha256", "checksum": "402dd3993c381cb39cce41cc4512d5cb7310f939e69f0fe76c2f7bcfe404e6e6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, Reason_id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, Reason_id)", "updated_at": "DLM"}, "created_at": 1704704696.3178222, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__visit_inaccessibility_reasons_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, Reason_id)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_InaccessibilityReasons_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_InaccessibilityReasons_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_InaccessibilityReasons_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__warehouses_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__warehouses_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__warehouses_snapshot.sql", "original_file_path": "snapshots\\sfa__warehouses_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__warehouses_snapshot", "fqn": ["mattoni_1873", "sfa__warehouses_snapshot", "sfa__warehouses_snapshot"], "alias": "sfa__warehouses_snapshot", "checksum": {"name": "sha256", "checksum": "9b6bdf8f315fbb464fd61990d3bd0e0dc6b319fe7dd50b157e8f20958e246b8d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, W_id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, W_id)", "updated_at": "DLM"}, "created_at": 1704704696.3238173, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__warehouses_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key=\"concat(Country_Code, W_id)\",\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select *\r\n    from {{ source(\"sfa\", \"dbo_Warehouses_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Warehouses_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_Warehouses_v"]}, "compiled_path": null}, "snapshot.mattoni_1873.sfa__warehaouses_snapshot": {"database": "L50_SB_Vitek", "schema": "snapshots", "name": "sfa__warehaouses_snapshot", "resource_type": "snapshot", "package_name": "mattoni_1873", "path": "sfa__xxx_snapshot.sql", "original_file_path": "snapshots\\sfa__xxx_snapshot.sql", "unique_id": "snapshot.mattoni_1873.sfa__warehaouses_snapshot", "fqn": ["mattoni_1873", "sfa__xxx_snapshot", "sfa__warehaouses_snapshot"], "alias": "sfa__warehaouses_snapshot", "checksum": {"name": "sha256", "checksum": "4acfac71eec195f92147e327f90896a8f3ee0a7582743f3bb6608b51031eeb15"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "concat(Country_Code, W_id)", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "strategy": "timestamp", "target_schema": "snapshots", "target_database": null, "updated_at": "DLM", "check_cols": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "strategy": "timestamp", "unique_key": "concat(Country_Code, W_id)", "updated_at": "DLM"}, "created_at": 1704704696.329819, "relation_name": "\"L50_SB_Vitek\".\"snapshots\".\"sfa__warehaouses_snapshot\"", "raw_code": "\r\n\r\n    {{\r\n        config(\r\n            target_schema=\"snapshots\",\r\n            strategy=\"timestamp\",\r\n            unique_key = 'concat(Country_Code, W_id)',\r\n            updated_at=\"DLM\",\r\n        )\r\n    }}\r\n\r\n    select \r\n    *\r\n    from {{ source(\"sfa\", \"dbo_Warehouses_v\") }}\r\n\r\n", "language": "sql", "refs": [], "sources": [["sfa", "dbo_Warehouses_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.sfa.dbo_Warehouses_v"]}, "compiled_path": null}, "test.mattoni_1873.unique_fact_visit_visit_id.51a0bdec45": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "visit_id", "model": "{{ get_where_subquery(ref('fact_visit')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "unique_fact_visit_visit_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "unique_fact_visit_visit_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.unique_fact_visit_visit_id.51a0bdec45", "fqn": ["mattoni_1873", "marts", "core", "unique_fact_visit_visit_id"], "alias": "unique_fact_visit_visit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.44582, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_visit"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.mattoni_1873.fact_visit"]}, "compiled_path": null, "column_name": "visit_id", "file_key_name": "models.fact_visit"}, "test.mattoni_1873.not_null_fact_visit_visit_id.cb04257c71": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_id", "model": "{{ get_where_subquery(ref('fact_visit')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "not_null_fact_visit_visit_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "not_null_fact_visit_visit_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.not_null_fact_visit_visit_id.cb04257c71", "fqn": ["mattoni_1873", "marts", "core", "not_null_fact_visit_visit_id"], "alias": "not_null_fact_visit_visit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.4478219, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_visit"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.mattoni_1873.fact_visit"]}, "compiled_path": null, "column_name": "visit_id", "file_key_name": "models.fact_visit"}, "test.mattoni_1873.unique_dim_visit_gps_visit_id.9bd4b198b0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "visit_id", "model": "{{ get_where_subquery(ref('dim_visit_gps')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "unique_dim_visit_gps_visit_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "unique_dim_visit_gps_visit_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.unique_dim_visit_gps_visit_id.9bd4b198b0", "fqn": ["mattoni_1873", "marts", "core", "unique_dim_visit_gps_visit_id"], "alias": "unique_dim_visit_gps_visit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.4508204, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_visit_gps"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.mattoni_1873.dim_visit_gps"]}, "compiled_path": null, "column_name": "visit_id", "file_key_name": "models.dim_visit_gps"}, "test.mattoni_1873.not_null_dim_visit_gps_visit_id.1d9ad5b0a1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_id", "model": "{{ get_where_subquery(ref('dim_visit_gps')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "not_null_dim_visit_gps_visit_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "not_null_dim_visit_gps_visit_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.not_null_dim_visit_gps_visit_id.1d9ad5b0a1", "fqn": ["mattoni_1873", "marts", "core", "not_null_dim_visit_gps_visit_id"], "alias": "not_null_dim_visit_gps_visit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.45282, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_visit_gps"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.mattoni_1873.dim_visit_gps"]}, "compiled_path": null, "column_name": "visit_id", "file_key_name": "models.dim_visit_gps"}, "test.mattoni_1873.unique_dim_outlets_outlet_id.38208b9cc1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "outlet_id", "model": "{{ get_where_subquery(ref('dim_outlets')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "unique_dim_outlets_outlet_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "unique_dim_outlets_outlet_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.unique_dim_outlets_outlet_id.38208b9cc1", "fqn": ["mattoni_1873", "marts", "core", "unique_dim_outlets_outlet_id"], "alias": "unique_dim_outlets_outlet_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.4548194, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_outlets"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.mattoni_1873.dim_outlets"]}, "compiled_path": null, "column_name": "outlet_id", "file_key_name": "models.dim_outlets"}, "test.mattoni_1873.not_null_dim_outlets_outlet_id.f1413d1c31": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "outlet_id", "model": "{{ get_where_subquery(ref('dim_outlets')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "not_null_dim_outlets_outlet_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "not_null_dim_outlets_outlet_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.not_null_dim_outlets_outlet_id.f1413d1c31", "fqn": ["mattoni_1873", "marts", "core", "not_null_dim_outlets_outlet_id"], "alias": "not_null_dim_outlets_outlet_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.4568298, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_outlets"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.mattoni_1873.dim_outlets"]}, "compiled_path": null, "column_name": "outlet_id", "file_key_name": "models.dim_outlets"}, "test.mattoni_1873.unique_dim_organization_structures_organizational_structure_id.d7f1ba4fba": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "organizational_structure_id", "model": "{{ get_where_subquery(ref('dim_organization_structures')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "unique_dim_organization_structures_organizational_structure_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "unique_dim_organization_structures_organizational_structure_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.unique_dim_organization_structures_organizational_structure_id.d7f1ba4fba", "fqn": ["mattoni_1873", "marts", "core", "unique_dim_organization_structures_organizational_structure_id"], "alias": "unique_dim_organization_structures_organizational_structure_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.45982, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_organization_structures"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.mattoni_1873.dim_organization_structures"]}, "compiled_path": null, "column_name": "organizational_structure_id", "file_key_name": "models.dim_organization_structures"}, "test.mattoni_1873.not_null_dim_organization_structures_organizational_structure_id.4f98821484": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organizational_structure_id", "model": "{{ get_where_subquery(ref('dim_organization_structures')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "not_null_dim_organization_structures_organizational_structure_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "not_null_dim_organization_stru_8ac5f9bf246efda885ed0d36522a9e8b.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.not_null_dim_organization_structures_organizational_structure_id.4f98821484", "fqn": ["mattoni_1873", "marts", "core", "not_null_dim_organization_structures_organizational_structure_id"], "alias": "not_null_dim_organization_stru_8ac5f9bf246efda885ed0d36522a9e8b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_dim_organization_stru_8ac5f9bf246efda885ed0d36522a9e8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_dim_organization_stru_8ac5f9bf246efda885ed0d36522a9e8b"}, "created_at": 1704704696.46182, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_dim_organization_stru_8ac5f9bf246efda885ed0d36522a9e8b\") }}", "language": "sql", "refs": [["dim_organization_structures"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.mattoni_1873.dim_organization_structures"]}, "compiled_path": null, "column_name": "organizational_structure_id", "file_key_name": "models.dim_organization_structures"}, "test.mattoni_1873.unique_dim_customers_customer_id.15c9f1e2fd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "unique_dim_customers_customer_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "unique_dim_customers_customer_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.unique_dim_customers_customer_id.15c9f1e2fd", "fqn": ["mattoni_1873", "marts", "core", "unique_dim_customers_customer_id"], "alias": "unique_dim_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.4638221, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.mattoni_1873.dim_customers"]}, "compiled_path": null, "column_name": "customer_id", "file_key_name": "models.dim_customers"}, "test.mattoni_1873.not_null_dim_customers_customer_id.dd91cd1c8d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "not_null_dim_customers_customer_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "not_null_dim_customers_customer_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.not_null_dim_customers_customer_id.dd91cd1c8d", "fqn": ["mattoni_1873", "marts", "core", "not_null_dim_customers_customer_id"], "alias": "not_null_dim_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.4658267, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.mattoni_1873.dim_customers"]}, "compiled_path": null, "column_name": "customer_id", "file_key_name": "models.dim_customers"}, "test.mattoni_1873.unique_dim_inaccessibility_reasons_inaccessibility_reason_id.950672aa38": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "inaccessibility_reason_id", "model": "{{ get_where_subquery(ref('dim_inaccessibility_reasons')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "unique_dim_inaccessibility_reasons_inaccessibility_reason_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "unique_dim_inaccessibility_reasons_inaccessibility_reason_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.unique_dim_inaccessibility_reasons_inaccessibility_reason_id.950672aa38", "fqn": ["mattoni_1873", "marts", "core", "unique_dim_inaccessibility_reasons_inaccessibility_reason_id"], "alias": "unique_dim_inaccessibility_reasons_inaccessibility_reason_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.468822, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_inaccessibility_reasons"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.mattoni_1873.dim_inaccessibility_reasons"]}, "compiled_path": null, "column_name": "inaccessibility_reason_id", "file_key_name": "models.dim_inaccessibility_reasons"}, "test.mattoni_1873.not_null_dim_inaccessibility_reasons_inaccessibility_reason_id.da16540c2b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "inaccessibility_reason_id", "model": "{{ get_where_subquery(ref('dim_inaccessibility_reasons')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "not_null_dim_inaccessibility_reasons_inaccessibility_reason_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "not_null_dim_inaccessibility_reasons_inaccessibility_reason_id.sql", "original_file_path": "models\\marts\\core\\_schema.yml", "unique_id": "test.mattoni_1873.not_null_dim_inaccessibility_reasons_inaccessibility_reason_id.da16540c2b", "fqn": ["mattoni_1873", "marts", "core", "not_null_dim_inaccessibility_reasons_inaccessibility_reason_id"], "alias": "not_null_dim_inaccessibility_reasons_inaccessibility_reason_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.4708257, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_inaccessibility_reasons"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.mattoni_1873.dim_inaccessibility_reasons"]}, "compiled_path": null, "column_name": "inaccessibility_reason_id", "file_key_name": "models.dim_inaccessibility_reasons"}, "test.mattoni_1873.unique_stg_dwh__dim_products_product_id.3fb32d4785": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_dwh__dim_products')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "unique_stg_dwh__dim_products_product_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "unique_stg_dwh__dim_products_product_id.sql", "original_file_path": "models\\staging\\sales_datamart\\_schema.yml", "unique_id": "test.mattoni_1873.unique_stg_dwh__dim_products_product_id.3fb32d4785", "fqn": ["mattoni_1873", "staging", "sales_datamart", "unique_stg_dwh__dim_products_product_id"], "alias": "unique_stg_dwh__dim_products_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.505823, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_dwh__dim_products"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.mattoni_1873.stg_dwh__dim_products"]}, "compiled_path": null, "column_name": "product_id", "file_key_name": "models.stg_dwh__dim_products"}, "test.mattoni_1873.not_null_stg_dwh__dim_products_product_id.aacd21cfdc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_dwh__dim_products')) }}"}, "namespace": null}, "database": "L50_SB_Vitek", "schema": "sfa_dbt_test__audit", "name": "not_null_stg_dwh__dim_products_product_id", "resource_type": "test", "package_name": "mattoni_1873", "path": "not_null_stg_dwh__dim_products_product_id.sql", "original_file_path": "models\\staging\\sales_datamart\\_schema.yml", "unique_id": "test.mattoni_1873.not_null_stg_dwh__dim_products_product_id.aacd21cfdc", "fqn": ["mattoni_1873", "staging", "sales_datamart", "not_null_stg_dwh__dim_products_product_id"], "alias": "not_null_stg_dwh__dim_products_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704704696.5088234, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_dwh__dim_products"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.mattoni_1873.stg_dwh__dim_products"]}, "compiled_path": null, "column_name": "product_id", "file_key_name": "models.stg_dwh__dim_products"}, "model.mattoni_1873.int_pepsi_documents_closed_enhanced": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "int_pepsi_documents_closed_enhanced", "resource_type": "model", "package_name": "mattoni_1873", "path": "intermediate\\sales\\int_pepsi_documents_closed_enhanced.sql", "original_file_path": "models\\intermediate\\sales\\int_pepsi_documents_closed_enhanced.sql", "unique_id": "model.mattoni_1873.int_pepsi_documents_closed_enhanced", "fqn": ["mattoni_1873", "intermediate", "sales", "int_pepsi_documents_closed_enhanced"], "alias": "int_pepsi_documents_closed_enhanced", "checksum": {"name": "sha256", "checksum": "f3f9f46e8e12bc35be8b6f93a9ed5d67857e7b4820f8ae4f1ea38c294bc42dc6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704698.646887, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"int_pepsi_documents_closed_enhanced\"", "raw_code": "with document as (\r\n\tselect * from {{ ref('stg_sap__documents_closed') }}\r\n),\r\n\r\ncalendar as (\r\n    select * from {{ ref('stg_dwh__calendar') }}\r\n),\r\n\r\nentity as (\r\n    select * from {{ ref('stg_dwh__dim_entities') }}\r\n), \r\n\r\ncountry as (\r\n\tselect * from {{ ref('stg_dwh__dim_countries') }}\r\n),\r\n\r\nproduct as (\r\n\tselect * from {{ ref('stg_sap__products') }}\r\n),\r\n\r\ncustomer as (\r\n\tselect * from {{ ref('stg_dwh__dim_customers') }}\r\n),\r\n\r\nfx as (\r\n    select * from {{ ref('stg_dwh__fx_rates') }}\r\n),\r\n\r\ncall_representative as (\r\n    select * from {{ ref('stg_dwh__dim_call_representatives') }}\r\n),\r\n\r\nfinal as (\r\n\tselect\r\n\t\tcalendar.last_of_month as calendar_id,\r\n\t\tcountry.country_id as country_id,\r\n\t\tentity.entity_id as entity_id,\r\n\t\tcoalesce(document.soldto_customer_id, -1) as sold_to_id,\r\n\t\tcoalesce(document.shipto_customer_id, -1) as ship_to_id,\r\n\t\tcoalesce(document.payer_id, -1) as payer_id,\r\n\t\tcoalesce(document.call_representative_id, -1) as call_representative_id,\r\n\t\tcoalesce(product.local_sku_id, -1) as local_sku_id,\r\n\t\tsum(document.piece_quantity) as piece_quantity,\r\n\t\tsum(document.liter_quantity) as liter_quantity,\r\n\t\tsum(document.oz8_quantity) as oz8_quantity,\r\n\t\tsum(document.rrc_quantity) as rrc_quantity,\r\n\t\tsum(document.net_revenue_lc) as net_revenue_lc,\r\n\t\tcoalesce(sum(document.net_revenue_lc * fx.fx_rate), 0) as net_revenue_czk\r\n\t\r\n\tfrom \r\n\t\tdocument\r\n\t\r\n\t\tinner join calendar\r\n\t\t\ton document.document_date_id = calendar.calendar_id\r\n\r\n\t\tinner join entity\r\n\t\t\ton document.country_id = entity.country_id\r\n\r\n\t\tinner join country\r\n\t\t\ton document.country_id = country.country_id\r\n\r\n\t\tinner join product \r\n\t\t\ton document.product_id = product.product_id\r\n\r\n        left join call_representative\r\n            on document.call_representative_id = call_representative.call_representative_id\r\n\r\n\t\tleft join customer as sold_to\r\n\t\t\ton document.soldto_customer_id = sold_to.customer_id\r\n\t\t\r\n\t\tleft join customer as ship_to\r\n\t\t\ton document.shipto_customer_id = ship_to.customer_id\r\n\r\n\t\tleft join customer as payer\r\n\t\t\ton document.payer_id = payer.customer_id\r\n\r\n        left join fx\r\n            on document.document_date_id = fx.calendar_id\r\n            and country.currency_id = fx.from_currency_id\r\n            and 137 = fx.to_currency_id\r\n            --and document.country_id = fx.country_id\r\n\r\n\twhere\r\n\t\tproduct.material_type_code = 'FERT'\r\n        and entity.entity_sap_code = 'PEPSI'\r\n\t\tand document.document_date_id >= {{ var('months_to_refresh') }}\r\n\r\n\tgroup by \r\n\t\tcalendar.last_of_month,\r\n\t\tcountry.country_id,\r\n\t\tentity.entity_id,\r\n\t\tdocument.soldto_customer_id,\r\n\t\tdocument.shipto_customer_id,\r\n\t\tdocument.payer_id,\r\n        document.call_representative_id,\r\n\t\tproduct.local_sku_id\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sap__documents_closed"], ["stg_dwh__calendar"], ["stg_dwh__dim_entities"], ["stg_dwh__dim_countries"], ["stg_sap__products"], ["stg_dwh__dim_customers"], ["stg_dwh__fx_rates"], ["stg_dwh__dim_call_representatives"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sap__documents_closed", "model.mattoni_1873.stg_dwh__calendar", "model.mattoni_1873.stg_dwh__dim_entities", "model.mattoni_1873.stg_dwh__dim_countries", "model.mattoni_1873.stg_sap__products", "model.mattoni_1873.stg_dwh__dim_customers", "model.mattoni_1873.stg_dwh__fx_rates", "model.mattoni_1873.stg_dwh__dim_call_representatives"]}, "compiled_path": null}, "model.mattoni_1873.int_kmv_documents_open_enhanced": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "int_kmv_documents_open_enhanced", "resource_type": "model", "package_name": "mattoni_1873", "path": "intermediate\\sales\\int_kmv_documents_open_enhanced.sql", "original_file_path": "models\\intermediate\\sales\\int_kmv_documents_open_enhanced.sql", "unique_id": "model.mattoni_1873.int_kmv_documents_open_enhanced", "fqn": ["mattoni_1873", "intermediate", "sales", "int_kmv_documents_open_enhanced"], "alias": "int_kmv_documents_open_enhanced", "checksum": {"name": "sha256", "checksum": "bf633a3f8be95e6539584c2d86214f2637c0a5da7464491922f83f41158fa1e5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704698.6558888, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"int_kmv_documents_open_enhanced\"", "raw_code": "with document as (\r\n\tselect * from {{ ref('stg_sap__documents_open_kmv') }}\r\n),\r\n\r\ncalendar as (\r\n    select * from {{ ref('stg_dwh__calendar') }}\r\n),\r\n\r\nentity as (\r\n    select * from {{ ref('stg_dwh__dim_entities') }}\r\n), \r\n\r\ncountry as (\r\n\tselect * from {{ ref('stg_dwh__dim_countries') }}\r\n),\r\n\r\nproduct as (\r\n\tselect * from {{ ref('stg_sap__products') }}\r\n),\r\n\r\ncustomer as (\r\n\tselect * from {{ ref('stg_dwh__dim_customers') }}\r\n),\r\n\r\nfinal as (\r\n\tselect\r\n\t\tcalendar.last_of_month as calendar_id,\r\n\t\tcountry.country_id as country_id,\r\n\t\tentity.entity_id as entity_id,\r\n\t\tcoalesce(sold_to.customer_id, -1) as sold_to_id,\r\n\t\tcoalesce(ship_to.customer_id, -1) as ship_to_id,\r\n\t\tcoalesce(payer.customer_id, -1) as payer_id,\r\n\t\t-1 as call_representative_id,\r\n\t\tcoalesce(product.local_sku_id, -1) as local_sku_id,\r\n\t\tsum(document.piece_quantity) as piece_quantity,\r\n\t\tsum(document.liter_quantity) as liter_quantity,\r\n\t\tsum(document.oz8_quantity) as oz8_quantity,\r\n\t\tsum(document.rrc_quantity) as rrc_quantity,\r\n\t\tsum(document.net_revenue_lc) as net_revenue_lc,\r\n\t\tsum(document.net_revenue_czk) as net_revenue_czk\r\n\t\r\n\tfrom \r\n\t\tdocument\r\n\t\r\n\t\tinner join calendar\r\n\t\t\ton document.document_date_id = calendar.calendar_id\r\n\r\n\t\tinner join entity\r\n\t\t\ton document.country_id = entity.country_id\r\n\t\t\tand document.company_code = entity.entity_sap_code\r\n\r\n\t\tinner join country\r\n\t\t\ton document.country_id = country.country_id\r\n\r\n\t\tinner join product \r\n\t\t\ton document.product_id = product.product_id\r\n\r\n\t\tleft join customer as sold_to\r\n\t\t\ton document.soldto_customer_id = sold_to.customer_id\r\n\t\t\r\n\t\tleft join customer as ship_to\r\n\t\t\ton document.shipto_customer_id = ship_to.customer_id\r\n\r\n\t\tleft join customer as payer\r\n\t\t\ton document.shipto_customer_id = payer.customer_id\r\n\r\n\twhere\r\n\t\tproduct.material_type_code = 'FERT'\r\n\t\tand document.document_date_id >= {{ var('months_to_refresh') }}\r\n\r\n\tgroup by \r\n\t\tcalendar.last_of_month,\r\n\t\tcountry.country_id,\r\n\t\tentity.entity_id,\r\n\t\tsold_to.customer_id,\r\n\t\tship_to.customer_id,\r\n\t\tpayer.customer_id,\r\n\t\tproduct.local_sku_id\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sap__documents_open_kmv"], ["stg_dwh__calendar"], ["stg_dwh__dim_entities"], ["stg_dwh__dim_countries"], ["stg_sap__products"], ["stg_dwh__dim_customers"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sap__documents_open_kmv", "model.mattoni_1873.stg_dwh__calendar", "model.mattoni_1873.stg_dwh__dim_entities", "model.mattoni_1873.stg_dwh__dim_countries", "model.mattoni_1873.stg_sap__products", "model.mattoni_1873.stg_dwh__dim_customers"]}, "compiled_path": null}, "model.mattoni_1873.int_kmv_documents_closed_enhanced": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "int_kmv_documents_closed_enhanced", "resource_type": "model", "package_name": "mattoni_1873", "path": "intermediate\\sales\\int_kmv_documents_closed_enhanced.sql", "original_file_path": "models\\intermediate\\sales\\int_kmv_documents_closed_enhanced.sql", "unique_id": "model.mattoni_1873.int_kmv_documents_closed_enhanced", "fqn": ["mattoni_1873", "intermediate", "sales", "int_kmv_documents_closed_enhanced"], "alias": "int_kmv_documents_closed_enhanced", "checksum": {"name": "sha256", "checksum": "e57dd6c5ba2dcd5e94ba513536eabc8bf3c2ead2ba2128afafaaad591a31cb37"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704704707.47234, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"int_kmv_documents_closed_enhanced\"", "raw_code": "with document as (\r\n\tselect * from {{ ref('stg_sap__documents_closed_kmv') }}\r\n),\r\n\r\ncalendar as (\r\n    select * from {{ ref('stg_dwh__calendar') }}\r\n),\r\n\r\nentity as (\r\n    select * from {{ ref('stg_dwh__dim_entities') }}\r\n), \r\n\r\ncountry as (\r\n\tselect * from {{ ref('stg_dwh__dim_countries') }}\r\n),\r\n\r\nproduct as (\r\n\tselect * from {{ ref('stg_sap__products') }}\r\n),\r\n\r\ncustomer as (\r\n\tselect * from {{ ref('stg_dwh__dim_customers') }}\r\n),\r\n\r\nfinal as (\r\n\tselect\r\n\t\tcalendar.last_of_month as calendar_id,\r\n\t\tcountry.country_id as country_id,\r\n\t\tentity.entity_id as entity_id,\r\n\t\tcoalesce(document.soldto_customer_id, -1) as sold_to_id,\r\n\t\tcoalesce(document.shipto_customer_id, -1) as ship_to_id,\r\n\t\tcoalesce(document.payer_customer_id, -1) as payer_id,\r\n\t\t-1 as call_representative_id,\r\n\t\tcoalesce(product.local_sku_id, -1) as local_sku_id,\r\n\t\tsum(document.piece_quantity) as piece_quantity,\r\n\t\tsum(document.liter_quantity) as liter_quantity,\r\n\t\tsum(document.oz8_quantity) as oz8_quantity,\r\n\t\tsum(document.rrc_quantity) as rrc_quantity,\r\n\t\tsum(document.net_revenue_lc) as net_revenue_lc,\r\n\t\tsum(document.net_revenue_czk) as net_revenue_czk\r\n\t\r\n\tfrom \r\n\t\tdocument\r\n\t\r\n\t\tinner join calendar\r\n\t\t\ton document.document_date_id = calendar.calendar_id\r\n\r\n\t\tinner join entity\r\n\t\t\ton document.country_id = entity.country_id\r\n\t\t\tand document.company_code = entity.entity_sap_code\r\n\r\n\t\tinner join country\r\n\t\t\ton document.country_id = country.country_id\r\n\r\n\t\tinner join product \r\n\t\t\ton document.product_id = product.product_id\r\n\r\n\t\tleft join customer as sold_to\r\n\t\t\ton document.soldto_customer_id = sold_to.customer_id\r\n\t\t\r\n\t\tleft join customer as ship_to\r\n\t\t\ton document.shipto_customer_id = ship_to.customer_id\r\n\r\n\t\tleft join customer as payer\r\n\t\t\ton document.payer_customer_id = payer.customer_id\r\n\r\n\twhere\r\n\t\tproduct.material_type_code = 'FERT'\r\n\t\tand document.document_date_id >= {{ var('months_to_refresh') }}\r\n\r\n\tgroup by \r\n\t\tcalendar.last_of_month,\r\n\t\tcountry.country_id,\r\n\t\tentity.entity_id,\r\n\t\tdocument.soldto_customer_id,\r\n\t\tdocument.shipto_customer_id,\r\n\t\tdocument.payer_customer_id,\r\n\t\tproduct.local_sku_id\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["stg_sap__documents_closed_kmv"], ["stg_dwh__calendar"], ["stg_dwh__dim_entities"], ["stg_dwh__dim_countries"], ["stg_sap__products"], ["stg_dwh__dim_customers"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.mattoni_1873.stg_sap__documents_closed_kmv", "model.mattoni_1873.stg_dwh__calendar", "model.mattoni_1873.stg_dwh__dim_entities", "model.mattoni_1873.stg_dwh__dim_countries", "model.mattoni_1873.stg_sap__products", "model.mattoni_1873.stg_dwh__dim_customers"]}, "compiled_path": null}, "model.mattoni_1873.sales_real": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "sales_real", "resource_type": "model", "package_name": "mattoni_1873", "path": "marts\\sales\\sales_real.sql", "original_file_path": "models\\marts\\sales\\sales_real.sql", "unique_id": "model.mattoni_1873.sales_real", "fqn": ["mattoni_1873", "marts", "sales", "sales_real"], "alias": "sales_real", "checksum": {"name": "sha256", "checksum": "3018ee4c7f1a378355363ae8d64d394842e858849fd7c81c0299f5a3d739a605"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Combines data from four tables, which contain enhanced information about sales documents in the 'KMV' and 'PEPSI' SAP systems. The model is used to provide a consolidated view of all sales by Mattoni 1873, both open and closed, for analysis and reporting purposes.", "columns": {"_dbt_source_relation": {"name": "_dbt_source_relation", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calendar_id": {"name": "calendar_id", "description": "Last day of month, when was order realized.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_id": {"name": "country_id", "description": "Reference to country table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "Reference to entity table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_id": {"name": "sold_to_id", "description": "Reference to customer dim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_to_id": {"name": "ship_to_id", "description": "Reference to customer dim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer_id": {"name": "payer_id", "description": "Reference to customer dim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_representative_id": {"name": "call_representative_id", "description": "Reference to Call representative table for ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "local_sku_id": {"name": "local_sku_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "piece_quantity": {"name": "piece_quantity", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "liter_quantity": {"name": "liter_quantity", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "oz8_quantity": {"name": "oz8_quantity", "description": "Oz8 quantity. For snacks its kgs of sold snacks. ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rrc_quantity": {"name": "rrc_quantity", "description": "Real row case quantity in order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_revenue_lc": {"name": "net_revenue_lc", "description": "Revenue in local currency it was invoiced in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_revenue_czk": {"name": "net_revenue_czk", "description": "Revenue in Czech koruna. Calculated from local currency using Czech national bank exchange rate valid on day of transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://models\\marts\\sales\\_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa", "materialized": "table"}, "created_at": 1704705895.020479, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"sales_real\"", "raw_code": "{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n\r\nwith kmv_open as (\r\n    select * from {{ ref('int_kmv_documents_open_enhanced') }}\r\n),\r\n\r\nkmv_closed as (\r\n    select * from {{ ref('int_kmv_documents_closed_enhanced') }}\r\n),\r\n\r\npepsi_open as (\r\n    select * from {{ ref('int_pepsi_documents_open_enhanced') }}\r\n),\r\n\r\npepsi_closed as (\r\n    select * from {{ ref('int_pepsi_documents_closed_enhanced') }}\r\n),\r\n\r\nfinal as (\r\n    {{ dbt_utils.union_relations(\r\n        relations=[\r\n            ref('int_kmv_documents_closed_enhanced'),\r\n            ref('int_kmv_documents_open_enhanced'),\r\n            ref('int_pepsi_documents_closed_enhanced'),\r\n            ref('int_pepsi_documents_open_enhanced')\r\n            ]\r\n        )\r\n    }}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [["int_kmv_documents_open_enhanced"], ["int_kmv_documents_closed_enhanced"], ["int_pepsi_documents_open_enhanced"], ["int_pepsi_documents_closed_enhanced"], ["int_kmv_documents_closed_enhanced"], ["int_kmv_documents_open_enhanced"], ["int_pepsi_documents_closed_enhanced"], ["int_pepsi_documents_open_enhanced"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.mattoni_1873.int_kmv_documents_open_enhanced", "model.mattoni_1873.int_kmv_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced", "model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_kmv_documents_closed_enhanced", "model.mattoni_1873.int_kmv_documents_open_enhanced", "model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced"]}, "compiled_path": null}, "model.mattoni_1873.stg_dwh__calendar": {"database": "L50_SB_Vitek", "schema": "sfa", "name": "stg_dwh__calendar", "resource_type": "model", "package_name": "mattoni_1873", "path": "staging\\dwh\\stg_dwh__calendar.sql", "original_file_path": "models\\staging\\dwh\\stg_dwh__calendar.sql", "unique_id": "model.mattoni_1873.stg_dwh__calendar", "fqn": ["mattoni_1873", "staging", "dwh", "stg_dwh__calendar"], "alias": "stg_dwh__calendar", "checksum": {"name": "sha256", "checksum": "66373016f438d70a652ee5c8d5c7e3aa165d92005be6d42b2f1bdda628d4912f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "target_schema": "sfa", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "sfa"}, "created_at": 1704706544.3212466, "relation_name": "\"L50_SB_Vitek\".\"sfa\".\"stg_dwh__calendar\"", "raw_code": "with source as (\n      select * from {{ source('core', 'Calendar_v') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"Calendar_Id\") }} as calendar_id,\n        cast(\n            replace(\n                cast({{ adapter.quote(\"Last_Of_Month\") }} as varchar(10)),\n                '-',\n                '')\n            as int) as last_of_month\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["core", "Calendar_v"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.mattoni_1873.core.Calendar_v"]}, "compiled_path": null}}, "sources": {"source.mattoni_1873.core.FXR_AVG_vs_BGT_Main_Currency_v": {"database": "L10_Core", "schema": "dbo", "name": "FXR_AVG_vs_BGT_Main_Currency_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\dwh\\_sources.yml", "original_file_path": "models\\staging\\dwh\\_sources.yml", "unique_id": "source.mattoni_1873.core.FXR_AVG_vs_BGT_Main_Currency_v", "fqn": ["mattoni_1873", "staging", "dwh", "core", "FXR_AVG_vs_BGT_Main_Currency_v"], "source_name": "core", "source_description": "", "loader": "", "identifier": "FXR_AVG_vs_BGT_Main_Currency_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L10_Core\".\"dbo\".\"FXR_AVG_vs_BGT_Main_Currency_v\"", "created_at": 1704704696.6398234}, "source.mattoni_1873.core.Currency_c": {"database": "L10_Core", "schema": "dbo", "name": "Currency_c", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\dwh\\_sources.yml", "original_file_path": "models\\staging\\dwh\\_sources.yml", "unique_id": "source.mattoni_1873.core.Currency_c", "fqn": ["mattoni_1873", "staging", "dwh", "core", "Currency_c"], "source_name": "core", "source_description": "", "loader": "", "identifier": "Currency_c", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L10_Core\".\"dbo\".\"Currency_c\"", "created_at": 1704704696.6398234}, "source.mattoni_1873.core.Calendar_v": {"database": "L10_Core", "schema": "dbo", "name": "Calendar_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\dwh\\_sources.yml", "original_file_path": "models\\staging\\dwh\\_sources.yml", "unique_id": "source.mattoni_1873.core.Calendar_v", "fqn": ["mattoni_1873", "staging", "dwh", "core", "Calendar_v"], "source_name": "core", "source_description": "", "loader": "", "identifier": "Calendar_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L10_Core\".\"dbo\".\"Calendar_v\"", "created_at": 1704704696.6398234}, "source.mattoni_1873.pbi.dim_Entity": {"database": "L30_DM_Sales", "schema": "pbi", "name": "dim_Entity", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sales_datamart\\_sources.yml", "original_file_path": "models\\staging\\sales_datamart\\_sources.yml", "unique_id": "source.mattoni_1873.pbi.dim_Entity", "fqn": ["mattoni_1873", "staging", "sales_datamart", "pbi", "dim_Entity"], "source_name": "pbi", "source_description": "", "loader": "", "identifier": "dim_Entity", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L30_DM_Sales\".\"pbi\".\"dim_Entity\"", "created_at": 1704704696.6398234}, "source.mattoni_1873.pbi.dim_Country": {"database": "L30_DM_Sales", "schema": "pbi", "name": "dim_Country", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sales_datamart\\_sources.yml", "original_file_path": "models\\staging\\sales_datamart\\_sources.yml", "unique_id": "source.mattoni_1873.pbi.dim_Country", "fqn": ["mattoni_1873", "staging", "sales_datamart", "pbi", "dim_Country"], "source_name": "pbi", "source_description": "", "loader": "", "identifier": "dim_Country", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L30_DM_Sales\".\"pbi\".\"dim_Country\"", "created_at": 1704704696.6408234}, "source.mattoni_1873.pbi.dim_Customer": {"database": "L30_DM_Sales", "schema": "pbi", "name": "dim_Customer", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sales_datamart\\_sources.yml", "original_file_path": "models\\staging\\sales_datamart\\_sources.yml", "unique_id": "source.mattoni_1873.pbi.dim_Customer", "fqn": ["mattoni_1873", "staging", "sales_datamart", "pbi", "dim_Customer"], "source_name": "pbi", "source_description": "", "loader": "", "identifier": "dim_Customer", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L30_DM_Sales\".\"pbi\".\"dim_Customer\"", "created_at": 1704704696.6408234}, "source.mattoni_1873.pbi.dim_Product": {"database": "L30_DM_Sales", "schema": "pbi", "name": "dim_Product", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sales_datamart\\_sources.yml", "original_file_path": "models\\staging\\sales_datamart\\_sources.yml", "unique_id": "source.mattoni_1873.pbi.dim_Product", "fqn": ["mattoni_1873", "staging", "sales_datamart", "pbi", "dim_Product"], "source_name": "pbi", "source_description": "", "loader": "", "identifier": "dim_Product", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L30_DM_Sales\".\"pbi\".\"dim_Product\"", "created_at": 1704704696.6408234}, "source.mattoni_1873.pbi.dim_Call_Representative": {"database": "L30_DM_Sales", "schema": "pbi", "name": "dim_Call_Representative", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sales_datamart\\_sources.yml", "original_file_path": "models\\staging\\sales_datamart\\_sources.yml", "unique_id": "source.mattoni_1873.pbi.dim_Call_Representative", "fqn": ["mattoni_1873", "staging", "sales_datamart", "pbi", "dim_Call_Representative"], "source_name": "pbi", "source_description": "", "loader": "", "identifier": "dim_Call_Representative", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L30_DM_Sales\".\"pbi\".\"dim_Call_Representative\"", "created_at": 1704704696.6408234}, "source.mattoni_1873.sap.product_now_dvt_c_hv": {"database": "L01_Stage", "schema": "sap", "name": "product_now_dvt_c_hv", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sap\\_sources.yml", "original_file_path": "models\\staging\\sap\\_sources.yml", "unique_id": "source.mattoni_1873.sap.product_now_dvt_c_hv", "fqn": ["mattoni_1873", "staging", "sap", "sap", "product_now_dvt_c_hv"], "source_name": "sap", "source_description": "", "loader": "", "identifier": "product_now_dvt_c_hv", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sap\".\"product_now_dvt_c_hv\"", "created_at": 1704704696.6408234}, "source.mattoni_1873.sap.customer_now_dvt_c_hv": {"database": "L01_Stage", "schema": "sap", "name": "customer_now_dvt_c_hv", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sap\\_sources.yml", "original_file_path": "models\\staging\\sap\\_sources.yml", "unique_id": "source.mattoni_1873.sap.customer_now_dvt_c_hv", "fqn": ["mattoni_1873", "staging", "sap", "sap", "customer_now_dvt_c_hv"], "source_name": "sap", "source_description": "", "loader": "", "identifier": "customer_now_dvt_c_hv", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sap\".\"customer_now_dvt_c_hv\"", "created_at": 1704704696.6408234}, "source.mattoni_1873.sap.bad_with_cost_closed_v": {"database": "L01_Stage", "schema": "sap", "name": "bad_with_cost_closed_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sap\\_sources.yml", "original_file_path": "models\\staging\\sap\\_sources.yml", "unique_id": "source.mattoni_1873.sap.bad_with_cost_closed_v", "fqn": ["mattoni_1873", "staging", "sap", "sap", "bad_with_cost_closed_v"], "source_name": "sap", "source_description": "", "loader": "", "identifier": "bad_with_cost_closed_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sap\".\"bad_with_cost_closed_v\"", "created_at": 1704704696.641824}, "source.mattoni_1873.sap.bad_with_cost_open_v": {"database": "L01_Stage", "schema": "sap", "name": "bad_with_cost_open_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sap\\_sources.yml", "original_file_path": "models\\staging\\sap\\_sources.yml", "unique_id": "source.mattoni_1873.sap.bad_with_cost_open_v", "fqn": ["mattoni_1873", "staging", "sap", "sap", "bad_with_cost_open_v"], "source_name": "sap", "source_description": "", "loader": "", "identifier": "bad_with_cost_open_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sap\".\"bad_with_cost_open_v\"", "created_at": 1704704696.641824}, "source.mattoni_1873.kmv.consolidated_closed_v": {"database": "L01_Stage", "schema": "kmv", "name": "consolidated_closed_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sap\\_sources.yml", "original_file_path": "models\\staging\\sap\\_sources.yml", "unique_id": "source.mattoni_1873.kmv.consolidated_closed_v", "fqn": ["mattoni_1873", "staging", "sap", "kmv", "consolidated_closed_v"], "source_name": "kmv", "source_description": "", "loader": "", "identifier": "consolidated_closed_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"kmv\".\"consolidated_closed_v\"", "created_at": 1704704696.641824}, "source.mattoni_1873.kmv.consolidated_open_v": {"database": "L01_Stage", "schema": "kmv", "name": "consolidated_open_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\sap\\_sources.yml", "original_file_path": "models\\staging\\sap\\_sources.yml", "unique_id": "source.mattoni_1873.kmv.consolidated_open_v", "fqn": ["mattoni_1873", "staging", "sap", "kmv", "consolidated_open_v"], "source_name": "kmv", "source_description": "", "loader": "", "identifier": "consolidated_open_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"kmv\".\"consolidated_open_v\"", "created_at": 1704704696.641824}, "source.mattoni_1873.sfa.dbo_Warehouses": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Warehouses", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Warehouses", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_Warehouses"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Warehouses", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Warehouses\"", "created_at": 1704704696.641824}, "source.mattoni_1873.sfa.dbo_ContentFiles": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ContentFiles", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ContentFiles", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_ContentFiles"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ContentFiles", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ContentFiles\"", "created_at": 1704704696.641824}, "source.mattoni_1873.sfa.dbo_OutletOrderH": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutletOrderH", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutletOrderH", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OutletOrderH"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutletOrderH", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutletOrderH\"", "created_at": 1704704696.6428244}, "source.mattoni_1873.sfa.ps_KPIExecutionFact": {"database": "L01_Stage", "schema": "sfa", "name": "ps_KPIExecutionFact", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.ps_KPIExecutionFact", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "ps_KPIExecutionFact"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "ps_KPIExecutionFact", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"ps_KPIExecutionFact\"", "created_at": 1704704696.6428244}, "source.mattoni_1873.sfa.dbo_ResponsesSingleD": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ResponsesSingleD", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ResponsesSingleD", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_ResponsesSingleD"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ResponsesSingleD", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ResponsesSingleD\"", "created_at": 1704704696.6428244}, "source.mattoni_1873.sfa.dbo_OutLetsCustomField": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutLetsCustomField", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutLetsCustomField", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OutLetsCustomField"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutLetsCustomField", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutLetsCustomField\"", "created_at": 1704704696.6428244}, "source.mattoni_1873.sfa.dbo_OutletOrderD": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutletOrderD", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutletOrderD", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OutletOrderD"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutletOrderD", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutletOrderD\"", "created_at": 1704704696.6428244}, "source.mattoni_1873.sfa.cust_VisitKPIDataMart": {"database": "L01_Stage", "schema": "sfa", "name": "cust_VisitKPIDataMart", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.cust_VisitKPIDataMart", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "cust_VisitKPIDataMart"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "cust_VisitKPIDataMart", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"cust_VisitKPIDataMart\"", "created_at": 1704704696.6428244}, "source.mattoni_1873.sfa.dbo_OutLets": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutLets", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutLets", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OutLets"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutLets", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutLets\"", "created_at": 1704704696.6438355}, "source.mattoni_1873.sfa.dbo_OrganizationalStructure": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OrganizationalStructure", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OrganizationalStructure", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OrganizationalStructure"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OrganizationalStructure", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OrganizationalStructure\"", "created_at": 1704704696.6438355}, "source.mattoni_1873.sfa.cust_OrdersDataMart": {"database": "L01_Stage", "schema": "sfa", "name": "cust_OrdersDataMart", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.cust_OrdersDataMart", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "cust_OrdersDataMart"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "cust_OrdersDataMart", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"cust_OrdersDataMart\"", "created_at": 1704704696.6438355}, "source.mattoni_1873.sfa.dbo_Documents": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Documents", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Documents", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_Documents"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Documents", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Documents\"", "created_at": 1704704696.6438355}, "source.mattoni_1873.sfa.dbo_Networks": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Networks", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Networks", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_Networks"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Networks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Networks\"", "created_at": 1704704696.6438355}, "source.mattoni_1873.sfa.cust_DistributionsDataMart": {"database": "L01_Stage", "schema": "sfa", "name": "cust_DistributionsDataMart", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.cust_DistributionsDataMart", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "cust_DistributionsDataMart"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "cust_DistributionsDataMart", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"cust_DistributionsDataMart\"", "created_at": 1704704696.6438355}, "source.mattoni_1873.sfa.dbo_OrganizationalStructureGeographyLinksActive": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OrganizationalStructureGeographyLinksActive", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OrganizationalStructureGeographyLinksActive", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OrganizationalStructureGeographyLinksActive"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OrganizationalStructureGeographyLinksActive", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OrganizationalStructureGeographyLinksActive\"", "created_at": 1704704696.6448274}, "source.mattoni_1873.sfa.dbo_InaccessibilityReasons": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_InaccessibilityReasons", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_InaccessibilityReasons", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_InaccessibilityReasons"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_InaccessibilityReasons", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_InaccessibilityReasons\"", "created_at": 1704704696.6448274}, "source.mattoni_1873.sfa.dbo_Customers": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Customers", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Customers", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_Customers"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Customers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Customers\"", "created_at": 1704704696.6448274}, "source.mattoni_1873.sfa.dbo_OutletCardStartEndImages": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutletCardStartEndImages", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutletCardStartEndImages", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OutletCardStartEndImages"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutletCardStartEndImages", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutletCardStartEndImages\"", "created_at": 1704704696.6448274}, "source.mattoni_1873.sfa.dbo_HReports": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_HReports", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_HReports", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_HReports"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_HReports", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_HReports\"", "created_at": 1704704696.6448274}, "source.mattoni_1873.sfa.cust_SurveyDataMart": {"database": "L01_Stage", "schema": "sfa", "name": "cust_SurveyDataMart", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.cust_SurveyDataMart", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "cust_SurveyDataMart"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "cust_SurveyDataMart", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"cust_SurveyDataMart\"", "created_at": 1704704696.6448274}, "source.mattoni_1873.sfa.cust_VisitActivityDataMart": {"database": "L01_Stage", "schema": "sfa", "name": "cust_VisitActivityDataMart", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.cust_VisitActivityDataMart", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "cust_VisitActivityDataMart"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "cust_VisitActivityDataMart", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"cust_VisitActivityDataMart\"", "created_at": 1704704696.6458259}, "source.mattoni_1873.sfa.dbo_OutletCardGPS": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutletCardGPS", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutletCardGPS", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OutletCardGPS"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutletCardGPS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutletCardGPS\"", "created_at": 1704704696.6458259}, "source.mattoni_1873.sfa.dbo_ProductCategory": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ProductCategory", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ProductCategory", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_ProductCategory"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ProductCategory", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ProductCategory\"", "created_at": 1704704696.6458259}, "source.mattoni_1873.sfa.ps_KPI": {"database": "L01_Stage", "schema": "sfa", "name": "ps_KPI", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.ps_KPI", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "ps_KPI"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "ps_KPI", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"ps_KPI\"", "created_at": 1704704696.6458259}, "source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_StaffOrganizationalStructureLinksActive", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_StaffOrganizationalStructureLinksActive"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_StaffOrganizationalStructureLinksActive", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_StaffOrganizationalStructureLinksActive\"", "created_at": 1704704696.6458259}, "source.mattoni_1873.sfa.dbo_Staff": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Staff", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Staff", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_Staff"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Staff", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Staff\"", "created_at": 1704704696.6458259}, "source.mattoni_1873.sfa.dbo_ProductStocks": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ProductStocks", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ProductStocks", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_ProductStocks"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ProductStocks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ProductStocks\"", "created_at": 1704704696.6468253}, "source.mattoni_1873.sfa.dbo_DocumentSections": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_DocumentSections", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_DocumentSections", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_DocumentSections"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_DocumentSections", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_DocumentSections\"", "created_at": 1704704696.6468253}, "source.mattoni_1873.sfa.dbo_ResponsesSingleContentD": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ResponsesSingleContentD", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ResponsesSingleContentD", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_ResponsesSingleContentD"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ResponsesSingleContentD", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ResponsesSingleContentD\"", "created_at": 1704704696.6468253}, "source.mattoni_1873.sfa.dbo_OutletDistribution": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutletDistribution", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutletDistribution", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OutletDistribution"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutletDistribution", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutletDistribution\"", "created_at": 1704704696.6468253}, "source.mattoni_1873.sfa.dbo_OutletCardSteps": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutletCardSteps", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutletCardSteps", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OutletCardSteps"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutletCardSteps", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutletCardSteps\"", "created_at": 1704704696.6468253}, "source.mattoni_1873.sfa.dbo_DocumentItems": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_DocumentItems", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_DocumentItems", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_DocumentItems"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_DocumentItems", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_DocumentItems\"", "created_at": 1704704696.6468253}, "source.mattoni_1873.sfa.ps_KPIExecutionPlan": {"database": "L01_Stage", "schema": "sfa", "name": "ps_KPIExecutionPlan", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.ps_KPIExecutionPlan", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "ps_KPIExecutionPlan"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "ps_KPIExecutionPlan", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"ps_KPIExecutionPlan\"", "created_at": 1704704696.6468253}, "source.mattoni_1873.sfa.dbo_QuestionnaireVisibleSections": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_QuestionnaireVisibleSections", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_QuestionnaireVisibleSections", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_QuestionnaireVisibleSections"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_QuestionnaireVisibleSections", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_QuestionnaireVisibleSections\"", "created_at": 1704704696.647825}, "source.mattoni_1873.sfa.dbo_ProductGroups": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ProductGroups", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ProductGroups", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_ProductGroups"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ProductGroups", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ProductGroups\"", "created_at": 1704704696.647825}, "source.mattoni_1873.sfa.dbo_QuestionnaireResponseOnVisit_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_QuestionnaireResponseOnVisit_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_QuestionnaireResponseOnVisit_v", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_QuestionnaireResponseOnVisit_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_QuestionnaireResponseOnVisit_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_QuestionnaireResponseOnVisit_v\"", "created_at": 1704704696.647825}, "source.mattoni_1873.sfa.dbo_ResponsesH": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ResponsesH", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ResponsesH", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_ResponsesH"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ResponsesH", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ResponsesH\"", "created_at": 1704704696.647825}, "source.mattoni_1873.sfa.dbo_DocumentRules": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_DocumentRules", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_DocumentRules", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_DocumentRules"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_DocumentRules", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_DocumentRules\"", "created_at": 1704704696.647825}, "source.mattoni_1873.sfa.dbo_DocumentRuleParams": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_DocumentRuleParams", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_DocumentRuleParams", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_DocumentRuleParams"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_DocumentRuleParams", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_DocumentRuleParams\"", "created_at": 1704704696.647825}, "source.mattoni_1873.sfa.dbo_Products": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Products", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Products", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_Products"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Products", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Products\"", "created_at": 1704704696.6488283}, "source.mattoni_1873.sfa.dbo_OutLetCardH": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutLetCardH", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutLetCardH", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_OutLetCardH"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutLetCardH", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutLetCardH\"", "created_at": 1704704696.6488283}, "source.mattoni_1873.sfa.dbo_ProductPromotionActive": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ProductPromotionActive", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve\\_sources.yml", "original_file_path": "models\\staging\\soft_serve\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ProductPromotionActive", "fqn": ["mattoni_1873", "staging", "soft_serve", "sfa", "dbo_ProductPromotionActive"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ProductPromotionActive", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ProductPromotionActive\"", "created_at": 1704704696.6488283}, "source.mattoni_1873.sfa.dbo_Warehouses_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Warehouses_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Warehouses_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_Warehouses_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Warehouses_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Warehouses_v\"", "created_at": 1704704696.6488283}, "source.mattoni_1873.sfa.dbo_ContentFiles_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ContentFiles_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ContentFiles_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_ContentFiles_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ContentFiles_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ContentFiles_v\"", "created_at": 1704704696.6488283}, "source.mattoni_1873.sfa.dbo_OutletOrderH_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutletOrderH_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutletOrderH_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_OutletOrderH_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutletOrderH_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutletOrderH_v\"", "created_at": 1704704696.6488283}, "source.mattoni_1873.sfa.ps_KPIExecutionFact_v": {"database": "L01_Stage", "schema": "sfa", "name": "ps_KPIExecutionFact_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.ps_KPIExecutionFact_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "ps_KPIExecutionFact_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "ps_KPIExecutionFact_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"ps_KPIExecutionFact_v\"", "created_at": 1704704696.6498258}, "source.mattoni_1873.sfa.dbo_ResponsesSingleD_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ResponsesSingleD_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ResponsesSingleD_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_ResponsesSingleD_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ResponsesSingleD_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ResponsesSingleD_v\"", "created_at": 1704704696.6498258}, "source.mattoni_1873.sfa.dbo_OutLetsCustomField_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutLetsCustomField_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutLetsCustomField_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_OutLetsCustomField_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutLetsCustomField_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutLetsCustomField_v\"", "created_at": 1704704696.6498258}, "source.mattoni_1873.sfa.dbo_OutletOrderD_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutletOrderD_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutletOrderD_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_OutletOrderD_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutletOrderD_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutletOrderD_v\"", "created_at": 1704704696.6498258}, "source.mattoni_1873.sfa.dbo_OutLets_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutLets_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutLets_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_OutLets_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutLets_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutLets_v\"", "created_at": 1704704696.6498258}, "source.mattoni_1873.sfa.dbo_OrganizationalStructure_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OrganizationalStructure_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OrganizationalStructure_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_OrganizationalStructure_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OrganizationalStructure_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OrganizationalStructure_v\"", "created_at": 1704704696.6498258}, "source.mattoni_1873.sfa.dbo_Documents_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Documents_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Documents_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_Documents_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Documents_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Documents_v\"", "created_at": 1704704696.6508236}, "source.mattoni_1873.sfa.dbo_Networks_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Networks_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Networks_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_Networks_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Networks_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Networks_v\"", "created_at": 1704704696.6508236}, "source.mattoni_1873.sfa.dbo_OrganizationalStructureGeographyLinksActive_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OrganizationalStructureGeographyLinksActive_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OrganizationalStructureGeographyLinksActive_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_OrganizationalStructureGeographyLinksActive_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OrganizationalStructureGeographyLinksActive_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OrganizationalStructureGeographyLinksActive_v\"", "created_at": 1704704696.6508236}, "source.mattoni_1873.sfa.dbo_InaccessibilityReasons_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_InaccessibilityReasons_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_InaccessibilityReasons_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_InaccessibilityReasons_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_InaccessibilityReasons_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_InaccessibilityReasons_v\"", "created_at": 1704704696.6508236}, "source.mattoni_1873.sfa.dbo_Customers_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Customers_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Customers_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_Customers_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Customers_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Customers_v\"", "created_at": 1704704696.6508236}, "source.mattoni_1873.sfa.dbo_HReports_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_HReports_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_HReports_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_HReports_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_HReports_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_HReports_v\"", "created_at": 1704704696.6508236}, "source.mattoni_1873.sfa.dbo_OutletCardGPS_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutletCardGPS_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutletCardGPS_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_OutletCardGPS_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutletCardGPS_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutletCardGPS_v\"", "created_at": 1704704696.6518235}, "source.mattoni_1873.sfa.dbo_ProductCategory_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ProductCategory_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ProductCategory_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_ProductCategory_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ProductCategory_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ProductCategory_v\"", "created_at": 1704704696.6518235}, "source.mattoni_1873.sfa.ps_KPI_v": {"database": "L01_Stage", "schema": "sfa", "name": "ps_KPI_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.ps_KPI_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "ps_KPI_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "ps_KPI_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"ps_KPI_v\"", "created_at": 1704704696.6518235}, "source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_StaffOrganizationalStructureLinksActive_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_StaffOrganizationalStructureLinksActive_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_StaffOrganizationalStructureLinksActive_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_StaffOrganizationalStructureLinksActive_v\"", "created_at": 1704704696.6518235}, "source.mattoni_1873.sfa.dbo_Staff_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Staff_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Staff_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_Staff_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Staff_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Staff_v\"", "created_at": 1704704696.6518235}, "source.mattoni_1873.sfa.dbo_ProductStocks_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ProductStocks_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ProductStocks_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_ProductStocks_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ProductStocks_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ProductStocks_v\"", "created_at": 1704704696.6518235}, "source.mattoni_1873.sfa.dbo_DocumentSections_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_DocumentSections_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_DocumentSections_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_DocumentSections_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_DocumentSections_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_DocumentSections_v\"", "created_at": 1704704696.652828}, "source.mattoni_1873.sfa.dbo_ResponsesSingleContentD_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ResponsesSingleContentD_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ResponsesSingleContentD_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_ResponsesSingleContentD_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ResponsesSingleContentD_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ResponsesSingleContentD_v\"", "created_at": 1704704696.652828}, "source.mattoni_1873.sfa.dbo_OutletDistribution_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutletDistribution_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutletDistribution_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_OutletDistribution_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutletDistribution_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutletDistribution_v\"", "created_at": 1704704696.652828}, "source.mattoni_1873.sfa.dbo_DocumentItems_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_DocumentItems_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_DocumentItems_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_DocumentItems_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_DocumentItems_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_DocumentItems_v\"", "created_at": 1704704696.6538272}, "source.mattoni_1873.sfa.ps_KPIExecutionPlan_v": {"database": "L01_Stage", "schema": "sfa", "name": "ps_KPIExecutionPlan_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.ps_KPIExecutionPlan_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "ps_KPIExecutionPlan_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "ps_KPIExecutionPlan_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"ps_KPIExecutionPlan_v\"", "created_at": 1704704696.6538272}, "source.mattoni_1873.sfa.dbo_QuestionnaireVisibleSections_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_QuestionnaireVisibleSections_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_QuestionnaireVisibleSections_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_QuestionnaireVisibleSections_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_QuestionnaireVisibleSections_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_QuestionnaireVisibleSections_v\"", "created_at": 1704704696.6538272}, "source.mattoni_1873.sfa.dbo_ProductGroups_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ProductGroups_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ProductGroups_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_ProductGroups_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ProductGroups_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ProductGroups_v\"", "created_at": 1704704696.6538272}, "source.mattoni_1873.sfa.dbo_QuestionnaireResponseOnVisit_v_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_QuestionnaireResponseOnVisit_v_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_QuestionnaireResponseOnVisit_v_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_QuestionnaireResponseOnVisit_v_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_QuestionnaireResponseOnVisit_v_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_QuestionnaireResponseOnVisit_v_v\"", "created_at": 1704704696.6538272}, "source.mattoni_1873.sfa.dbo_ResponsesH_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_ResponsesH_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_ResponsesH_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_ResponsesH_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_ResponsesH_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_ResponsesH_v\"", "created_at": 1704704696.6548297}, "source.mattoni_1873.sfa.dbo_Products_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_Products_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_Products_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_Products_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_Products_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_Products_v\"", "created_at": 1704704696.6548297}, "source.mattoni_1873.sfa.dbo_OutLetCardH_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_OutLetCardH_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_OutLetCardH_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_OutLetCardH_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_OutLetCardH_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_OutLetCardH_v\"", "created_at": 1704704696.6548297}, "source.mattoni_1873.sfa.dbo_MobileModuleUser_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_MobileModuleUser_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_MobileModuleUser_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_MobileModuleUser_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_MobileModuleUser_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_MobileModuleUser_v\"", "created_at": 1704704696.6548297}, "source.mattoni_1873.sfa.dbo_MobileModuleUserTimeTrack_v": {"database": "L01_Stage", "schema": "sfa", "name": "dbo_MobileModuleUserTimeTrack_v", "resource_type": "source", "package_name": "mattoni_1873", "path": "models\\staging\\soft_serve_views\\_sources.yml", "original_file_path": "models\\staging\\soft_serve_views\\_sources.yml", "unique_id": "source.mattoni_1873.sfa.dbo_MobileModuleUserTimeTrack_v", "fqn": ["mattoni_1873", "staging", "soft_serve_views", "sfa", "dbo_MobileModuleUserTimeTrack_v"], "source_name": "sfa", "source_description": "", "loader": "", "identifier": "dbo_MobileModuleUserTimeTrack_v", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"L01_Stage\".\"sfa\".\"dbo_MobileModuleUserTimeTrack_v\"", "created_at": 1704704696.6548297}}, "macros": {"macro.mattoni_1873.add_default_row": {"name": "add_default_row", "resource_type": "macro", "package_name": "mattoni_1873", "path": "macros\\add_default_row.sql", "original_file_path": "macros\\add_default_row.sql", "unique_id": "macro.mattoni_1873.add_default_row", "macro_sql": "{% macro add_default_row(model_ref) %}\r\n{% set columns = adapter.get_columns_in_relation(model_ref) %}\r\n\r\nunion all\r\n\r\nselect\r\n    {% for column in columns %}\r\n        case \r\n            when '{{ column.data_type }}' in ('int', 'bigint', 'smallint', 'tinyint', 'numeric', 'decimal', 'float', 'real') then '-1'\r\n            when '{{ column.data_type }}' in ('varchar', 'char', 'text', 'nvarchar', 'nchar') then 'N/A'\r\n            -- Add more data type mappings as needed\r\n            else null\r\n        end as {{ column.name }}{{ \", \" if not loop.last else \"\" }}\r\n    {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Appends a default row to the specified table based on each column's data type. Numeric types default to `-1`, string types to `'N/A'`, and others to `null`.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://macros\\_macros.yml", "arguments": [{"name": "model_ref", "type": "string", "description": "The reference to the model (table) to which the default row will be appended."}], "created_at": 1704704696.3928175, "supported_languages": null}, "macro.mattoni_1873.convert_country_to_code": {"name": "convert_country_to_code", "resource_type": "macro", "package_name": "mattoni_1873", "path": "macros\\convert_country_to_code.sql", "original_file_path": "macros\\convert_country_to_code.sql", "unique_id": "macro.mattoni_1873.convert_country_to_code", "macro_sql": "{% macro convert_country_to_code(country_name) %}\r\ncase\r\n  when {{ country_name }} = 'CZ' then 422\r\n  when {{ country_name }} = 'SK' then 423\r\n  when {{ country_name }} = 'HU' then 424\r\n  when {{ country_name }} is null then -1\r\n  else -2\r\nend\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Converts country abbreviations to specific numerical codes. Returns -1 for null values and -2 for unrecognized values.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://macros\\_macros.yml", "arguments": [{"name": "country_name", "type": "string", "description": "The column containing the country abbreviations to be converted."}], "created_at": 1704704696.3908176, "supported_languages": null}, "macro.mattoni_1873.expand_hierarchy": {"name": "expand_hierarchy", "resource_type": "macro", "package_name": "mattoni_1873", "path": "macros\\expand_hierarchy.sql", "original_file_path": "macros\\expand_hierarchy.sql", "unique_id": "macro.mattoni_1873.expand_hierarchy", "macro_sql": "{% macro expand_hierarchy(table_name) %}\r\nSELECT \r\n    t1.Section_ID AS Level1_ID,\r\n    t2.Section_ID AS Level2_ID,\r\n    t3.Section_ID AS Level3_ID,\r\n    t4.Section_ID AS Level4_ID,\r\n    t5.Section_ID AS Level5_ID\r\nFROM \r\n    {{ table_name }} AS t1\r\nLEFT JOIN \r\n    {{ table_name }} AS t2 ON t1.Section_ID = t2.ParentSection_ID\r\nLEFT JOIN \r\n    {{ table_name }} AS t3 ON t2.Section_ID = t3.ParentSection_ID\r\nLEFT JOIN \r\n    {{ table_name }} AS t4 ON t3.Section_ID = t4.ParentSection_ID\r\nLEFT JOIN \r\n    {{ table_name }} AS t5 ON t4.Section_ID = t5.ParentSection_ID\r\nWHERE \r\n    t1.ParentSection_ID IS NULL;\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8617857, "supported_languages": null}, "macro.mattoni_1873.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "mattoni_1873", "path": "macros\\generate_surrogate_key.sql", "original_file_path": "macros\\generate_surrogate_key.sql", "unique_id": "macro.mattoni_1873.generate_surrogate_key", "macro_sql": "{% macro generate_surrogate_key(column_1, column_2) %}\r\nCONCAT(\r\n        ISNULL(CAST({{ column_1 }} AS NVARCHAR(MAX)), '-1'),\r\n        ISNULL(CAST({{ column_2 }} AS NVARCHAR(MAX)), '-1')\r\n    )\r\n    as _surrogate_key\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.862798, "supported_languages": null}, "macro.mattoni_1873.get_latest_version": {"name": "get_latest_version", "resource_type": "macro", "package_name": "mattoni_1873", "path": "macros\\get_latest_version.sql", "original_file_path": "macros\\get_latest_version.sql", "unique_id": "macro.mattoni_1873.get_latest_version", "macro_sql": "{% macro get_latest_version(table_name, columns) %}\r\n\r\n{% set column_strings = [] %}\r\n{% for column in columns %}\r\n    {% do column_strings.append(table_name + \".\" + column) %}\r\n{% endfor %}\r\n{% set columns_list = \", \".join(column_strings) %}\r\n\r\nselect\r\n    {{ columns_list }}\r\nfrom [{{ table_name }}]\r\n\r\nleft join [{{ table_name }}] as table2\r\non [{{ table_name }}].[{{ columns[0] }}] = table2.[{{ columns[0] }}]\r\nand [{{ table_name }}].dbt_valid_to < table2.dbt_valid_to\r\n\r\nwhere table2.[{{ columns[0] }}] is null\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.863789, "supported_languages": null}, "macro.mattoni_1873.left_join_date_to_validity": {"name": "left_join_date_to_validity", "resource_type": "macro", "package_name": "mattoni_1873", "path": "macros\\left_join_date_to_validity.sql", "original_file_path": "macros\\left_join_date_to_validity.sql", "unique_id": "macro.mattoni_1873.left_join_date_to_validity", "macro_sql": "{% macro left_join_date_to_validity(original_table, original_id, original_date, join_table, join_id, join_valid_from, join_valid_to) %}\r\n\r\nleft join {{join_table}}\r\n\r\n    on {{original_table}}.{{original_id}} = {{join_table}}.{{join_id}}\r\nand\r\n    {{original_table}}.{{original_date}} between {{join_table}}.{{join_valid_from}} and {{join_table}}.{{join_valid_to}}\r\nand \r\n    {{original_table}}.country_id = {{join_table}}.country_id\r\n    \r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Expects **country_id in both models!!!** Performs a LEFT JOIN based on matching IDs, date validity, and country ID.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "mattoni_1873://macros\\_macros.yml", "arguments": [{"name": "original_table", "type": "string", "description": "The name of the original table."}, {"name": "original_id", "type": "string", "description": "The ID column of the original table."}, {"name": "original_date", "type": "string", "description": "The date column of the original table."}, {"name": "join_table", "type": "string", "description": "The name of the table to be joined."}, {"name": "join_id", "type": "string", "description": "The ID column of the join table."}, {"name": "join_valid_from", "type": "string", "description": "The start date column of the join table's validity period."}, {"name": "join_valid_to", "type": "string", "description": "The end date column of the join table's validity period."}], "created_at": 1704704696.389818, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_show_grant_sql": {"name": "sqlserver__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_show_grant_sql", "macro_sql": "{% macro sqlserver__get_show_grant_sql(relation) %}\n    select\n        GRANTEE as grantee,\n        PRIVILEGE_TYPE as privilege_type\n    from INFORMATION_SCHEMA.TABLE_PRIVILEGES {{ information_schema_hints() }}\n    where TABLE_CATALOG = '{{ relation.database }}'\n      and TABLE_SCHEMA = '{{ relation.schema }}'\n      and TABLE_NAME = '{{ relation.identifier }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8677895, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_grant_sql": {"name": "sqlserver__get_grant_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_grant_sql", "macro_sql": "\n\n\n{%- macro sqlserver__get_grant_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8687692, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_revoke_sql": {"name": "sqlserver__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_revoke_sql", "macro_sql": "{%- macro sqlserver__get_revoke_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8697903, "supported_languages": null}, "macro.dbt_sqlserver.get_provision_sql": {"name": "get_provision_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_sqlserver.get_provision_sql", "macro_sql": "{% macro get_provision_sql(relation, privilege, grantees) %}\n    {% for grantee in grantees %}\n        if not exists(select name from sys.database_principals where name = '{{ grantee }}')\n        create user [{{ grantee }}] from external provider;\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8707867, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__apply_grants": {"name": "sqlserver__apply_grants", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__apply_grants", "macro_sql": "{% macro sqlserver__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n\n            {% if config.get('auto_provision_aad_principals', False) %}\n                {% set provision_statement_list = get_dcl_statement_list(relation, needs_granting, get_provision_sql) %}\n            {% else %}\n                {% set provision_statement_list = [] %}\n            {% endif %}\n\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + provision_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8737886, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_columns_in_relation": {"name": "sqlserver__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_columns_in_relation", "macro_sql": "{% macro sqlserver__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n\n    with mapping as (\n        select\n            row_number() over (partition by object_name(c.object_id) order by c.column_id) as ordinal_position,\n            c.name collate database_default as column_name,\n            t.name as data_type,\n            c.max_length as character_maximum_length,\n            c.precision as numeric_precision,\n            c.scale as numeric_scale\n        from [{{ 'tempdb' if '#' in relation.identifier else relation.database }}].sys.columns c {{ information_schema_hints() }}\n        inner join sys.types t {{ information_schema_hints() }}\n        on c.user_type_id = t.user_type_id\n        where c.object_id = object_id('{{ 'tempdb..' ~ relation.include(database=false, schema=false) if '#' in relation.identifier else relation }}')\n    )\n\n    select\n        column_name,\n        data_type,\n        character_maximum_length,\n        numeric_precision,\n        numeric_scale\n    from mapping\n    order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_sqlserver.information_schema_hints", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.877787, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_columns_in_query": {"name": "sqlserver__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_columns_in_query", "macro_sql": "{% macro sqlserver__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select TOP 0 * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where 0 = 1\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8788114, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__alter_column_type": {"name": "sqlserver__alter_column_type", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__alter_column_type", "macro_sql": "{% macro sqlserver__alter_column_type(relation, column_name, new_column_type) %}\n\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') -%}\n    alter {{ relation.type }} {{ relation }} add \"{{ tmp_column }}\" {{ new_column_type }};\n  {%- endcall -%}\n  {% call statement('alter_column_type') -%}\n    update {{ relation }} set \"{{ tmp_column }}\" = \"{{ column_name }}\";\n  {%- endcall -%}\n  {% call statement('alter_column_type') -%}\n    alter {{ relation.type }} {{ relation }} drop column \"{{ column_name }}\";\n  {%- endcall -%}\n  {% call statement('alter_column_type') -%}\n    exec sp_rename '{{ relation | replace('\"', '') }}.{{ tmp_column }}', '{{ column_name }}', 'column'\n  {%- endcall -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8797657, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__alter_relation_add_remove_columns": {"name": "sqlserver__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__alter_relation_add_remove_columns", "macro_sql": "{% macro sqlserver__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  {% call statement('add_drop_columns') -%}\n    {% if add_columns %}\n        alter {{ relation.type }} {{ relation }}\n        add {% for column in add_columns %}\"{{ column.name }}\" {{ column.data_type }}{{ ', ' if not loop.last }}{% endfor %};\n    {% endif %}\n\n    {% if remove_columns %}\n        alter {{ relation.type }} {{ relation }}\n        drop column {% for column in remove_columns %}\"{{ column.name }}\"{{ ',' if not loop.last }}{% endfor %};\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8807733, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index": {"name": "sqlserver__create_clustered_columnstore_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index", "macro_sql": "{% macro sqlserver__create_clustered_columnstore_index(relation) -%}\n  {%- set cci_name = (relation.schema ~ '_' ~ relation.identifier ~ '_cci') | replace(\".\", \"\") | replace(\" \", \"\") -%}\n  {%- set relation_name = relation.schema ~ '_' ~ relation.identifier -%}\n  {%- set full_relation = '\"' ~ relation.schema ~ '\".\"' ~ relation.identifier ~ '\"' -%}\n  use [{{ relation.database }}];\n  if EXISTS (\n        SELECT *\n        FROM sys.indexes {{ information_schema_hints() }}\n        WHERE name = '{{cci_name}}'\n        AND object_id=object_id('{{relation_name}}')\n    )\n  DROP index {{full_relation}}.{{cci_name}}\n  CREATE CLUSTERED COLUMNSTORE INDEX {{cci_name}}\n    ON {{full_relation}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8857722, "supported_languages": null}, "macro.dbt_sqlserver.drop_xml_indexes": {"name": "drop_xml_indexes", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n\n{{ log(\"Running drop_xml_indexes() macro...\") }}\n\ndeclare @drop_xml_indexes nvarchar(max);\nselect @drop_xml_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n\tfrom sys.indexes {{ information_schema_hints() }}\n    inner join sys.tables {{ information_schema_hints() }}\n    on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'XML'\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_xml_indexes;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8857722, "supported_languages": null}, "macro.dbt_sqlserver.drop_spatial_indexes": {"name": "drop_spatial_indexes", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ log(\"Running drop_spatial_indexes() macro...\") }}\n\ndeclare @drop_spatial_indexes nvarchar(max);\nselect @drop_spatial_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes {{ information_schema_hints() }}\n    inner join sys.tables {{ information_schema_hints() }}\n    on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'Spatial'\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_spatial_indexes;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8867738, "supported_languages": null}, "macro.dbt_sqlserver.drop_fk_constraints": {"name": "drop_fk_constraints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n\n{{ log(\"Running drop_fk_constraints() macro...\") }}\n\ndeclare @drop_fk_constraints nvarchar(max);\nselect @drop_fk_constraints = (\n    select 'IF OBJECT_ID(''' + SCHEMA_NAME(CONVERT(VARCHAR(MAX), sys.foreign_keys.[schema_id])) + '.' + sys.foreign_keys.[name] + ''', ''F'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.foreign_keys.[schema_id]) + '].[' + OBJECT_NAME(sys.foreign_keys.[parent_object_id]) + '] DROP CONSTRAINT [' + sys.foreign_keys.[name]+ '];'\n    from sys.foreign_keys\n    inner join sys.tables on sys.foreign_keys.[referenced_object_id] = sys.tables.[object_id]\n    where sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_fk_constraints;\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8867738, "supported_languages": null}, "macro.dbt_sqlserver.drop_pk_constraints": {"name": "drop_pk_constraints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_xml_indexes() }}\n\n{{ drop_spatial_indexes() }}\n\n{{ drop_fk_constraints() }}\n\n{{ log(\"Running drop_pk_constraints() macro...\") }}\n\ndeclare @drop_pk_constraints nvarchar(max);\nselect @drop_pk_constraints = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + sys.tables.[name] + '] DROP CONSTRAINT [' + sys.indexes.[name]+ '];'\n    from sys.indexes\n    inner join sys.tables on sys.indexes.[object_id] = sys.tables.[object_id]\n    where sys.indexes.is_primary_key = 1\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_pk_constraints;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.drop_xml_indexes", "macro.dbt_sqlserver.drop_spatial_indexes", "macro.dbt_sqlserver.drop_fk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.887768, "supported_languages": null}, "macro.dbt_sqlserver.drop_all_indexes_on_table": {"name": "drop_all_indexes_on_table", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_all_indexes_on_table", "macro_sql": "{% macro drop_all_indexes_on_table() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_pk_constraints() }}\n\n{{ log(\"Dropping remaining indexes...\") }}\n\ndeclare @drop_remaining_indexes_last nvarchar(max);\nselect @drop_remaining_indexes_last = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes {{ information_schema_hints() }}\n    inner join sys.tables {{ information_schema_hints() }}\n    on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_remaining_indexes_last;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.drop_pk_constraints", "macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8887684, "supported_languages": null}, "macro.dbt_sqlserver.create_clustered_index": {"name": "create_clustered_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n\n{{ log(\"Creating clustered index...\") }}\n\n{% set idx_name = \"clustered_\" + local_md5(columns | join(\"_\")) %}\n\nif not exists(select *\n                from sys.indexes {{ information_schema_hints() }}\n                where name = '{{ idx_name }}'\n                and object_id = OBJECT_ID('{{ this }}')\n)\nbegin\n\ncreate\n{% if unique -%}\nunique\n{% endif %}\nclustered index\n    {{ idx_name }}\n      on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\nend\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8897676, "supported_languages": null}, "macro.dbt_sqlserver.create_nonclustered_index": {"name": "create_nonclustered_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n\n{{ log(\"Creating nonclustered index...\") }}\n\n{% if includes -%}\n    {% set idx_name = (\n        \"nonclustered_\"\n        + local_md5(columns | join(\"_\"))\n        + \"_incl_\"\n        + local_md5(includes | join(\"_\"))\n    ) %}\n{% else -%}\n    {% set idx_name = \"nonclustered_\" + local_md5(columns | join(\"_\")) %}\n{% endif %}\n\nif not exists(select *\n                from sys.indexes {{ information_schema_hints() }}\n                where name = '{{ idx_name }}'\n                and object_id = OBJECT_ID('{{ this }}')\n)\nbegin\ncreate nonclustered index\n    {{ idx_name }}\n      on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\n      {% if includes -%}\n        include ({{ '[' + includes|join(\"], [\") + ']' }})\n      {% endif %}\nend\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8907666, "supported_languages": null}, "macro.dbt_sqlserver.information_schema_hints": {"name": "information_schema_hints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.information_schema_hints", "macro_sql": "{% macro information_schema_hints() %}\n    {{ return(adapter.dispatch('information_schema_hints')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.895769, "supported_languages": null}, "macro.dbt_sqlserver.default__information_schema_hints": {"name": "default__information_schema_hints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.default__information_schema_hints", "macro_sql": "{% macro default__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.895769, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__information_schema_hints": {"name": "sqlserver__information_schema_hints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__information_schema_hints", "macro_sql": "{% macro sqlserver__information_schema_hints() %}with (nolock){% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.895769, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_catalog": {"name": "sqlserver__get_catalog", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_catalog", "macro_sql": "{% macro sqlserver__get_catalog(information_schemas, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    with\n    principals as (\n        select\n            name as principal_name,\n            principal_id as principal_id\n        from\n            sys.database_principals {{ information_schema_hints() }}\n    ),\n\n    schemas as (\n        select\n            name as schema_name,\n            schema_id as schema_id,\n            principal_id as principal_id\n        from\n            sys.schemas {{ information_schema_hints() }}\n    ),\n\n    tables as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'BASE TABLE' as table_type\n        from\n            sys.tables {{ information_schema_hints() }}\n    ),\n\n    tables_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            tables\n        join schemas on tables.schema_id = schemas.schema_id\n    ),\n\n    views as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'VIEW' as table_type\n        from\n            sys.views {{ information_schema_hints() }}\n    ),\n\n    views_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            views\n        join schemas on views.schema_id = schemas.schema_id\n    ),\n\n    tables_and_views as (\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            tables_with_metadata\n        join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n        union all\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            views_with_metadata\n        join principals on views_with_metadata.owner_principal_id = principals.principal_id\n    ),\n\n    cols as (\n\n        select\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n            column_name,\n            ordinal_position as column_index,\n            data_type as column_type\n        from INFORMATION_SCHEMA.COLUMNS {{ information_schema_hints() }}\n\n    )\n\n    select\n        cols.table_database,\n        tv.schema_name as table_schema,\n        tv.table_name,\n        tv.table_type,\n        null as table_comment,\n        tv.principal_name as table_owner,\n        cols.column_name,\n        cols.column_index,\n        cols.column_type,\n        null as column_comment\n    from tables_and_views tv\n             join cols on tv.schema_name = cols.table_schema and tv.table_name = cols.table_name\n    order by column_index\n\n    {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8977673, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__information_schema_name": {"name": "sqlserver__information_schema_name", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__information_schema_name", "macro_sql": "{% macro sqlserver__information_schema_name(database) -%}\n  {%- if database -%}\n    [{{ database }}].INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8977673, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__list_schemas": {"name": "sqlserver__list_schemas", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__list_schemas", "macro_sql": "{% macro sqlserver__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n    USE {{ database }};\n    select  name as [schema]\n    from sys.schemas {{ information_schema_hints() }}\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8987677, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__check_schema_exists": {"name": "sqlserver__check_schema_exists", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__check_schema_exists", "macro_sql": "{% macro sqlserver__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    --USE {{ database_name }}\n    SELECT count(*) as schema_exist FROM sys.schemas WHERE name = '{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8997676, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__list_relations_without_caching": {"name": "sqlserver__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__list_relations_without_caching", "macro_sql": "{% macro sqlserver__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      table_catalog as [database],\n      table_name as [name],\n      table_schema as [schema],\n      case when table_type = 'BASE TABLE' then 'table'\n           when table_type = 'VIEW' then 'view'\n           else table_type\n      end as table_type\n\n    from [{{ schema_relation.database }}].INFORMATION_SCHEMA.TABLES {{ information_schema_hints() }}\n    where table_schema = '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.8997676, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__make_temp_relation": {"name": "sqlserver__make_temp_relation", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__make_temp_relation", "macro_sql": "{% macro sqlserver__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = '#' ~ base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9037673, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_relation": {"name": "sqlserver__drop_relation", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__drop_relation", "macro_sql": "{% macro sqlserver__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    {{ sqlserver__drop_relation_script(relation) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_sqlserver.sqlserver__drop_relation_script"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9047673, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_relation_script": {"name": "sqlserver__drop_relation_script", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__drop_relation_script", "macro_sql": "{% macro sqlserver__drop_relation_script(relation) -%}\n    {% call statement('find_references', fetch_result=true) %}\n        USE [{{ relation.database }}];\n        select\n            sch.name as schema_name,\n            obj.name as view_name\n        from sys.sql_expression_dependencies refs\n        inner join sys.objects obj\n        on refs.referencing_id = obj.object_id\n        inner join sys.schemas sch\n        on obj.schema_id = sch.schema_id\n        where refs.referenced_database_name = '{{ relation.database }}'\n        and refs.referenced_schema_name = '{{ relation.schema }}'\n        and refs.referenced_entity_name = '{{ relation.identifier }}'\n        and refs.referencing_class = 1\n        and obj.type = 'V'\n    {% endcall %}\n    {% set references = load_result('find_references')['data'] %}\n    {% for reference in references -%}\n        -- dropping referenced view {{ reference[0] }}.{{ reference[1] }}\n        {{ sqlserver__drop_relation_script(relation.incorporate(\n            type=\"view\",\n            path={\"schema\": reference[0], \"identifier\": reference[1]})) }}\n    {% endfor %}\n    {% if relation.type == 'view' -%}\n        {% set object_id_type = 'V' %}\n    {% elif relation.type == 'table'%}\n        {% set object_id_type = 'U' %}\n    {%- else -%}\n        {{ exceptions.raise_not_implemented('Invalid relation being dropped: ' ~ relation) }}\n    {% endif %}\n    USE [{{ relation.database }}];\n    if object_id ('{{ relation.include(database=False) }}','{{ object_id_type }}') is not null\n        begin\n            drop {{ relation.type }} {{ relation.include(database=False) }}\n        end\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.907772, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__rename_relation": {"name": "sqlserver__rename_relation", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__rename_relation", "macro_sql": "{% macro sqlserver__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    USE [{{ to_relation.database }}];\n    EXEC sp_rename '{{ from_relation.schema }}.{{ from_relation.identifier }}', '{{ to_relation.identifier }}'\n    IF EXISTS(\n    SELECT *\n    FROM sys.indexes {{ information_schema_hints() }}\n    WHERE name='{{ from_relation.schema }}_{{ from_relation.identifier }}_cci' and object_id = OBJECT_ID('{{ from_relation.schema }}.{{ to_relation.identifier }}'))\n    EXEC sp_rename N'{{ from_relation.schema }}.{{ to_relation.identifier }}.{{ from_relation.schema }}_{{ from_relation.identifier }}_cci', N'{{ from_relation.schema }}_{{ to_relation.identifier }}_cci', N'INDEX'\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_sqlserver.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9087682, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_schema": {"name": "sqlserver__create_schema", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_schema", "macro_sql": "{% macro sqlserver__create_schema(relation) -%}\n  {% call statement('create_schema') -%}\n    USE [{{ relation.database }}];\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.schema }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9107676, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_schema_with_authorization": {"name": "sqlserver__create_schema_with_authorization", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_schema_with_authorization", "macro_sql": "{% macro sqlserver__create_schema_with_authorization(relation, schema_authorization) -%}\n  {% call statement('create_schema') -%}\n    USE [{{ relation.database }}];\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.schema }}] AUTHORIZATION [{{ schema_authorization }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9117694, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_schema": {"name": "sqlserver__drop_schema", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__drop_schema", "macro_sql": "{% macro sqlserver__drop_schema(relation) -%}\n  {%- set relations_in_schema = list_relations_without_caching(relation) %}\n\n  {% for row in relations_in_schema %}\n    {%- set schema_relation = api.Relation.create(database=relation.database,\n                                               schema=relation.schema,\n                                               identifier=row[1],\n                                               type=row[3]\n                                               ) -%}\n    {% do drop_relation(schema_relation) %}\n  {%- endfor %}\n\n  {% call statement('drop_schema') -%}\n      IF EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n      BEGIN\n      EXEC('DROP SCHEMA {{ relation.schema }}')\n      END  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.list_relations_without_caching", "macro.dbt.drop_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9127705, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql": {"name": "sqlserver__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql", "macro_sql": "{% macro sqlserver__get_incremental_default_sql(arg_dict) %}\n\n    {% if arg_dict[\"unique_key\"] %}\n        {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n    {% else %}\n        {% do return(get_incremental_append_sql(arg_dict)) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9137728, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_merge_sql": {"name": "sqlserver__get_merge_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_merge_sql", "macro_sql": "{% macro sqlserver__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n  {{ default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9167717, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql": {"name": "sqlserver__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql", "macro_sql": "{% macro sqlserver__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n  {{ default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.91777, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql": {"name": "sqlserver__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql", "macro_sql": "{% macro sqlserver__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{ target }}\n            where exists (\n                select null\n                from {{ source }}\n                where\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n\n            )\n            {% if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {% endif %};\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.919769, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_table_as": {"name": "sqlserver__create_table_as", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_table_as", "macro_sql": "{% macro sqlserver__create_table_as(temporary, relation, sql) -%}\n   {#- TODO: add contracts here when in dbt 1.5 -#}\n   {%- set sql_header = config.get('sql_header', none) -%}\n   {%- set as_columnstore = config.get('as_columnstore', default=true) -%}\n   {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n   {%- set tmp_relation = relation.incorporate(\n        path={\"identifier\": relation.identifier.replace(\"#\", \"\") ~ '_temp_view'},\n        type='view') -%}\n\n   {{- sql_header if sql_header is not none -}}\n\n    -- drop previous temp view\n   {{- sqlserver__drop_relation_script(tmp_relation) }}\n\n    -- create temp view\n   USE [{{ relation.database }}];\n   EXEC('create view {{ tmp_relation.include(database=False) }} as\n    {{ temp_view_sql }}\n    ');\n\n   -- select into the table and create it that way\n   {# TempDB schema is ignored, always goes to dbo #}\n   SELECT *\n   INTO {{ relation.include(database=False, schema=(not temporary))  }}\n   FROM {{ tmp_relation }}\n\n   -- drop temp view\n   {{ sqlserver__drop_relation_script(tmp_relation) }}\n\n   {%- if not temporary and as_columnstore -%}\n        -- add columnstore index\n        {{ sqlserver__create_clustered_columnstore_index(relation) }}\n   {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt_sqlserver.sqlserver__drop_relation_script", "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9237754, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_view_as": {"name": "sqlserver__create_view_as", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_view_as", "macro_sql": "{% macro sqlserver__create_view_as(relation, sql) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    USE [{{ relation.database }}];\n    {{ sqlserver__create_view_exec(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_view_exec"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.924773, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_view_exec": {"name": "sqlserver__create_view_exec", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_view_exec", "macro_sql": "{% macro sqlserver__create_view_exec(relation, sql) -%}\n    {#- TODO: add contracts here when in dbt 1.5 -#}\n    {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n    execute('create view {{ relation.include(database=False) }} as\n        {{ temp_view_sql }}\n    ');\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.924773, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_binding_char": {"name": "sqlserver__get_binding_char", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_binding_char", "macro_sql": "{% macro sqlserver__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.926772, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_batch_size": {"name": "sqlserver__get_batch_size", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_batch_size", "macro_sql": "{% macro sqlserver__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.926772, "supported_languages": null}, "macro.dbt_sqlserver.calc_batch_size": {"name": "calc_batch_size", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.calc_batch_size", "macro_sql": "{% macro calc_batch_size(num_columns) %}\n    {#\n        SQL Server allows for a max of 2100 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% set max_batch_size = get_batch_size() %}\n    {% set calculated_batch = (2100 / num_columns)|int %}\n    {% set batch_size = [max_batch_size, calculated_batch] | min %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9277742, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__load_csv_rows": {"name": "sqlserver__load_csv_rows", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__load_csv_rows", "macro_sql": "{% macro sqlserver__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(agate_table.column_names|length) %}\n  {% set bindings = [] %}\n  {% set statements = [] %}\n\n  {{ log(\"Inserting batches of \" ~ batch_size ~ \" records\") }}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv", "macro.dbt_sqlserver.calc_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9307697, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__post_snapshot": {"name": "sqlserver__post_snapshot", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__post_snapshot", "macro_sql": "{% macro sqlserver__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9317694, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_columns": {"name": "sqlserver__create_columns", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_columns", "macro_sql": "{% macro sqlserver__create_columns(relation, columns) %}\n  {# default__ macro uses \"add column\"\n     TSQL preferes just \"add\"\n  #}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.932768, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_true_sql": {"name": "sqlserver__get_true_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_true_sql", "macro_sql": "{% macro sqlserver__get_true_sql() %}\n  {{ return('1=1') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.932768, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql": {"name": "sqlserver__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql", "macro_sql": "{% macro sqlserver__snapshot_merge_sql(target, source, insert_cols) %}\n  {{ default__snapshot_merge_sql(target, source, insert_cols) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.932768, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments": {"name": "sqlserver__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments", "macro_sql": "{% macro sqlserver__snapshot_hash_arguments(args) %}\n    CONVERT(VARCHAR(32), HashBytes('MD5', {% for arg in args %}\n        coalesce(cast({{ arg }} as varchar(max)), '') {% if not loop.last %} + '|' + {% endif %}\n    {% endfor %}), 2)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9337716, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_test_sql": {"name": "sqlserver__get_test_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_test_sql", "macro_sql": "{% macro sqlserver__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ \"top (\" ~ limit ~ ')' if limit != none }}\n      {{ fail_calc }} as failures,\n      case when {{ fail_calc }} {{ warn_if }}\n        then 'true' else 'false' end as should_warn,\n      case when {{ fail_calc }} {{ error_if }}\n        then 'true' else 'false' end as should_error\n    from (\n      {{ main_sql }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.93477, "supported_languages": null}, "macro.dbt_sqlserver.materialization_test_sqlserver": {"name": "materialization_test_sqlserver", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt_sqlserver.materialization_test_sqlserver", "macro_sql": "{%- materialization test, adapter='sqlserver' -%}\n\n  {% set relations = [] %}\n\n  {% set identifier = model['alias'] %}\n  {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n\n  {% if old_relation %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% elif not old_relation %}\n    {% do adapter.create_schema(target_relation) %}\n  {% endif %}\n\n  {% call statement(auto_begin=True) %}\n      {{ create_table_as(False, target_relation, sql) }}\n  {% endcall %}\n\n  {% set main_sql %}\n      select *\n      from {{ target_relation }}\n  {% endset %}\n\n  {{ adapter.commit() }}\n\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {% if should_store_failures() %}\n    {% do relations.append(target_relation) %}\n  {% elif not should_store_failures() %}\n    {% do adapter.drop_relation(target_relation) %}\n  {% endif %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql", "macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9397697, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.sqlserver__any_value": {"name": "sqlserver__any_value", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__any_value", "macro_sql": "{% macro sqlserver__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9397697, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__array_construct": {"name": "sqlserver__array_construct", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__array_construct", "macro_sql": "{% macro sqlserver__array_construct(inputs, data_type) -%}\n    JSON_ARRAY({{ inputs|join(' , ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9407675, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__cast_bool_to_text": {"name": "sqlserver__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__cast_bool_to_text", "macro_sql": "{% macro sqlserver__cast_bool_to_text(field) %}\n    case {{ field }}\n        when 1 then 'true'\n        when 0 then 'false'\n        else null\n    end\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9407675, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__concat": {"name": "sqlserver__concat", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__concat", "macro_sql": "{% macro sqlserver__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9407675, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__dateadd": {"name": "sqlserver__dateadd", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__dateadd", "macro_sql": "{% macro sqlserver__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        cast({{ from_date_or_timestamp }} as datetime)\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9417684, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__date_trunc": {"name": "sqlserver__date_trunc", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__date_trunc", "macro_sql": "{% macro sqlserver__date_trunc(datepart, date) %}\n    CAST(DATEADD({{datepart}}, DATEDIFF({{datepart}}, 0, {{date}}), 0) AS DATE)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9417684, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__hash": {"name": "sqlserver__hash", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__hash", "macro_sql": "{% macro sqlserver__hash(field) %}\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(max), {{field}}), '')), 2))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9427683, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__last_day": {"name": "sqlserver__last_day", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__last_day", "macro_sql": "{% macro sqlserver__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    \tCAST(DATEADD(QUARTER, DATEDIFF(QUARTER, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- elif datepart == 'month' -%}\n        EOMONTH ( {{ date }})\n    {%- elif datepart == 'year' -%}\n        CAST(DATEADD(YEAR, DATEDIFF(year, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- else -%}\n        {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9437704, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__length": {"name": "sqlserver__length", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__length", "macro_sql": "{% macro sqlserver__length(expression) %}\n\n    len( {{ expression }} )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9437704, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__listagg": {"name": "sqlserver__listagg", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__listagg", "macro_sql": "{% macro sqlserver__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg({{ measure }}, {{ delimiter_text }})\n        {%- if order_by_clause != None %}\n            within group ({{ order_by_clause }})\n        {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9447696, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__position": {"name": "sqlserver__position", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__position", "macro_sql": "{% macro sqlserver__position(substring_text, string_text) %}\n\n    CHARINDEX(\n        {{ substring_text }},\n        {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9447696, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__safe_cast": {"name": "sqlserver__safe_cast", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__safe_cast", "macro_sql": "{% macro sqlserver__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9457693, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__split_part": {"name": "sqlserver__split_part", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__split_part", "macro_sql": "{% macro sqlserver__split_part(string_text, delimiter_text, part_number) %}\n\n    LTRIM(CAST(('<X>'+REPLACE({{ string_text }},{{ delimiter_text }} ,'</X><X>')+'</X>') AS XML).value('(/X)[{{ part_number }}]', 'VARCHAR(128)'))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9457693, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__current_timestamp": {"name": "sqlserver__current_timestamp", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__current_timestamp", "macro_sql": "{% macro sqlserver__current_timestamp() -%}\n  SYSDATETIME()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9467685, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time": {"name": "sqlserver__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time", "macro_sql": "{% macro sqlserver__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"CONVERT(DATETIME2, '\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9467685, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9497683, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9497683, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9507687, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9507687, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.951769, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.951769, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9527755, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9527755, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9527755, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.953769, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.953769, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.954768, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.955768, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9567692, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9567692, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.957768, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9607701, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9637706, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9637706, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9647691, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9647691, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9657767, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9657767, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.967769, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.967769, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9697688, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9707687, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9717705, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9717705, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9727752, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9727752, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9737704, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9767706, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9767706, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.977769, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.977769, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.977769, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9787712, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9787712, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.979776, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.98077, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.98077, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.98177, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.982769, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.982769, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.982769, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9837694, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.984769, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.989769, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9907694, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9907694, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9917684, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9917684, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.99277, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9937744, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9937744, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9937744, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9947958, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9947958, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9958024, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9968023, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.997802, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.997802, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9988015, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.9988015, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.999789, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704693.999789, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.00079, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.00079, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0018063, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0018063, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.002791, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.002791, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.002791, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.002791, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0037909, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0037909, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0068016, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0098014, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0118022, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0118022, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.014791, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0158017, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.016802, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0178049, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0187912, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.01979, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.01979, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0208013, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0217927, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0217927, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0227904, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.023791, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0247934, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0247934, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.025792, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0267909, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0267909, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0297925, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0297925, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0297925, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0307899, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0307899, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0338047, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.03479, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0358026, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0367901, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0387924, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0477905, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0497904, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.058791, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0617926, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0627913, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0647907, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0647907, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.066771, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0747721, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.077803, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0797927, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0817719, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0837731, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0847907, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0847907, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0857723, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0857723, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0867717, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0867717, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0877914, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0877914, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0877914, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0887918, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0897722, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0897722, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0907705, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0917919, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.0967724, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.099795, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1007917, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1017904, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1017904, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1017904, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1027913, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1037924, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.108772, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1157923, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1177902, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1187928, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.119775, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.119775, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.119775, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1207924, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1207924, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1207924, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1207924, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1227734, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1227734, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1257951, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.131771, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1377752, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1387908, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1387908, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1387908, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.139773, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.139773, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.139773, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.141806, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1427932, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1427932, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1437917, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1547747, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1557927, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1567717, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1627932, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1627932, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.163795, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1647754, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1647754, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1658194, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1688037, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.171804, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1728098, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1728098, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.176793, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1778045, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1787937, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1817925, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1817925, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1827924, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1837757, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1847925, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.185796, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.185796, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1867933, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1867933, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1877742, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1877742, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1887922, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1887922, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1897955, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1897955, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1907778, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1907778, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.191794, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.191794, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1927962, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1927962, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1947758, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1947758, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1947758, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.195797, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.195797, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.195797, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.196776, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.196776, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1977942, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1977942, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1977942, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1987956, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1987956, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1997957, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.1997957, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.200775, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.200775, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2017736, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2017736, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.202794, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.202794, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.20381, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.20381, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.20381, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2048073, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2048073, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2057967, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2057967, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2067957, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2067957, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.207795, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.207795, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.207795, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2097948, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.210775, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.210775, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.210775, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2117934, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2117934, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.212797, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2137766, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2137766, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2148077, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2148077, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2157779, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2167745, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2167745, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2167745, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2178075, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2187827, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2187827, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.219794, "supported_languages": null}, "macro.codegen.create_base_models": {"name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros\\create_base_models.sql", "original_file_path": "macros\\create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2217731, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_base_model.sql", "original_file_path": "macros\\generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2257943, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_model_import_ctes.sql", "original_file_path": "macros\\generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2457945, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_model_yaml.sql", "original_file_path": "macros\\generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% if include_data_types %}\n        {% do model_yaml.append('        data_type: ' ~ codegen.data_type_format_model(column)) %}\n    {% endif %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, include_data_types, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.data_type_format_model", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2507966, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_model_yaml.sql", "original_file_path": "macros\\generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False, include_data_types=True) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2537966, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_source.sql", "original_file_path": "macros\\generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2577777, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros\\generate_source.sql", "original_file_path": "macros\\generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=True, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ codegen.data_type_format_source(column)) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema", "macro.codegen.data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2627954, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2647846, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2668006, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2668006, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2697964, "supported_languages": null}, "macro.codegen.data_type_format_source": {"name": "data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.data_type_format_source", "macro_sql": "{% macro data_type_format_source(column) -%}\n  {{ return(adapter.dispatch('data_type_format_source', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2708058, "supported_languages": null}, "macro.codegen.default__data_type_format_source": {"name": "default__data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.default__data_type_format_source", "macro_sql": "{% macro default__data_type_format_source(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2708058, "supported_languages": null}, "macro.codegen.data_type_format_model": {"name": "data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.data_type_format_model", "macro_sql": "{% macro data_type_format_model(column) -%}\n  {{ return(adapter.dispatch('data_type_format_model', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2717977, "supported_languages": null}, "macro.codegen.default__data_type_format_model": {"name": "default__data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros\\helpers\\helpers.sql", "original_file_path": "macros\\helpers\\helpers.sql", "unique_id": "macro.codegen.default__data_type_format_model", "macro_sql": "{% macro default__data_type_format_model(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2717977, "supported_languages": null}, "macro.codegen.format_column": {"name": "format_column", "resource_type": "macro", "package_name": "codegen", "path": "macros\\vendored\\dbt_core\\format_column.sql", "original_file_path": "macros\\vendored\\dbt_core\\format_column.sql", "unique_id": "macro.codegen.format_column", "macro_sql": "{% macro format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2727954, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.273796, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2748058, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.276796, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2787766, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2797945, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2797945, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.281807, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2838073, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2847972, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2877955, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2877955, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2887955, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2908075, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2927947, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.2987955, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3017962, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3027828, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3037958, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3047974, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3058083, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3067787, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3067787, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3078072, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3097963, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3117843, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.313778, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.314798, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3157961, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3168082, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3187952, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3197966, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3217957, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3217957, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.322796, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.322796, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3237963, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3237963, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3247962, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3257954, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3277981, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3288124, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3297973, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.330797, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3317778, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.332796, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3337965, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3337965, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3347957, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3347957, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3357959, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3357959, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3377972, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3387969, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3387969, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3397975, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3407974, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3417969, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.343798, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3477974, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3487837, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3497965, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3507967, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3517785, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3538008, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.354797, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3567975, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.358777, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3597765, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.360797, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3637798, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3647966, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3658085, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3667977, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3677979, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3687756, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3697808, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3697808, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3697808, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3707814, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3707814, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3717794, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3737764, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3737764, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3757746, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3767796, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3777804, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3787804, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3797824, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3797824, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.381777, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3837845, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3847785, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3857794, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3867779, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3867779, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.387777, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3887808, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3907819, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3947766, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.395776, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.3967776, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.401785, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.4087787, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.4107769, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.414777, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.4157777, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.4167783, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.4177787, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.4177787, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.4187782, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.4197788, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.420779, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.421798, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704704694.4228122, "supported_languages": null}}, "docs": {"doc.mattoni_1873.outlet_id": {"name": "outlet_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "marts\\core\\_schema.md", "original_file_path": "models\\marts\\core\\_schema.md", "unique_id": "doc.mattoni_1873.outlet_id", "block_contents": ""}, "doc.mattoni_1873.product_id": {"name": "product_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "marts\\core\\_schema.md", "original_file_path": "models\\marts\\core\\_schema.md", "unique_id": "doc.mattoni_1873.product_id", "block_contents": ""}, "doc.mattoni_1873.is_distributed": {"name": "is_distributed", "resource_type": "doc", "package_name": "mattoni_1873", "path": "marts\\core\\_schema.md", "original_file_path": "models\\marts\\core\\_schema.md", "unique_id": "doc.mattoni_1873.is_distributed", "block_contents": ""}, "doc.mattoni_1873.None": {"name": null, "resource_type": "doc", "package_name": "mattoni_1873", "path": "marts\\core\\_schema.md", "original_file_path": "models\\marts\\core\\_schema.md", "unique_id": "doc.mattoni_1873.None", "block_contents": ""}, "doc.mattoni_1873.dbt_scd_id": {"name": "dbt_scd_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.dbt_scd_id", "block_contents": "The system-generated surrogate key during snapshot."}, "doc.mattoni_1873.inaccessibility_reason_id": {"name": "inaccessibility_reason_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.inaccessibility_reason_id", "block_contents": "Identifier for the inaccessibility reason."}, "doc.mattoni_1873.inaccessibility_reason_external_code": {"name": "inaccessibility_reason_external_code", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.inaccessibility_reason_external_code", "block_contents": "External code related to the inaccessibility reason."}, "doc.mattoni_1873.country_id": {"name": "country_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.country_id", "block_contents": "The numerical ID associated with the country code, generated using the macro."}, "doc.mattoni_1873.inaccessibility_reason": {"name": "inaccessibility_reason", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.inaccessibility_reason", "block_contents": "Description of the inaccessibility reason."}, "doc.mattoni_1873.country_code": {"name": "country_code", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.country_code", "block_contents": "The original country code from the source data."}, "doc.mattoni_1873.sfa_status": {"name": "sfa_status", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.sfa_status", "block_contents": "Status indicator. `2` or `9` to be discovered what it means in real life."}, "doc.mattoni_1873.ulm": {"name": "ulm", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.ulm", "block_contents": "user_id, which made last modification to this entry"}, "doc.mattoni_1873.dlm": {"name": "dlm", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.dlm", "block_contents": "Date of last modification"}, "doc.mattoni_1873.dbt_valid_from": {"name": "dbt_valid_from", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.dbt_valid_from", "block_contents": "Start of the validity period for this record."}, "doc.mattoni_1873.dbt_valid_to": {"name": "dbt_valid_to", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.dbt_valid_to", "block_contents": "End of the validity period for this record, defaults to a future-proof date if not provided in the source."}, "doc.mattoni_1873.questionnaire_id": {"name": "questionnaire_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_id", "block_contents": "A surrogate key for the questionnaire, generated using a combination of the country code and document ID."}, "doc.mattoni_1873.questionnaire_key": {"name": "questionnaire_key", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_key", "block_contents": "The original Document_ID from the source table."}, "doc.mattoni_1873.questionnaire_question_id": {"name": "questionnaire_question_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_id", "block_contents": "A surrogate key for the questionnaire, generated using a combination of the country code and document item ID."}, "doc.mattoni_1873.questionnaire_question_key": {"name": "questionnaire_question_key", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_key", "block_contents": "The original Document_Item_ID from the source table."}, "doc.mattoni_1873.questionnaire_name": {"name": "questionnaire_name", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_name", "block_contents": "The name or title of the questionnaire."}, "doc.mattoni_1873.questionnaire_details": {"name": "questionnaire_details", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_details", "block_contents": "Detailed description or context related to the questionnaire."}, "doc.mattoni_1873.questionnaire_external_code": {"name": "questionnaire_external_code", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_external_code", "block_contents": "External code related to the questionnaire."}, "doc.mattoni_1873.questionnaire_pass_score": {"name": "questionnaire_pass_score", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_pass_score", "block_contents": "The passing score for the questionnaire, if applicable."}, "doc.mattoni_1873.questionnaire_status": {"name": "questionnaire_status", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_status", "block_contents": "Status indicator for the questionnaire."}, "doc.mattoni_1873.questionnaire_question_standard_id": {"name": "questionnaire_question_standard_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_standard_id", "block_contents": "Not used. A surrogate key for the question standard, generated using a combination of the country code and StandartDocumentItemId."}, "doc.mattoni_1873.questionnaire_question_standard_key": {"name": "questionnaire_question_standard_key", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_standard_key", "block_contents": "Not used. The original StandartDocumentItemId from the source table."}, "doc.mattoni_1873.questionnaire_question": {"name": "questionnaire_question", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question", "block_contents": "Question itself. The text of the question."}, "doc.mattoni_1873.questionnaire_question_target_value": {"name": "questionnaire_question_target_value", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_target_value", "block_contents": "The target or expected value for the questionnaire question."}, "doc.mattoni_1873.questionnaire_question_sort_order": {"name": "questionnaire_question_sort_order", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_sort_order", "block_contents": "The sort order of the question in its respective section or list."}, "doc.mattoni_1873.questionnaire_question_external_code": {"name": "questionnaire_question_external_code", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_external_code", "block_contents": "External **SAP code** related to the question."}, "doc.mattoni_1873.questionnaire_question_weight": {"name": "questionnaire_question_weight", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_weight", "block_contents": "The weight or importance assigned to the question."}, "doc.mattoni_1873.questionnaire_question_status": {"name": "questionnaire_question_status", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_status", "block_contents": "Status indicator for the questionnaire question."}, "doc.mattoni_1873.questionnaire_question_response_format": {"name": "questionnaire_question_response_format", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_response_format", "block_contents": "The expected format or type of response for the questionnaire question."}, "doc.mattoni_1873.questionnaire_question_has_use_previous_answer": {"name": "questionnaire_question_has_use_previous_answer", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_has_use_previous_answer", "block_contents": "Indicator if the question uses the response from a previous questionnaire."}, "doc.mattoni_1873.questionnaire_question_is_read_only": {"name": "questionnaire_question_is_read_only", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_is_read_only", "block_contents": "Indicator if the question is read-only and cannot be modified."}, "doc.mattoni_1873.questionnaire_question_is_distribution": {"name": "questionnaire_question_is_distribution", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_question_is_distribution", "block_contents": "Indicator if the question is regarding distribution."}, "doc.mattoni_1873.questionnaire_section_id": {"name": "questionnaire_section_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_section_id", "block_contents": "A surrogate key for the questionnaire section, generated using a combination of the country code and Section_ID."}, "doc.mattoni_1873.questionnaire_section_key": {"name": "questionnaire_section_key", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_section_key", "block_contents": "The original Section_ID from the source table. It gets **repeated** between countries."}, "doc.mattoni_1873.questionnaire_section_parent_id": {"name": "questionnaire_section_parent_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_section_parent_id", "block_contents": "A surrogate key for the parent section of the questionnaire, generated using a combination of the country code and ParentSection_ID."}, "doc.mattoni_1873.questionnaire_section_parent_key": {"name": "questionnaire_section_parent_key", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_section_parent_key", "block_contents": "The original ParentSection_ID from the source table."}, "doc.mattoni_1873.sfa_bo_id": {"name": "sfa_bo_id", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.sfa_bo_id", "block_contents": "Not used. A surrogate key for the business object related to the questionnaire section, generated using a combination of the country code and BO_ID."}, "doc.mattoni_1873.sfa_bo_key": {"name": "sfa_bo_key", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.sfa_bo_key", "block_contents": "Not used. The original BO_ID from the source table."}, "doc.mattoni_1873.questionnaire_section_name": {"name": "questionnaire_section_name", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_section_name", "block_contents": "The name of the specific section."}, "doc.mattoni_1873.questionnaire_section_external_code": {"name": "questionnaire_section_external_code", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_section_external_code", "block_contents": "External code related to a specific section."}, "doc.mattoni_1873.questionnaire_section_level": {"name": "questionnaire_section_level", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_section_level", "block_contents": "The hierarchical level of the section within the questionnaire section's structure."}, "doc.mattoni_1873.questionnaire_section_sort_order": {"name": "questionnaire_section_sort_order", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_section_sort_order", "block_contents": "The sort order of the section within the questionnaire or within its parent section."}, "doc.mattoni_1873.questionnaire_section_grouping_type": {"name": "questionnaire_section_grouping_type", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_section_grouping_type", "block_contents": "Not used. Method used to group questions within the section."}, "doc.mattoni_1873.questionnaire_section_status": {"name": "questionnaire_section_status", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.questionnaire_section_status", "block_contents": "Status indicator for a specific section within the questionnaire."}, "doc.mattoni_1873.is_call_button": {"name": "is_call_button", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.is_call_button", "block_contents": "Indicator if the section has a call button functionality."}, "doc.mattoni_1873.is_photo_report": {"name": "is_photo_report", "resource_type": "doc", "package_name": "mattoni_1873", "path": "staging\\soft_serve\\_staging_models.md", "original_file_path": "models\\staging\\soft_serve\\_staging_models.md", "unique_id": "doc.mattoni_1873.is_photo_report", "block_contents": "Indicator if the section requires a photo."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.mattoni_1873.int_pepsi_documents_open_enhanced": ["model.mattoni_1873.stg_dwh__calendar", "model.mattoni_1873.stg_dwh__dim_call_representatives", "model.mattoni_1873.stg_dwh__dim_countries", "model.mattoni_1873.stg_dwh__dim_customers", "model.mattoni_1873.stg_dwh__dim_entities", "model.mattoni_1873.stg_dwh__fx_rates", "model.mattoni_1873.stg_sap__documents_open", "model.mattoni_1873.stg_sap__products"], "model.mattoni_1873.int_document_sections_hierarchy": ["model.mattoni_1873.stg_sfa__questionnaire_sections"], "model.mattoni_1873.int_mobile_tracking_gps": ["model.mattoni_1873.stg_sfa__mobile_day_tracking_v"], "model.mattoni_1873.int_questionnare_responses": ["model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit", "model.mattoni_1873.stg_sfa__questionnaire_responses"], "model.mattoni_1873.dim_customers": ["model.mattoni_1873.stg_sfa__customers"], "model.mattoni_1873.dim_images": ["model.mattoni_1873.stg_sfa__files_v", "model.mattoni_1873.stg_sfa__questionnaire_response_images_v"], "model.mattoni_1873.dim_inaccessibility_reasons": ["model.mattoni_1873.stg_sfa__visit_inaccessibility_reasons"], "model.mattoni_1873.dim_kpi": ["model.mattoni_1873.stg_sfa__kpis"], "model.mattoni_1873.dim_organization_structures": ["model.mattoni_1873.stg_sfa__organization_structures_v"], "model.mattoni_1873.dim_outlets": ["model.mattoni_1873.stg_sfa__organization_structures_v", "model.mattoni_1873.stg_sfa__outlet_custom_fields_v", "model.mattoni_1873.stg_sfa__outlets"], "model.mattoni_1873.dim_products": ["model.mattoni_1873.stg_sfa__products_v"], "model.mattoni_1873.dim_questions": ["model.mattoni_1873.stg_sfa__questionnaire_items", "model.mattoni_1873.stg_sfa__questionnaire_items", "model.mattoni_1873.stg_sfa__questionnaire_sections", "model.mattoni_1873.stg_sfa__questionnaires"], "model.mattoni_1873.dim_staff": ["model.mattoni_1873.stg_sfa__organization_structures_v", "model.mattoni_1873.stg_sfa__staff", "model.mattoni_1873.stg_sfa__staff_link_org_structures_v"], "model.mattoni_1873.dim_visit_gps": ["model.mattoni_1873.stg_sfa__visit_gps"], "model.mattoni_1873.fact_day_tracking": ["model.mattoni_1873.stg_sfa__mobile_day_tracking_v", "model.mattoni_1873.stg_sfa__mobile_users_v"], "model.mattoni_1873.fact_images": ["model.mattoni_1873.dim_questions", "model.mattoni_1873.stg_sfa__files_v", "model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit", "model.mattoni_1873.stg_sfa__questionnaire_response_images_v"], "model.mattoni_1873.fact_kpi_actual": [], "model.mattoni_1873.fact_kpi_plan": ["model.mattoni_1873.stg_sfa__kpi_execution_plans_v"], "model.mattoni_1873.fact_outlet_distributions": ["model.mattoni_1873.stg_sfa__outlet_distributions_v", "model.mattoni_1873.stg_sfa__products_v", "model.mattoni_1873.stg_sfa__visits"], "model.mattoni_1873.fact_questionnaire_responses": ["model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit", "model.mattoni_1873.stg_sfa__questionnaire_response_images", "model.mattoni_1873.stg_sfa__questionnaire_response_texts"], "model.mattoni_1873.fact_questionnaire_v2": ["model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit", "model.mattoni_1873.stg_sfa__questionnaire_response_images", "model.mattoni_1873.stg_sfa__questionnaire_response_texts"], "model.mattoni_1873.fact_visit": ["model.mattoni_1873.stg_sfa__visits"], "model.mattoni_1873.distribution_report": ["model.mattoni_1873.fact_outlet_distributions"], "model.mattoni_1873.kpi_report": ["model.mattoni_1873.fact_kpi_actual", "model.mattoni_1873.fact_kpi_plan"], "model.mattoni_1873.questionnaire_report": ["model.mattoni_1873.dim_questions", "model.mattoni_1873.fact_questionnaire_responses", "model.mattoni_1873.fact_visit"], "model.mattoni_1873.visit_report": ["model.mattoni_1873.fact_visit", "model.mattoni_1873.stg_sfa__organization_structures", "model.mattoni_1873.stg_sfa__outlets", "model.mattoni_1873.stg_sfa__visit_inaccessibility_reasons", "model.mattoni_1873.stg_sfa__visits"], "model.mattoni_1873.stg_dwh__currencies": ["source.mattoni_1873.core.Currency_c"], "model.mattoni_1873.stg_dwh__fx_rates": ["source.mattoni_1873.core.FXR_AVG_vs_BGT_Main_Currency_v"], "model.mattoni_1873.stg_dwh__dim_call_representatives": ["source.mattoni_1873.pbi.dim_Call_Representative"], "model.mattoni_1873.stg_dwh__dim_countries": ["source.mattoni_1873.pbi.dim_Country"], "model.mattoni_1873.stg_dwh__dim_customers": ["source.mattoni_1873.pbi.dim_Customer", "source.mattoni_1873.pbi.dim_Customer"], "model.mattoni_1873.stg_dwh__dim_entities": ["source.mattoni_1873.pbi.dim_Entity"], "model.mattoni_1873.stg_dwh__dim_products": ["source.mattoni_1873.pbi.dim_Product"], "model.mattoni_1873.stg_sap__customers": ["source.mattoni_1873.sap.customer_now_dvt_c_hv"], "model.mattoni_1873.stg_sap__documents_closed": ["source.mattoni_1873.sap.bad_with_cost_closed_v"], "model.mattoni_1873.stg_sap__documents_closed_kmv": ["source.mattoni_1873.kmv.consolidated_closed_v"], "model.mattoni_1873.stg_sap__documents_open": ["source.mattoni_1873.sap.bad_with_cost_open_v"], "model.mattoni_1873.stg_sap__documents_open_kmv": ["source.mattoni_1873.kmv.consolidated_open_v"], "model.mattoni_1873.stg_sap__products": ["source.mattoni_1873.sap.product_now_dvt_c_hv"], "model.mattoni_1873.base_sfa_cust_VisitKPIDataMart": ["source.mattoni_1873.sfa.cust_VisitKPIDataMart"], "model.mattoni_1873.stg_sfa__customers": ["snapshot.mattoni_1873.sfa__customers_snapshot"], "model.mattoni_1873.stg_sfa__distributions_datamart": ["source.mattoni_1873.sfa.cust_DistributionsDataMart"], "model.mattoni_1873.stg_sfa__document_reports": ["source.mattoni_1873.sfa.dbo_HReports"], "model.mattoni_1873.stg_sfa__document_rules": ["source.mattoni_1873.sfa.dbo_DocumentRules"], "model.mattoni_1873.stg_sfa__document_rule_parameters": ["source.mattoni_1873.sfa.dbo_DocumentRuleParams"], "model.mattoni_1873.stg_sfa__files": ["source.mattoni_1873.sfa.dbo_ContentFiles"], "model.mattoni_1873.stg_sfa__kpis": ["source.mattoni_1873.sfa.ps_KPI"], "model.mattoni_1873.stg_sfa__kpi_execution_facts": ["source.mattoni_1873.sfa.ps_KPIExecutionFact"], "model.mattoni_1873.stg_sfa__kpi_execution_plans": ["source.mattoni_1873.sfa.ps_KPIExecutionPlan"], "model.mattoni_1873.stg_sfa__networks": ["source.mattoni_1873.sfa.dbo_Networks"], "model.mattoni_1873.stg_sfa__ordersdatamart": ["source.mattoni_1873.sfa.cust_OrdersDataMart"], "model.mattoni_1873.stg_sfa__organizationalstructuregeographylinksactive": ["source.mattoni_1873.sfa.dbo_OrganizationalStructureGeographyLinksActive"], "model.mattoni_1873.stg_sfa__organization_structures": ["snapshot.mattoni_1873.sfa__organization_structures_snapshot"], "model.mattoni_1873.stg_sfa__outlets": ["snapshot.mattoni_1873.sfa__outlets_snapshot"], "model.mattoni_1873.stg_sfa__outlet_custom_fields": ["source.mattoni_1873.sfa.dbo_OutLetsCustomField"], "model.mattoni_1873.stg_sfa__outlet_distributions": ["source.mattoni_1873.sfa.dbo_OutletDistribution"], "model.mattoni_1873.stg_sfa__outlet_orders_h": ["source.mattoni_1873.sfa.dbo_OutletOrderH"], "model.mattoni_1873.stg_sfa__outlet_order_d": ["source.mattoni_1873.sfa.dbo_OutletOrderD"], "model.mattoni_1873.stg_sfa__products": ["source.mattoni_1873.sfa.dbo_Products"], "model.mattoni_1873.stg_sfa__product_active_promotions": ["source.mattoni_1873.sfa.dbo_ProductPromotionActive"], "model.mattoni_1873.stg_sfa__product_categories": ["source.mattoni_1873.sfa.dbo_ProductCategory"], "model.mattoni_1873.stg_sfa__product_groups": ["source.mattoni_1873.sfa.dbo_ProductGroups"], "model.mattoni_1873.stg_sfa__product_stocks": ["source.mattoni_1873.sfa.dbo_ProductStocks"], "model.mattoni_1873.stg_sfa__questionnaires": ["snapshot.mattoni_1873.sfa__documents_snapshot"], "model.mattoni_1873.stg_sfa__questionnaire_items": ["snapshot.mattoni_1873.sfa__document_items_snapshot"], "model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit": ["source.mattoni_1873.sfa.dbo_QuestionnaireResponseOnVisit_v"], "model.mattoni_1873.stg_sfa__questionnaire_responses": ["snapshot.mattoni_1873.sfa__questionnare_responses_snapshot"], "model.mattoni_1873.stg_sfa__questionnaire_response_images": ["source.mattoni_1873.sfa.dbo_ResponsesSingleContentD"], "model.mattoni_1873.stg_sfa__questionnaire_response_texts": ["source.mattoni_1873.sfa.dbo_ResponsesSingleD_v"], "model.mattoni_1873.stg_sfa__questionnaire_sections": ["snapshot.mattoni_1873.sfa__document_sections_snapshot"], "model.mattoni_1873.stg_sfa__questionnaire_visible_sections": ["source.mattoni_1873.sfa.dbo_QuestionnaireVisibleSections"], "model.mattoni_1873.stg_sfa__staff": ["snapshot.mattoni_1873.sfa__staff_snapshot"], "model.mattoni_1873.stg_sfa__staff_link_org_structure": ["source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive"], "model.mattoni_1873.stg_sfa__survey_datamart": ["source.mattoni_1873.sfa.cust_SurveyDataMart"], "model.mattoni_1873.stg_sfa__visits": ["snapshot.mattoni_1873.sfa__visits_snapshot"], "model.mattoni_1873.stg_sfa__visit_activity_datamart": ["source.mattoni_1873.sfa.cust_VisitActivityDataMart"], "model.mattoni_1873.stg_sfa__visit_gps": ["source.mattoni_1873.sfa.dbo_OutletCardGPS_v"], "model.mattoni_1873.stg_sfa__visit_inaccessibility_reasons": ["snapshot.mattoni_1873.sfa__visit_inaccessibility_reasons_snapshot"], "model.mattoni_1873.stg_sfa__visit_kpi_datamart": ["source.mattoni_1873.sfa.cust_VisitKPIDataMart"], "model.mattoni_1873.stg_sfa__visit_startendimages": ["source.mattoni_1873.sfa.dbo_OutletCardStartEndImages"], "model.mattoni_1873.stg_sfa__visit_steps": ["source.mattoni_1873.sfa.dbo_OutletCardSteps"], "model.mattoni_1873.stg_sfa__warehouses": ["source.mattoni_1873.sfa.dbo_Warehouses"], "model.mattoni_1873.stg_sfa__files_v": ["source.mattoni_1873.sfa.dbo_ContentFiles_v"], "model.mattoni_1873.stg_sfa__kpi_execution_plans_v": ["source.mattoni_1873.sfa.ps_KPIExecutionPlan_v"], "model.mattoni_1873.stg_sfa__mobile_day_tracking_v": ["source.mattoni_1873.sfa.dbo_MobileModuleUserTimeTrack_v"], "model.mattoni_1873.stg_sfa__mobile_users_v": ["source.mattoni_1873.sfa.dbo_MobileModuleUser_v"], "model.mattoni_1873.stg_sfa__organization_structures_v": ["source.mattoni_1873.sfa.dbo_OrganizationalStructure_v"], "model.mattoni_1873.stg_sfa__outlets_v": ["source.mattoni_1873.sfa.dbo_OutLets_v"], "model.mattoni_1873.stg_sfa__outlet_custom_fields_v": ["source.mattoni_1873.sfa.dbo_OutLetsCustomField_v"], "model.mattoni_1873.stg_sfa__outlet_distributions_v": ["source.mattoni_1873.sfa.dbo_OutletDistribution_v"], "model.mattoni_1873.stg_sfa__products_v": ["source.mattoni_1873.sfa.dbo_Products_v"], "model.mattoni_1873.stg_sfa__questionnaire_response_images_v": ["source.mattoni_1873.sfa.dbo_ResponsesSingleContentD_v"], "model.mattoni_1873.stg_sfa__staff_link_org_structures_v": ["source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive_v"], "model.mattoni_1873.stg_sfa__visits_v": ["source.mattoni_1873.sfa.dbo_OutLetCardH_v"], "snapshot.mattoni_1873.sfa__customers_snapshot": ["source.mattoni_1873.sfa.dbo_Customers_v"], "snapshot.mattoni_1873.sfa__documents_snapshot": ["source.mattoni_1873.sfa.dbo_Documents_v"], "snapshot.mattoni_1873.sfa__document_items_snapshot": ["source.mattoni_1873.sfa.dbo_DocumentItems_v"], "snapshot.mattoni_1873.sfa__document_sections_snapshot": ["source.mattoni_1873.sfa.dbo_DocumentSections_v"], "snapshot.mattoni_1873.sfa__content_files_snapshot": ["source.mattoni_1873.sfa.dbo_ContentFiles_v"], "snapshot.mattoni_1873.sfa__kpis_snapshot": ["source.mattoni_1873.sfa.ps_KPI_v"], "snapshot.mattoni_1873.sfa__kpi_execution_facts_snapshot": ["source.mattoni_1873.sfa.ps_KPIExecutionFact_v"], "snapshot.mattoni_1873.sfa__kpi_execution_plans_snapshot": ["source.mattoni_1873.sfa.ps_KPIExecutionPlan_v"], "snapshot.mattoni_1873.sfa__networks_snapshot": ["source.mattoni_1873.sfa.dbo_Networks_v"], "snapshot.mattoni_1873.sfa__organization_structures_snapshot": ["source.mattoni_1873.sfa.dbo_OrganizationalStructure_v"], "snapshot.mattoni_1873.sfa__outlets_snapshot": ["source.mattoni_1873.sfa.dbo_OutLets_v"], "snapshot.mattoni_1873.sfa__products_snapshot": ["source.mattoni_1873.sfa.dbo_Products_v"], "snapshot.mattoni_1873.sfa__product_categories_snapshot": ["source.mattoni_1873.sfa.dbo_ProductCategory_v"], "snapshot.mattoni_1873.sfa__product_groups_snapshot": ["source.mattoni_1873.sfa.dbo_ProductGroups_v"], "snapshot.mattoni_1873.sfa__product_stocks_snapshot": ["source.mattoni_1873.sfa.dbo_ProductStocks_v"], "snapshot.mattoni_1873.sfa__questionnare_responses_snapshot": ["source.mattoni_1873.sfa.dbo_ResponsesH_v"], "snapshot.mattoni_1873.sfa__staff_snapshot": ["source.mattoni_1873.sfa.dbo_Staff_v"], "snapshot.mattoni_1873.sfa__visits_snapshot": ["source.mattoni_1873.sfa.dbo_OutLetCardH_v"], "snapshot.mattoni_1873.sfa__visit_gps_snapshot": ["source.mattoni_1873.sfa.dbo_OutletCardGPS_v"], "snapshot.mattoni_1873.sfa__visit_inaccessibility_reasons_snapshot": ["source.mattoni_1873.sfa.dbo_InaccessibilityReasons_v"], "snapshot.mattoni_1873.sfa__warehouses_snapshot": ["source.mattoni_1873.sfa.dbo_Warehouses_v"], "snapshot.mattoni_1873.sfa__warehaouses_snapshot": ["source.mattoni_1873.sfa.dbo_Warehouses_v"], "test.mattoni_1873.unique_fact_visit_visit_id.51a0bdec45": ["model.mattoni_1873.fact_visit"], "test.mattoni_1873.not_null_fact_visit_visit_id.cb04257c71": ["model.mattoni_1873.fact_visit"], "test.mattoni_1873.unique_dim_visit_gps_visit_id.9bd4b198b0": ["model.mattoni_1873.dim_visit_gps"], "test.mattoni_1873.not_null_dim_visit_gps_visit_id.1d9ad5b0a1": ["model.mattoni_1873.dim_visit_gps"], "test.mattoni_1873.unique_dim_outlets_outlet_id.38208b9cc1": ["model.mattoni_1873.dim_outlets"], "test.mattoni_1873.not_null_dim_outlets_outlet_id.f1413d1c31": ["model.mattoni_1873.dim_outlets"], "test.mattoni_1873.unique_dim_organization_structures_organizational_structure_id.d7f1ba4fba": ["model.mattoni_1873.dim_organization_structures"], "test.mattoni_1873.not_null_dim_organization_structures_organizational_structure_id.4f98821484": ["model.mattoni_1873.dim_organization_structures"], "test.mattoni_1873.unique_dim_customers_customer_id.15c9f1e2fd": ["model.mattoni_1873.dim_customers"], "test.mattoni_1873.not_null_dim_customers_customer_id.dd91cd1c8d": ["model.mattoni_1873.dim_customers"], "test.mattoni_1873.unique_dim_inaccessibility_reasons_inaccessibility_reason_id.950672aa38": ["model.mattoni_1873.dim_inaccessibility_reasons"], "test.mattoni_1873.not_null_dim_inaccessibility_reasons_inaccessibility_reason_id.da16540c2b": ["model.mattoni_1873.dim_inaccessibility_reasons"], "test.mattoni_1873.unique_stg_dwh__dim_products_product_id.3fb32d4785": ["model.mattoni_1873.stg_dwh__dim_products"], "test.mattoni_1873.not_null_stg_dwh__dim_products_product_id.aacd21cfdc": ["model.mattoni_1873.stg_dwh__dim_products"], "model.mattoni_1873.int_pepsi_documents_closed_enhanced": ["model.mattoni_1873.stg_dwh__calendar", "model.mattoni_1873.stg_dwh__dim_call_representatives", "model.mattoni_1873.stg_dwh__dim_countries", "model.mattoni_1873.stg_dwh__dim_customers", "model.mattoni_1873.stg_dwh__dim_entities", "model.mattoni_1873.stg_dwh__fx_rates", "model.mattoni_1873.stg_sap__documents_closed", "model.mattoni_1873.stg_sap__products"], "model.mattoni_1873.int_kmv_documents_open_enhanced": ["model.mattoni_1873.stg_dwh__calendar", "model.mattoni_1873.stg_dwh__dim_countries", "model.mattoni_1873.stg_dwh__dim_customers", "model.mattoni_1873.stg_dwh__dim_entities", "model.mattoni_1873.stg_sap__documents_open_kmv", "model.mattoni_1873.stg_sap__products"], "model.mattoni_1873.int_kmv_documents_closed_enhanced": ["model.mattoni_1873.stg_dwh__calendar", "model.mattoni_1873.stg_dwh__dim_countries", "model.mattoni_1873.stg_dwh__dim_customers", "model.mattoni_1873.stg_dwh__dim_entities", "model.mattoni_1873.stg_sap__documents_closed_kmv", "model.mattoni_1873.stg_sap__products"], "model.mattoni_1873.sales_real": ["model.mattoni_1873.int_kmv_documents_closed_enhanced", "model.mattoni_1873.int_kmv_documents_closed_enhanced", "model.mattoni_1873.int_kmv_documents_open_enhanced", "model.mattoni_1873.int_kmv_documents_open_enhanced", "model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced"], "model.mattoni_1873.stg_dwh__calendar": ["source.mattoni_1873.core.Calendar_v"], "source.mattoni_1873.core.FXR_AVG_vs_BGT_Main_Currency_v": [], "source.mattoni_1873.core.Currency_c": [], "source.mattoni_1873.core.Calendar_v": [], "source.mattoni_1873.pbi.dim_Entity": [], "source.mattoni_1873.pbi.dim_Country": [], "source.mattoni_1873.pbi.dim_Customer": [], "source.mattoni_1873.pbi.dim_Product": [], "source.mattoni_1873.pbi.dim_Call_Representative": [], "source.mattoni_1873.sap.product_now_dvt_c_hv": [], "source.mattoni_1873.sap.customer_now_dvt_c_hv": [], "source.mattoni_1873.sap.bad_with_cost_closed_v": [], "source.mattoni_1873.sap.bad_with_cost_open_v": [], "source.mattoni_1873.kmv.consolidated_closed_v": [], "source.mattoni_1873.kmv.consolidated_open_v": [], "source.mattoni_1873.sfa.dbo_Warehouses": [], "source.mattoni_1873.sfa.dbo_ContentFiles": [], "source.mattoni_1873.sfa.dbo_OutletOrderH": [], "source.mattoni_1873.sfa.ps_KPIExecutionFact": [], "source.mattoni_1873.sfa.dbo_ResponsesSingleD": [], "source.mattoni_1873.sfa.dbo_OutLetsCustomField": [], "source.mattoni_1873.sfa.dbo_OutletOrderD": [], "source.mattoni_1873.sfa.cust_VisitKPIDataMart": [], "source.mattoni_1873.sfa.dbo_OutLets": [], "source.mattoni_1873.sfa.dbo_OrganizationalStructure": [], "source.mattoni_1873.sfa.cust_OrdersDataMart": [], "source.mattoni_1873.sfa.dbo_Documents": [], "source.mattoni_1873.sfa.dbo_Networks": [], "source.mattoni_1873.sfa.cust_DistributionsDataMart": [], "source.mattoni_1873.sfa.dbo_OrganizationalStructureGeographyLinksActive": [], "source.mattoni_1873.sfa.dbo_InaccessibilityReasons": [], "source.mattoni_1873.sfa.dbo_Customers": [], "source.mattoni_1873.sfa.dbo_OutletCardStartEndImages": [], "source.mattoni_1873.sfa.dbo_HReports": [], "source.mattoni_1873.sfa.cust_SurveyDataMart": [], "source.mattoni_1873.sfa.cust_VisitActivityDataMart": [], "source.mattoni_1873.sfa.dbo_OutletCardGPS": [], "source.mattoni_1873.sfa.dbo_ProductCategory": [], "source.mattoni_1873.sfa.ps_KPI": [], "source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive": [], "source.mattoni_1873.sfa.dbo_Staff": [], "source.mattoni_1873.sfa.dbo_ProductStocks": [], "source.mattoni_1873.sfa.dbo_DocumentSections": [], "source.mattoni_1873.sfa.dbo_ResponsesSingleContentD": [], "source.mattoni_1873.sfa.dbo_OutletDistribution": [], "source.mattoni_1873.sfa.dbo_OutletCardSteps": [], "source.mattoni_1873.sfa.dbo_DocumentItems": [], "source.mattoni_1873.sfa.ps_KPIExecutionPlan": [], "source.mattoni_1873.sfa.dbo_QuestionnaireVisibleSections": [], "source.mattoni_1873.sfa.dbo_ProductGroups": [], "source.mattoni_1873.sfa.dbo_QuestionnaireResponseOnVisit_v": [], "source.mattoni_1873.sfa.dbo_ResponsesH": [], "source.mattoni_1873.sfa.dbo_DocumentRules": [], "source.mattoni_1873.sfa.dbo_DocumentRuleParams": [], "source.mattoni_1873.sfa.dbo_Products": [], "source.mattoni_1873.sfa.dbo_OutLetCardH": [], "source.mattoni_1873.sfa.dbo_ProductPromotionActive": [], "source.mattoni_1873.sfa.dbo_Warehouses_v": [], "source.mattoni_1873.sfa.dbo_ContentFiles_v": [], "source.mattoni_1873.sfa.dbo_OutletOrderH_v": [], "source.mattoni_1873.sfa.ps_KPIExecutionFact_v": [], "source.mattoni_1873.sfa.dbo_ResponsesSingleD_v": [], "source.mattoni_1873.sfa.dbo_OutLetsCustomField_v": [], "source.mattoni_1873.sfa.dbo_OutletOrderD_v": [], "source.mattoni_1873.sfa.dbo_OutLets_v": [], "source.mattoni_1873.sfa.dbo_OrganizationalStructure_v": [], "source.mattoni_1873.sfa.dbo_Documents_v": [], "source.mattoni_1873.sfa.dbo_Networks_v": [], "source.mattoni_1873.sfa.dbo_OrganizationalStructureGeographyLinksActive_v": [], "source.mattoni_1873.sfa.dbo_InaccessibilityReasons_v": [], "source.mattoni_1873.sfa.dbo_Customers_v": [], "source.mattoni_1873.sfa.dbo_HReports_v": [], "source.mattoni_1873.sfa.dbo_OutletCardGPS_v": [], "source.mattoni_1873.sfa.dbo_ProductCategory_v": [], "source.mattoni_1873.sfa.ps_KPI_v": [], "source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive_v": [], "source.mattoni_1873.sfa.dbo_Staff_v": [], "source.mattoni_1873.sfa.dbo_ProductStocks_v": [], "source.mattoni_1873.sfa.dbo_DocumentSections_v": [], "source.mattoni_1873.sfa.dbo_ResponsesSingleContentD_v": [], "source.mattoni_1873.sfa.dbo_OutletDistribution_v": [], "source.mattoni_1873.sfa.dbo_DocumentItems_v": [], "source.mattoni_1873.sfa.ps_KPIExecutionPlan_v": [], "source.mattoni_1873.sfa.dbo_QuestionnaireVisibleSections_v": [], "source.mattoni_1873.sfa.dbo_ProductGroups_v": [], "source.mattoni_1873.sfa.dbo_QuestionnaireResponseOnVisit_v_v": [], "source.mattoni_1873.sfa.dbo_ResponsesH_v": [], "source.mattoni_1873.sfa.dbo_Products_v": [], "source.mattoni_1873.sfa.dbo_OutLetCardH_v": [], "source.mattoni_1873.sfa.dbo_MobileModuleUser_v": [], "source.mattoni_1873.sfa.dbo_MobileModuleUserTimeTrack_v": []}, "child_map": {"model.mattoni_1873.int_pepsi_documents_open_enhanced": ["model.mattoni_1873.sales_real", "model.mattoni_1873.sales_real"], "model.mattoni_1873.int_document_sections_hierarchy": [], "model.mattoni_1873.int_mobile_tracking_gps": [], "model.mattoni_1873.int_questionnare_responses": [], "model.mattoni_1873.dim_customers": ["test.mattoni_1873.not_null_dim_customers_customer_id.dd91cd1c8d", "test.mattoni_1873.unique_dim_customers_customer_id.15c9f1e2fd"], "model.mattoni_1873.dim_images": [], "model.mattoni_1873.dim_inaccessibility_reasons": ["test.mattoni_1873.not_null_dim_inaccessibility_reasons_inaccessibility_reason_id.da16540c2b", "test.mattoni_1873.unique_dim_inaccessibility_reasons_inaccessibility_reason_id.950672aa38"], "model.mattoni_1873.dim_kpi": [], "model.mattoni_1873.dim_organization_structures": ["test.mattoni_1873.not_null_dim_organization_structures_organizational_structure_id.4f98821484", "test.mattoni_1873.unique_dim_organization_structures_organizational_structure_id.d7f1ba4fba"], "model.mattoni_1873.dim_outlets": ["test.mattoni_1873.not_null_dim_outlets_outlet_id.f1413d1c31", "test.mattoni_1873.unique_dim_outlets_outlet_id.38208b9cc1"], "model.mattoni_1873.dim_products": [], "model.mattoni_1873.dim_questions": ["model.mattoni_1873.fact_images", "model.mattoni_1873.questionnaire_report"], "model.mattoni_1873.dim_staff": [], "model.mattoni_1873.dim_visit_gps": ["test.mattoni_1873.not_null_dim_visit_gps_visit_id.1d9ad5b0a1", "test.mattoni_1873.unique_dim_visit_gps_visit_id.9bd4b198b0"], "model.mattoni_1873.fact_day_tracking": [], "model.mattoni_1873.fact_images": [], "model.mattoni_1873.fact_kpi_actual": ["model.mattoni_1873.kpi_report"], "model.mattoni_1873.fact_kpi_plan": ["model.mattoni_1873.kpi_report"], "model.mattoni_1873.fact_outlet_distributions": ["model.mattoni_1873.distribution_report"], "model.mattoni_1873.fact_questionnaire_responses": ["model.mattoni_1873.questionnaire_report"], "model.mattoni_1873.fact_questionnaire_v2": [], "model.mattoni_1873.fact_visit": ["model.mattoni_1873.questionnaire_report", "model.mattoni_1873.visit_report", "test.mattoni_1873.not_null_fact_visit_visit_id.cb04257c71", "test.mattoni_1873.unique_fact_visit_visit_id.51a0bdec45"], "model.mattoni_1873.distribution_report": [], "model.mattoni_1873.kpi_report": [], "model.mattoni_1873.questionnaire_report": [], "model.mattoni_1873.visit_report": [], "model.mattoni_1873.stg_dwh__currencies": [], "model.mattoni_1873.stg_dwh__fx_rates": ["model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced"], "model.mattoni_1873.stg_dwh__dim_call_representatives": ["model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced"], "model.mattoni_1873.stg_dwh__dim_countries": ["model.mattoni_1873.int_kmv_documents_closed_enhanced", "model.mattoni_1873.int_kmv_documents_open_enhanced", "model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced"], "model.mattoni_1873.stg_dwh__dim_customers": ["model.mattoni_1873.int_kmv_documents_closed_enhanced", "model.mattoni_1873.int_kmv_documents_open_enhanced", "model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced"], "model.mattoni_1873.stg_dwh__dim_entities": ["model.mattoni_1873.int_kmv_documents_closed_enhanced", "model.mattoni_1873.int_kmv_documents_open_enhanced", "model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced"], "model.mattoni_1873.stg_dwh__dim_products": ["test.mattoni_1873.not_null_stg_dwh__dim_products_product_id.aacd21cfdc", "test.mattoni_1873.unique_stg_dwh__dim_products_product_id.3fb32d4785"], "model.mattoni_1873.stg_sap__customers": [], "model.mattoni_1873.stg_sap__documents_closed": ["model.mattoni_1873.int_pepsi_documents_closed_enhanced"], "model.mattoni_1873.stg_sap__documents_closed_kmv": ["model.mattoni_1873.int_kmv_documents_closed_enhanced"], "model.mattoni_1873.stg_sap__documents_open": ["model.mattoni_1873.int_pepsi_documents_open_enhanced"], "model.mattoni_1873.stg_sap__documents_open_kmv": ["model.mattoni_1873.int_kmv_documents_open_enhanced"], "model.mattoni_1873.stg_sap__products": ["model.mattoni_1873.int_kmv_documents_closed_enhanced", "model.mattoni_1873.int_kmv_documents_open_enhanced", "model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced"], "model.mattoni_1873.base_sfa_cust_VisitKPIDataMart": [], "model.mattoni_1873.stg_sfa__customers": ["model.mattoni_1873.dim_customers"], "model.mattoni_1873.stg_sfa__distributions_datamart": [], "model.mattoni_1873.stg_sfa__document_reports": [], "model.mattoni_1873.stg_sfa__document_rules": [], "model.mattoni_1873.stg_sfa__document_rule_parameters": [], "model.mattoni_1873.stg_sfa__files": [], "model.mattoni_1873.stg_sfa__kpis": ["model.mattoni_1873.dim_kpi"], "model.mattoni_1873.stg_sfa__kpi_execution_facts": [], "model.mattoni_1873.stg_sfa__kpi_execution_plans": [], "model.mattoni_1873.stg_sfa__networks": [], "model.mattoni_1873.stg_sfa__ordersdatamart": [], "model.mattoni_1873.stg_sfa__organizationalstructuregeographylinksactive": [], "model.mattoni_1873.stg_sfa__organization_structures": ["model.mattoni_1873.visit_report"], "model.mattoni_1873.stg_sfa__outlets": ["model.mattoni_1873.dim_outlets", "model.mattoni_1873.visit_report"], "model.mattoni_1873.stg_sfa__outlet_custom_fields": [], "model.mattoni_1873.stg_sfa__outlet_distributions": [], "model.mattoni_1873.stg_sfa__outlet_orders_h": [], "model.mattoni_1873.stg_sfa__outlet_order_d": [], "model.mattoni_1873.stg_sfa__products": [], "model.mattoni_1873.stg_sfa__product_active_promotions": [], "model.mattoni_1873.stg_sfa__product_categories": [], "model.mattoni_1873.stg_sfa__product_groups": [], "model.mattoni_1873.stg_sfa__product_stocks": [], "model.mattoni_1873.stg_sfa__questionnaires": ["model.mattoni_1873.dim_questions"], "model.mattoni_1873.stg_sfa__questionnaire_items": ["model.mattoni_1873.dim_questions", "model.mattoni_1873.dim_questions"], "model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit": ["model.mattoni_1873.fact_images", "model.mattoni_1873.fact_questionnaire_responses", "model.mattoni_1873.fact_questionnaire_v2", "model.mattoni_1873.int_questionnare_responses"], "model.mattoni_1873.stg_sfa__questionnaire_responses": ["model.mattoni_1873.int_questionnare_responses"], "model.mattoni_1873.stg_sfa__questionnaire_response_images": ["model.mattoni_1873.fact_questionnaire_responses", "model.mattoni_1873.fact_questionnaire_v2"], "model.mattoni_1873.stg_sfa__questionnaire_response_texts": ["model.mattoni_1873.fact_questionnaire_responses", "model.mattoni_1873.fact_questionnaire_v2"], "model.mattoni_1873.stg_sfa__questionnaire_sections": ["model.mattoni_1873.dim_questions", "model.mattoni_1873.int_document_sections_hierarchy"], "model.mattoni_1873.stg_sfa__questionnaire_visible_sections": [], "model.mattoni_1873.stg_sfa__staff": ["model.mattoni_1873.dim_staff"], "model.mattoni_1873.stg_sfa__staff_link_org_structure": [], "model.mattoni_1873.stg_sfa__survey_datamart": [], "model.mattoni_1873.stg_sfa__visits": ["model.mattoni_1873.fact_outlet_distributions", "model.mattoni_1873.fact_visit", "model.mattoni_1873.visit_report"], "model.mattoni_1873.stg_sfa__visit_activity_datamart": [], "model.mattoni_1873.stg_sfa__visit_gps": ["model.mattoni_1873.dim_visit_gps"], "model.mattoni_1873.stg_sfa__visit_inaccessibility_reasons": ["model.mattoni_1873.dim_inaccessibility_reasons", "model.mattoni_1873.visit_report"], "model.mattoni_1873.stg_sfa__visit_kpi_datamart": [], "model.mattoni_1873.stg_sfa__visit_startendimages": [], "model.mattoni_1873.stg_sfa__visit_steps": [], "model.mattoni_1873.stg_sfa__warehouses": [], "model.mattoni_1873.stg_sfa__files_v": ["model.mattoni_1873.dim_images", "model.mattoni_1873.fact_images"], "model.mattoni_1873.stg_sfa__kpi_execution_plans_v": ["model.mattoni_1873.fact_kpi_plan"], "model.mattoni_1873.stg_sfa__mobile_day_tracking_v": ["model.mattoni_1873.fact_day_tracking", "model.mattoni_1873.int_mobile_tracking_gps"], "model.mattoni_1873.stg_sfa__mobile_users_v": ["model.mattoni_1873.fact_day_tracking"], "model.mattoni_1873.stg_sfa__organization_structures_v": ["model.mattoni_1873.dim_organization_structures", "model.mattoni_1873.dim_outlets", "model.mattoni_1873.dim_staff"], "model.mattoni_1873.stg_sfa__outlets_v": [], "model.mattoni_1873.stg_sfa__outlet_custom_fields_v": ["model.mattoni_1873.dim_outlets"], "model.mattoni_1873.stg_sfa__outlet_distributions_v": ["model.mattoni_1873.fact_outlet_distributions"], "model.mattoni_1873.stg_sfa__products_v": ["model.mattoni_1873.dim_products", "model.mattoni_1873.fact_outlet_distributions"], "model.mattoni_1873.stg_sfa__questionnaire_response_images_v": ["model.mattoni_1873.dim_images", "model.mattoni_1873.fact_images"], "model.mattoni_1873.stg_sfa__staff_link_org_structures_v": ["model.mattoni_1873.dim_staff"], "model.mattoni_1873.stg_sfa__visits_v": [], "snapshot.mattoni_1873.sfa__customers_snapshot": ["model.mattoni_1873.stg_sfa__customers"], "snapshot.mattoni_1873.sfa__documents_snapshot": ["model.mattoni_1873.stg_sfa__questionnaires"], "snapshot.mattoni_1873.sfa__document_items_snapshot": ["model.mattoni_1873.stg_sfa__questionnaire_items"], "snapshot.mattoni_1873.sfa__document_sections_snapshot": ["model.mattoni_1873.stg_sfa__questionnaire_sections"], "snapshot.mattoni_1873.sfa__content_files_snapshot": [], "snapshot.mattoni_1873.sfa__kpis_snapshot": [], "snapshot.mattoni_1873.sfa__kpi_execution_facts_snapshot": [], "snapshot.mattoni_1873.sfa__kpi_execution_plans_snapshot": [], "snapshot.mattoni_1873.sfa__networks_snapshot": [], "snapshot.mattoni_1873.sfa__organization_structures_snapshot": ["model.mattoni_1873.stg_sfa__organization_structures"], "snapshot.mattoni_1873.sfa__outlets_snapshot": ["model.mattoni_1873.stg_sfa__outlets"], "snapshot.mattoni_1873.sfa__products_snapshot": [], "snapshot.mattoni_1873.sfa__product_categories_snapshot": [], "snapshot.mattoni_1873.sfa__product_groups_snapshot": [], "snapshot.mattoni_1873.sfa__product_stocks_snapshot": [], "snapshot.mattoni_1873.sfa__questionnare_responses_snapshot": ["model.mattoni_1873.stg_sfa__questionnaire_responses"], "snapshot.mattoni_1873.sfa__staff_snapshot": ["model.mattoni_1873.stg_sfa__staff"], "snapshot.mattoni_1873.sfa__visits_snapshot": ["model.mattoni_1873.stg_sfa__visits"], "snapshot.mattoni_1873.sfa__visit_gps_snapshot": [], "snapshot.mattoni_1873.sfa__visit_inaccessibility_reasons_snapshot": ["model.mattoni_1873.stg_sfa__visit_inaccessibility_reasons"], "snapshot.mattoni_1873.sfa__warehouses_snapshot": [], "snapshot.mattoni_1873.sfa__warehaouses_snapshot": [], "test.mattoni_1873.unique_fact_visit_visit_id.51a0bdec45": [], "test.mattoni_1873.not_null_fact_visit_visit_id.cb04257c71": [], "test.mattoni_1873.unique_dim_visit_gps_visit_id.9bd4b198b0": [], "test.mattoni_1873.not_null_dim_visit_gps_visit_id.1d9ad5b0a1": [], "test.mattoni_1873.unique_dim_outlets_outlet_id.38208b9cc1": [], "test.mattoni_1873.not_null_dim_outlets_outlet_id.f1413d1c31": [], "test.mattoni_1873.unique_dim_organization_structures_organizational_structure_id.d7f1ba4fba": [], "test.mattoni_1873.not_null_dim_organization_structures_organizational_structure_id.4f98821484": [], "test.mattoni_1873.unique_dim_customers_customer_id.15c9f1e2fd": [], "test.mattoni_1873.not_null_dim_customers_customer_id.dd91cd1c8d": [], "test.mattoni_1873.unique_dim_inaccessibility_reasons_inaccessibility_reason_id.950672aa38": [], "test.mattoni_1873.not_null_dim_inaccessibility_reasons_inaccessibility_reason_id.da16540c2b": [], "test.mattoni_1873.unique_stg_dwh__dim_products_product_id.3fb32d4785": [], "test.mattoni_1873.not_null_stg_dwh__dim_products_product_id.aacd21cfdc": [], "model.mattoni_1873.int_pepsi_documents_closed_enhanced": ["model.mattoni_1873.sales_real", "model.mattoni_1873.sales_real"], "model.mattoni_1873.int_kmv_documents_open_enhanced": ["model.mattoni_1873.sales_real", "model.mattoni_1873.sales_real"], "model.mattoni_1873.int_kmv_documents_closed_enhanced": ["model.mattoni_1873.sales_real", "model.mattoni_1873.sales_real"], "model.mattoni_1873.sales_real": [], "model.mattoni_1873.stg_dwh__calendar": ["model.mattoni_1873.int_kmv_documents_closed_enhanced", "model.mattoni_1873.int_kmv_documents_open_enhanced", "model.mattoni_1873.int_pepsi_documents_closed_enhanced", "model.mattoni_1873.int_pepsi_documents_open_enhanced"], "source.mattoni_1873.core.FXR_AVG_vs_BGT_Main_Currency_v": ["model.mattoni_1873.stg_dwh__fx_rates"], "source.mattoni_1873.core.Currency_c": ["model.mattoni_1873.stg_dwh__currencies"], "source.mattoni_1873.core.Calendar_v": ["model.mattoni_1873.stg_dwh__calendar"], "source.mattoni_1873.pbi.dim_Entity": ["model.mattoni_1873.stg_dwh__dim_entities"], "source.mattoni_1873.pbi.dim_Country": ["model.mattoni_1873.stg_dwh__dim_countries"], "source.mattoni_1873.pbi.dim_Customer": ["model.mattoni_1873.stg_dwh__dim_customers", "model.mattoni_1873.stg_dwh__dim_customers"], "source.mattoni_1873.pbi.dim_Product": ["model.mattoni_1873.stg_dwh__dim_products"], "source.mattoni_1873.pbi.dim_Call_Representative": ["model.mattoni_1873.stg_dwh__dim_call_representatives"], "source.mattoni_1873.sap.product_now_dvt_c_hv": ["model.mattoni_1873.stg_sap__products"], "source.mattoni_1873.sap.customer_now_dvt_c_hv": ["model.mattoni_1873.stg_sap__customers"], "source.mattoni_1873.sap.bad_with_cost_closed_v": ["model.mattoni_1873.stg_sap__documents_closed"], "source.mattoni_1873.sap.bad_with_cost_open_v": ["model.mattoni_1873.stg_sap__documents_open"], "source.mattoni_1873.kmv.consolidated_closed_v": ["model.mattoni_1873.stg_sap__documents_closed_kmv"], "source.mattoni_1873.kmv.consolidated_open_v": ["model.mattoni_1873.stg_sap__documents_open_kmv"], "source.mattoni_1873.sfa.dbo_Warehouses": ["model.mattoni_1873.stg_sfa__warehouses"], "source.mattoni_1873.sfa.dbo_ContentFiles": ["model.mattoni_1873.stg_sfa__files"], "source.mattoni_1873.sfa.dbo_OutletOrderH": ["model.mattoni_1873.stg_sfa__outlet_orders_h"], "source.mattoni_1873.sfa.ps_KPIExecutionFact": ["model.mattoni_1873.stg_sfa__kpi_execution_facts"], "source.mattoni_1873.sfa.dbo_ResponsesSingleD": [], "source.mattoni_1873.sfa.dbo_OutLetsCustomField": ["model.mattoni_1873.stg_sfa__outlet_custom_fields"], "source.mattoni_1873.sfa.dbo_OutletOrderD": ["model.mattoni_1873.stg_sfa__outlet_order_d"], "source.mattoni_1873.sfa.cust_VisitKPIDataMart": ["model.mattoni_1873.base_sfa_cust_VisitKPIDataMart", "model.mattoni_1873.stg_sfa__visit_kpi_datamart"], "source.mattoni_1873.sfa.dbo_OutLets": [], "source.mattoni_1873.sfa.dbo_OrganizationalStructure": [], "source.mattoni_1873.sfa.cust_OrdersDataMart": ["model.mattoni_1873.stg_sfa__ordersdatamart"], "source.mattoni_1873.sfa.dbo_Documents": [], "source.mattoni_1873.sfa.dbo_Networks": ["model.mattoni_1873.stg_sfa__networks"], "source.mattoni_1873.sfa.cust_DistributionsDataMart": ["model.mattoni_1873.stg_sfa__distributions_datamart"], "source.mattoni_1873.sfa.dbo_OrganizationalStructureGeographyLinksActive": ["model.mattoni_1873.stg_sfa__organizationalstructuregeographylinksactive"], "source.mattoni_1873.sfa.dbo_InaccessibilityReasons": [], "source.mattoni_1873.sfa.dbo_Customers": [], "source.mattoni_1873.sfa.dbo_OutletCardStartEndImages": ["model.mattoni_1873.stg_sfa__visit_startendimages"], "source.mattoni_1873.sfa.dbo_HReports": ["model.mattoni_1873.stg_sfa__document_reports"], "source.mattoni_1873.sfa.cust_SurveyDataMart": ["model.mattoni_1873.stg_sfa__survey_datamart"], "source.mattoni_1873.sfa.cust_VisitActivityDataMart": ["model.mattoni_1873.stg_sfa__visit_activity_datamart"], "source.mattoni_1873.sfa.dbo_OutletCardGPS": [], "source.mattoni_1873.sfa.dbo_ProductCategory": ["model.mattoni_1873.stg_sfa__product_categories"], "source.mattoni_1873.sfa.ps_KPI": ["model.mattoni_1873.stg_sfa__kpis"], "source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive": ["model.mattoni_1873.stg_sfa__staff_link_org_structure"], "source.mattoni_1873.sfa.dbo_Staff": [], "source.mattoni_1873.sfa.dbo_ProductStocks": ["model.mattoni_1873.stg_sfa__product_stocks"], "source.mattoni_1873.sfa.dbo_DocumentSections": [], "source.mattoni_1873.sfa.dbo_ResponsesSingleContentD": ["model.mattoni_1873.stg_sfa__questionnaire_response_images"], "source.mattoni_1873.sfa.dbo_OutletDistribution": ["model.mattoni_1873.stg_sfa__outlet_distributions"], "source.mattoni_1873.sfa.dbo_OutletCardSteps": ["model.mattoni_1873.stg_sfa__visit_steps"], "source.mattoni_1873.sfa.dbo_DocumentItems": [], "source.mattoni_1873.sfa.ps_KPIExecutionPlan": ["model.mattoni_1873.stg_sfa__kpi_execution_plans"], "source.mattoni_1873.sfa.dbo_QuestionnaireVisibleSections": ["model.mattoni_1873.stg_sfa__questionnaire_visible_sections"], "source.mattoni_1873.sfa.dbo_ProductGroups": ["model.mattoni_1873.stg_sfa__product_groups"], "source.mattoni_1873.sfa.dbo_QuestionnaireResponseOnVisit_v": ["model.mattoni_1873.stg_sfa__questionnaire_responded_on_visit"], "source.mattoni_1873.sfa.dbo_ResponsesH": [], "source.mattoni_1873.sfa.dbo_DocumentRules": ["model.mattoni_1873.stg_sfa__document_rules"], "source.mattoni_1873.sfa.dbo_DocumentRuleParams": ["model.mattoni_1873.stg_sfa__document_rule_parameters"], "source.mattoni_1873.sfa.dbo_Products": ["model.mattoni_1873.stg_sfa__products"], "source.mattoni_1873.sfa.dbo_OutLetCardH": [], "source.mattoni_1873.sfa.dbo_ProductPromotionActive": ["model.mattoni_1873.stg_sfa__product_active_promotions"], "source.mattoni_1873.sfa.dbo_Warehouses_v": ["snapshot.mattoni_1873.sfa__warehaouses_snapshot", "snapshot.mattoni_1873.sfa__warehouses_snapshot"], "source.mattoni_1873.sfa.dbo_ContentFiles_v": ["model.mattoni_1873.stg_sfa__files_v", "snapshot.mattoni_1873.sfa__content_files_snapshot"], "source.mattoni_1873.sfa.dbo_OutletOrderH_v": [], "source.mattoni_1873.sfa.ps_KPIExecutionFact_v": ["snapshot.mattoni_1873.sfa__kpi_execution_facts_snapshot"], "source.mattoni_1873.sfa.dbo_ResponsesSingleD_v": ["model.mattoni_1873.stg_sfa__questionnaire_response_texts"], "source.mattoni_1873.sfa.dbo_OutLetsCustomField_v": ["model.mattoni_1873.stg_sfa__outlet_custom_fields_v"], "source.mattoni_1873.sfa.dbo_OutletOrderD_v": [], "source.mattoni_1873.sfa.dbo_OutLets_v": ["model.mattoni_1873.stg_sfa__outlets_v", "snapshot.mattoni_1873.sfa__outlets_snapshot"], "source.mattoni_1873.sfa.dbo_OrganizationalStructure_v": ["model.mattoni_1873.stg_sfa__organization_structures_v", "snapshot.mattoni_1873.sfa__organization_structures_snapshot"], "source.mattoni_1873.sfa.dbo_Documents_v": ["snapshot.mattoni_1873.sfa__documents_snapshot"], "source.mattoni_1873.sfa.dbo_Networks_v": ["snapshot.mattoni_1873.sfa__networks_snapshot"], "source.mattoni_1873.sfa.dbo_OrganizationalStructureGeographyLinksActive_v": [], "source.mattoni_1873.sfa.dbo_InaccessibilityReasons_v": ["snapshot.mattoni_1873.sfa__visit_inaccessibility_reasons_snapshot"], "source.mattoni_1873.sfa.dbo_Customers_v": ["snapshot.mattoni_1873.sfa__customers_snapshot"], "source.mattoni_1873.sfa.dbo_HReports_v": [], "source.mattoni_1873.sfa.dbo_OutletCardGPS_v": ["model.mattoni_1873.stg_sfa__visit_gps", "snapshot.mattoni_1873.sfa__visit_gps_snapshot"], "source.mattoni_1873.sfa.dbo_ProductCategory_v": ["snapshot.mattoni_1873.sfa__product_categories_snapshot"], "source.mattoni_1873.sfa.ps_KPI_v": ["snapshot.mattoni_1873.sfa__kpis_snapshot"], "source.mattoni_1873.sfa.dbo_StaffOrganizationalStructureLinksActive_v": ["model.mattoni_1873.stg_sfa__staff_link_org_structures_v"], "source.mattoni_1873.sfa.dbo_Staff_v": ["snapshot.mattoni_1873.sfa__staff_snapshot"], "source.mattoni_1873.sfa.dbo_ProductStocks_v": ["snapshot.mattoni_1873.sfa__product_stocks_snapshot"], "source.mattoni_1873.sfa.dbo_DocumentSections_v": ["snapshot.mattoni_1873.sfa__document_sections_snapshot"], "source.mattoni_1873.sfa.dbo_ResponsesSingleContentD_v": ["model.mattoni_1873.stg_sfa__questionnaire_response_images_v"], "source.mattoni_1873.sfa.dbo_OutletDistribution_v": ["model.mattoni_1873.stg_sfa__outlet_distributions_v"], "source.mattoni_1873.sfa.dbo_DocumentItems_v": ["snapshot.mattoni_1873.sfa__document_items_snapshot"], "source.mattoni_1873.sfa.ps_KPIExecutionPlan_v": ["model.mattoni_1873.stg_sfa__kpi_execution_plans_v", "snapshot.mattoni_1873.sfa__kpi_execution_plans_snapshot"], "source.mattoni_1873.sfa.dbo_QuestionnaireVisibleSections_v": [], "source.mattoni_1873.sfa.dbo_ProductGroups_v": ["snapshot.mattoni_1873.sfa__product_groups_snapshot"], "source.mattoni_1873.sfa.dbo_QuestionnaireResponseOnVisit_v_v": [], "source.mattoni_1873.sfa.dbo_ResponsesH_v": ["snapshot.mattoni_1873.sfa__questionnare_responses_snapshot"], "source.mattoni_1873.sfa.dbo_Products_v": ["model.mattoni_1873.stg_sfa__products_v", "snapshot.mattoni_1873.sfa__products_snapshot"], "source.mattoni_1873.sfa.dbo_OutLetCardH_v": ["model.mattoni_1873.stg_sfa__visits_v", "snapshot.mattoni_1873.sfa__visits_snapshot"], "source.mattoni_1873.sfa.dbo_MobileModuleUser_v": ["model.mattoni_1873.stg_sfa__mobile_users_v"], "source.mattoni_1873.sfa.dbo_MobileModuleUserTimeTrack_v": ["model.mattoni_1873.stg_sfa__mobile_day_tracking_v"]}}